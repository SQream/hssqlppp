
-- public api functions
{

-- | some options when typechecking
data TypeCheckingFlags =
    TypeCheckingFlags
    { -- | add qualifiers to unqualified ids where possible
     tcfAddQualifiers :: Bool
     -- | add full aliases to every tableref and subselect
    ,tcfAddFullTablerefAliases :: Bool
     -- | add explicit aliases to all select items
    ,tcfAddSelectItemAliases :: Bool
     -- | expand stars in select lists to explicit list columns
    ,tcfExpandStars :: Bool
    ,tcfDialect :: SQLSyntaxDialect}
    deriving (Show,Eq)


-- | reasonable defaults for type checking, doesn't add anything
-- optional
defaultTypeCheckingFlags :: TypeCheckingFlags
defaultTypeCheckingFlags =
    TypeCheckingFlags
    {tcfAddQualifiers = False
    ,tcfAddFullTablerefAliases = False
    ,tcfAddSelectItemAliases = False
    ,tcfExpandStars = False
    ,tcfDialect = PostgreSQLDialect}

-- | Typechecks the ast, and returns the updated catalog (which
-- includes changes from any ddl statements in the ast).
typeCheckStatements :: TypeCheckingFlags -> Catalog -> [Statement] -> (Catalog,[Statement])
typeCheckStatements f cat sts =
    let t = sem_Root (Root sts)
        ta = wrap_Root t Inh_Root {cat_Inh_Root = cat
                                  ,flags_Inh_Root = f
                                  {-,lib_Inh_Root = emptyBindings
                                  ,idenv_Inh_Root = emptyIDEnv "tcs"-}}
        tl = annotatedTree_Syn_Root ta
        cat1 = cat --producedCat_Syn_Root ta
    in case tl of
         Root r -> (cat1,fixTree r)
-- | Typecheck a query expr
typeCheckQueryExpr :: TypeCheckingFlags -> Catalog -> QueryExpr -> QueryExpr
typeCheckQueryExpr f cat qe =
   let (_,[QueryStatement _ qe']) = typeCheckStatements f cat [QueryStatement emptyAnnotation qe]
   in qe'

-- | Not working yet. Typechecks a statement possibly containing ?
-- placeholders. These are annotated with the 'inferred type', and the
-- stType annotation on the return value can be used to get this info
-- easily. Returns Left if the statement is not a query,insert,update or delete
-- statement
typeCheckParameterizedStatement :: TypeCheckingFlags -> Catalog -> Statement -> Either String Statement
typeCheckParameterizedStatement f cat st =
    case st of
      QueryStatement _ _ -> tc
      Insert _ _ _ _ _ -> tc
      Update _ _ _ _ _ _ -> tc
      Delete _ _ _ _ _ -> tc
      _ -> Left "requires select, update, insert or delete statement"
    where
      tc = let tl = typeCheckStatements f cat [st]
           in case tl of
                (_,[st1]) -> Right st1
                _ -> error "impossible happened in typeCheckPS!"


-- | type check a scalar expr
typeCheckScalarExpr :: TypeCheckingFlags -> Catalog -> ScalarExpr -> ScalarExpr
typeCheckScalarExpr f cat ex =
    let t = sem_ScalarExprRoot (ScalarExprRoot ex)
        rt = (annotatedTree_Syn_ScalarExprRoot
              (wrap_ScalarExprRoot t Inh_ScalarExprRoot {cat_Inh_ScalarExprRoot = cat
                                                        ,flags_Inh_ScalarExprRoot = f
                                                        {-,lib_Inh_ScalarExprRoot = emptyBindings
                                                        ,idenv_Inh_ScalarExprRoot = emptyIDEnv "t
cse"-}}))
    in case rt of
         ScalarExprRoot e -> fixTree e

typeCheckScalarExprEnv::  TypeCheckingFlags -> Catalog -> Environment
                          -> ScalarExpr -> ScalarExpr
typeCheckScalarExprEnv f cat env ex =
    let t = sem_ScalarExprRoot (ScalarExprRoot ex)
        rt = annotatedTree_Syn_ScalarExprRoot
                $ wrap_ScalarExprRoot t
                    Inh_ScalarExprRoot{cat_Inh_ScalarExprRoot = cat
                                      ,flags_Inh_ScalarExprRoot = f
                                      ,downEnv_Inh_ScalarExprRoot = env}
    in case rt of
         ScalarExprRoot e -> fixTree e

}

{-

main global attributes

-}

attr AllNodes Root ScalarExprRoot Annotation
  inh cat :: Catalog
     ,flags :: TypeCheckingFlags
  syn annotatedTree :: SELF -- annotated tree is the output tree with the types added
     ,originalTree :: SELF -- this is the original tree, should not be changed

-- the types and errors are pulled out of the attributes, which
-- are set by the sem for each type/ ctor in the various files in
-- TypeChecking/ and put into the annotated tree output

attr Annotation
  inh tpe :: {Either [TypeError] TypeExtra}

attr AllNodes Annotation
  inh imCast :: {Maybe TypeExtra}

sem Root
   | Root
       statements.imCast = Nothing
sem ScalarExprRoot
   | ScalarExprRoot
       expr.imCast = Nothing

sem Annotation
  | Annotation
      lhs.annotatedTree =
          let t = either (const Nothing) Just @lhs.tpe
              es = either id (const []) @lhs.tpe
          in Annotation @anSrc t es @lhs.imCast @anCatUpd


include "TypeChecking/ScalarExprs.ag"
include "TypeChecking/QueryExprs/QueryExprs.ag"
include "TypeChecking/Misc.ag"
include "TypeChecking/Statements.ag"
--include "TypeChecking/AddTrefAliases.ag"
--{
--addTrefAliases = id
--}

{

-- | run on a typechecked tree. Finds all the places where an implicit
-- cast has been used in the typechecking and inserts an explicit cast
addExplicitCasts :: Data a => a -> a
addExplicitCasts = transformBi removeDoubleCasts . transformBi addCast
  where
    addCast :: ScalarExpr -> ScalarExpr
    addCast e = fromMaybe e $ do
                  t <- anImplicitCast (getAnnotation e)
                  n <- nameOfType $ teType t
                  return $ Cast emptyAnnotation e n
    -- addCast isn't very smart, so remove any unneeded casts
    -- that it has inserted. Only do this when have two
    -- nested casts which cast to the same type, so this
    -- shouldn't cause problems with sane sql
    removeDoubleCasts :: ScalarExpr -> ScalarExpr
    removeDoubleCasts e = case e of
      (Cast a (Cast _ e' t1) t)
         | resetAnnotations t1 == resetAnnotations t -> Cast a e' t
      e' -> e'
    resetAnnotations = transformBi (const emptyAnnotation)
-- | variation of the above, which uses ImplicitCast ctor
addImplicitCasts :: Data a => Catalog -> a -> a
addImplicitCasts cat = transformBi removeDoubleCasts . transformBi addCast
  where
    addCast:: ScalarExpr -> ScalarExpr
    addCast e = fromMaybe e $ do
                  te <- anImplicitCast ann
                  -- ImplicitCastToDo: why anImplicitCast is not Nothing above Star
                  guard $ (not . isStar) e -- temporary
                  nameOfType $ teType te -- in order to preserve the old logic
                  -- guard $ isCastable e $ teType te
                  return $ ImplicitCast emptyAnnotation e te
      where
        isCastable:: ScalarExpr -> Type -> Bool
        isCastable e to = fromMaybe False $ do
            from <- liftM teType $ anType $ getAnnotation e
            either  (const $ if from == UnknownType then Just True else Nothing) Just
                    $ catCast cat ImplicitCastContext from to
        isStar:: ScalarExpr -> Bool
        isStar e = case e of
          Star{} -> True
          QStar{} -> True
          _ -> False
        ann = getAnnotation e
    removeDoubleCasts:: ScalarExpr -> ScalarExpr
    removeDoubleCasts e = fst $ accumulateCasts e
    -- For each implicit cast, if there is a sequence of implicit casts right under it,
    --    that remained after bottom-up application of the algorithm being described:
    --  1. Check if there is a type in the sequence (of argument types of implicit casts),
    --      which is implicitly castable to the target type of the current implicit cast,
    --      according to the current catalog.
    --  2. If there is such a type, replace a sequence of casts that starts at this type with
    --      a single cast, and shorten the list of casts to be further investigated (snd of
    --      output type of this function).
    --    2.1. Analyze the list bottom-up, so that the longest possible sequence of casts is
    --      replaced.
    --  3. If there is no such a type, just add the current cast to the list.
    -- Reset the list on a node other than ImplicitCast.
    accumulateCasts:: ScalarExpr -> (ScalarExpr,[(ScalarExpr,Type)])
    accumulateCasts e = case e of
        ImplicitCast a e' te
          ->  let (e1,ets) = accumulateCasts e'
                  eStart = ImplicitCast a e1 te
                  isCastable (_,t) = either (const False) id
                      $ catCast cat ImplicitCastContext t $ teType te
                  f z xs = case dropWhile (not . isCastable) xs of
                      [] -> z
                      xs'@((e'',_):rest) -> f (ImplicitCast a e'' te, xs') rest
              in case anType $ getAnnotation e1 of
                    Nothing -> (eStart,[]) -- cut here (should not happen in practice)
                    Just te1 -> f (eStart, (e1, teType te1):ets) ets
        _ -> (e,[])

nameOfType :: Type -> Maybe TypeName
nameOfType (ScalarType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
-- a hack to support precision cast from string literals
nameOfType UnknownType = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc "unknown"])
nameOfType (DomainType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType (EnumType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType (NamedCompositeType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType _ = Nothing

-- hack for various fixups
fixTree :: Data a => a -> a
fixTree = fixMssqlDates

{-


fix up datediff,datepart for sql server: set the type for the first
argument to type in if it is in the acceptable list

todo: make this approach more generic

plan:
add a new type called pseudo enum

add functions like datepart to the normal catalog to be looked up in
the normal way. type them using the pseudo enum for the identifiers which aren't really identifiers, just symbols

fix the environment passed to these identifiers during type checking
to look up the correct set of possible values so there are no bogus
type errors introduced which then need to be fixed layer

store the list of different pseudo enum collections and the possible
values for each somewhere (in the catalog?) and link functions like
datepart to the correct lists


-}

fixMssqlDates :: Data a => a -> a
fixMssqlDates = transformBi $ \x -> case x of
  App aa nm@(Name _ [Nmc fn]) [Identifier ai tn@(Name _ [Nmc tnn]),a,b]
    | map toLower fn == "datediff"
    , map toLower tnn `elem` ["hour"] ->
      App aa nm [Identifier (nai ai) tn,a,b]
  App aa nm@(Name _ [Nmc fn]) [Identifier ai tn@(Name _ [Nmc tnn]),a]
    | map toLower fn == "datepart"
    , map toLower tnn `elem` ["day","dd","d","month","mm","m","year","yyyy",
			      "yy","quarter","qq","q","dayofyear","doy","dy","y",
			      "weekday","dw","week","ww","wk","hour","hh",
			      "minute","mi","n","second","ss","s","millisecond","ms"] ->
      App aa nm [Identifier (nai ai) tn,a]
  App aa nm@(Name _ [Nmc fn]) [Identifier ai tn@(Name _ [Nmc tnn]),a,b]
    | map toLower fn == "dateadd"
    , map toLower tnn `elem` ["day","dd","d","month","mm","m","year","yyyy",
			      "yy","quarter","qq","q","dayofyear","doy","dy","y",
			      "weekday","dw","week","ww","wk","hour","hh",
			      "minute","mi","n","second","ss","s","millisecond","ms"] ->
      App aa nm [Identifier (nai ai) tn,a,b]
  x' -> x'
  where
      nai ai = ai {anType = Just $ mkTypeExtraNN typeInt
                  ,anErrs = []}

}

