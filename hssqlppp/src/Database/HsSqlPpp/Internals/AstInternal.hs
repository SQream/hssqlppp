

{-# LANGUAGE TupleSections,ScopedTypeVariables,DeriveDataTypeable,OverloadedStrings #-}
-- UUAGC 0.9.52.1 (hssqlppp/src/Database/HsSqlPpp/Internals/AstInterna)
module Database.HsSqlPpp.Internals.AstInternal(
    --from the ag files:
    --ast nodes
    Statement (..)
   ,QueryExpr (..)
   ,WithQueryList
   ,WithQuery(..)
   ,FnBody (..)
   ,SetClause (..)
   ,SetClauseList
   ,TableRef (..)
   ,JoinExpr (..)
   ,JoinType (..)
   ,JoinHint (..)
   ,SelectList (..)
   ,SelectItem (..)
   ,CopyFromSource (..)
   ,CopyToSource(..)
   ,CopyToOption(..)
   ,CopyFromOption(..)
   ,TablePartitionDef(..)
   ,TablePartitionDateTimeInterval(..)
   ,AttributeDef (..)
   ,RowConstraint (..)
   ,TableOption(..)
   ,AlterDatabaseOperation(..)
   ,AlterTableOperation(..)
   ,AlterTableAction(..)
   ,AlterSequenceOperation(..)
   ,AlterSequenceAction(..)
   ,AlterColumnAction(..)
   ,AlterSchemaOperation(..)
   ,Constraint (..)
   ,TypeAttributeDef (..)
   ,ParamDef (..)
   ,VarDef (..)
   ,RaiseType (..)
   ,CombineType (..)
   ,Volatility (..)
   ,Language (..)
   ,TypeName (..)
   ,DropType (..)
   ,Cascade (..)
   ,Direction (..)
   ,Distinct (..)
   ,NullsOrder(..)
   ,Natural (..)
   ,IfExists (..)
   ,Replace(..)
   ,RestartIdentity (..)
   ,ScalarExpr (..)
   ,Name(..)
   ,nameComponents
   ,NameComponent(..)
   ,ncStr
   ,IntervalField(..)
   ,ExtractField(..)
   ,FrameClause(..)
   ,OdbcLiteralType(..)
   ,InList (..)
   ,LiftFlavour(..)
   ,TriggerWhen(..)
   ,TriggerEvent(..)
   ,TriggerFire(..)
   ,QueryHint(..)
   ,StatementList
   ,ScalarExprListStatementListTripleList
   ,ScalarExprListStatementListTriple
   ,ScalarExprList
   ,ParamDefList
   ,AttributeDefList
   ,ConstraintList
   ,TypeAttributeDefList
   ,TypeNameList
   ,NameTypeNameListPair
   ,NameTypeNameListPairList
   ,ScalarExprStatementListPairList
   --,SetClauseList
   ,CaseScalarExprListScalarExprPairList
   ,MaybeScalarExpr
   ,TableRefList
   ,ScalarExprListList
   ,SelectItemList
   ,OnExpr
   ,RowConstraintList
   ,VarDefList
   ,ScalarExprStatementListPair
   ,CaseScalarExprListScalarExprPair
   ,ScalarExprDirectionPair
   ,ScalarExprDirectionPairList
   ,MaybeBoolExpr
   ,MaybeSelectList
   ,SetValue(..)
   ,AlterTableActionList
   ,NameComponentList
   ,MaybeNameComponentList
   -- typechecking
   ,typeCheckStatements
   ,typeCheckParameterizedStatement
   ,typeCheckScalarExpr
   ,typeCheckScalarExprEnv
   ,typeCheckQueryExpr
   ,TypeCheckingFlags(..)
   ,defaultTypeCheckingFlags
   ,addExplicitCasts
   ,addImplicitCasts
   -- annotation
   ,Annotation(..)
   ,TypeExtra(..)
   ,SourcePosition
   ,ParameterizedStatementType
   ,getAnnotation
   ,updateAnnotation
   ,emptyAnnotation
   ,makeSelect
   ,canonicalizeTypeNames
) where

--import Data.Maybe
--import Data.Either
--import Data.List
--import Control.Applicative
import Data.Data
--import Data.Char
--import Control.Monad.State
--import Control.Arrow

import Data.Generics
import Data.Generics.Uniplate.Data
--import Debug.Trace
--import Text.Show.Pretty


--import Database.HsSqlPpp.Internals.TypesInternal

--import Database.HsSqlPpp.Internals.TypeChecking.TypeConversion
--import Database.HsSqlPpp.Internals.TypeChecking.Environment hiding (JoinType(..))

--import Database.HsSqlPpp.Internals.Catalog.CatalogInternal (NameComponent(..),ncStr)

--import Database.HsSqlPpp.Utils.Utils
import Database.HsSqlPpp.SqlDialect
--import Data.Text (Text)
import qualified Data.Text as T
--import qualified Data.Text.Lazy as LT

-- very bad, we use types in the syntax outside of the already exception
-- in the annotation (which can be removed when the annotation type
-- becomes a type parameters
-- can replace the use of type extra with (typename,int,int) triple
-- to fix this
--import Database.HsSqlPpp.Internals.TypesInternal (TypeExtra)



{-# LINE 29 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}

import Text.Read
--import Debug.Trace
import Database.HsSqlPpp.Dialects.OdbcCatalog
{-# LINE 166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 2 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}

import Data.Text (Text)
import qualified Database.HsSqlPpp.Internals.TypeChecking.Environment as E
import Database.HsSqlPpp.Internals.TypeChecking.Environment (Environment)
import Database.HsSqlPpp.Internals.TypesInternal
import Database.HsSqlPpp.Internals.Catalog.CatalogInternal
import Database.HsSqlPpp.Internals.TypeChecking.TypeConversion.TypeConversion
import Control.Monad
import Data.List
import Data.Maybe
import Data.Char
import Control.Applicative
{-# LINE 181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 14 "hssqlppp/src/Database/HsSqlPpp/Internals/Annotation.ag" #-}

import qualified Database.HsSqlPpp.Internals.TypesInternal as T
import qualified Database.HsSqlPpp.Internals.Catalog.CatalogInternal as C

{-# LINE 188 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
{-# LINE 62 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}

-- todo: replace the other nmcString function with this one
-- which uses either instead of error
xnmcString :: NameComponent -> Either [TypeError] Text
xnmcString (QNmc n) = Right $ T.pack n
xnmcString (Nmc n) = Right $ T.pack $ map toLower n
xnmcString (AntiNameComponent _) = Left [InternalError "tried to get nmc string from antinamecomponent"]
{-# LINE 197 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 191 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}

splitTypeExtraList:: Maybe [TypeExtra] -> Maybe (TypeExtra,[TypeExtra])
splitTypeExtraList mte = mte >>= f
  where
    f [] = Nothing
    f (et:ets') = Just (et,ets')
{-# LINE 206 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 212 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}


-- | thet name to choose for a column in a select list which doesn't
-- have an explicit name - these are postgresql's rules
columnName :: ScalarExpr -> NameComponent
columnName (Identifier _ i) = last $ nameComponents i
columnName (App _ (Name _ ncs) _) = last ncs
columnName (Cast _ _ (SimpleTypeName _ (Name _ ncs))) = last ncs
columnName (ImplicitCast _ e _) = columnName e
columnName (WindowApp _ (App _ (Name _ ncs) _) _ _ _) = last ncs
columnName (AggregateApp _ _ (App _ (Name _ ncs) _) _) = last ncs
columnName _ = QNmc "?column?"
{-# LINE 221 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 160 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}

convertJoinType:: JoinType -> E.JoinType
convertJoinType LeftOuter = E.LeftOuter
convertJoinType RightOuter = E.RightOuter
convertJoinType FullOuter = E.FullOuter
convertJoinType _ = E.Inner
{-# LINE 230 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 82 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}

secondM :: Functor f => (t -> f a) -> (t1, t) -> f (t1, a)
secondM f (a,b) = (a,) <$> f b
{-# LINE 236 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 53 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}

needsImplicitCast:: Bool -> TypeExtra -> TypeExtra -> Bool
needsImplicitCast expectedCast upType expType
    = tePrecision upType /= tePrecision expType
      || teScale upType /= teScale expType
      || teNullable upType /= teNullable expType
          && nullabilityCast
      ||  teType upType /= teType expType
          && (not . null) (nub [teType upType, teType expType] \\ [ScalarType "varchar", ScalarType "text",ScalarType "nvarchar"])
  where
    nullabilityCast = expectedCast
-- this function appeared because nullability does not always influence the type to cast to
implicitCastType:: Bool -> TypeExtra -> TypeExtra -> TypeExtra
implicitCastType expectedCast upType expType
    = expType{tePrecision = precision, teScale = scale, teNullable = nullability}
  where
    nullabilityCast = expectedCast
    nullabilitySource = if nullabilityCast then expType else upType
    precisionSource = expType
    nullability = teNullable nullabilitySource
    precision = tePrecision precisionSource
    scale = teScale precisionSource
{-# LINE 261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 466 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}

tcAppLike:: SQLSyntaxDialect -> Catalog -> Name
            -> [ScalarExpr] -> [Maybe TypeExtra]
            -> Either [TypeError] ([TypeExtra],TypeExtra)

tcAppLike d cat anm@(Name _ [Nmc dd]) types [_,a0,a1]
    | map toLower dd == "datediff" = do
  -- dodgy hack for datediff
  tys <- mapM (maybe (Left []) Right) [a0,a1]
  let Name _ ns = anm
      lits = getMaybeIntsFromLiterals types
  (ats,rt) <- matchAppExtra d cat ns lits (mkTypeExtraNN typeInt : tys)
  return (ats,rt)
tcAppLike d cat anm@(Name _ [Nmc dd]) types [_,a0]
    | map toLower dd == "datepart" = do
  tys <- mapM (maybe (Left []) Right) [a0]
  let Name _ ns = anm
      lits = getMaybeIntsFromLiterals types
  (ats,rt) <- matchAppExtra d cat ns lits (mkTypeExtraNN typeInt : tys)
  return (ats,rt)
tcAppLike d cat anm@(Name _ [Nmc dd]) types [_,a0,a1]
    | map toLower dd == "dateadd" = do
  tys <- mapM (maybe (Left []) Right) [a0,a1]
  let Name _ ns = anm
      lits = getMaybeIntsFromLiterals types
  (ats,rt) <- matchAppExtra d cat ns lits (mkTypeExtraNN typeInt : tys)
  return (ats,rt)

--tcAppLike d cat anm@(Name _ [Nmc dd]) a b
--    |  trace ("xz: " ++ show (a,b)) False = undefined

tcAppLike d cat anm@(Name _ [Nmc dd]) _ ts
    | map toLower dd == "!odbc-convert" = do
                 (tys :: [TypeExtra]) <- mapM (maybe (Left []) Right) ts
                 let Name _ ns = anm
                 (ats,rt) <- matchAppExtra d cat ns [] tys
                 return (ats,rt)

tcAppLike d cat anm@(Name _ [Nmc dd]) _types [_,a0,a1]
    | map toLower dd `elem` ["!odbc-timestampadd","!odbc-timestampdiff"] = do
  tys <- mapM (maybe (Left []) Right) [a0,a1]
  let Name _ ns = anm
  (ats,rt) <- matchAppExtra d cat ns [] (mkTypeExtraNN typeInt : tys)
  return (ats,rt)


tcAppLike d cat anm types teArgs = do
  -- get the types of the arguments
  -- then lookup in TypeConversion.matchAppExtra
  tys <- mapM (maybe (Left []) Right) teArgs
  let Name _ ns = anm
      lits = getMaybeIntsFromLiterals types
  (ats,rt) <- matchAppExtra d cat ns lits tys
  return (ats,rt)
{-# LINE 318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 522 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}

getMaybeIntsFromLiterals :: [ScalarExpr] -> MatchAppLiteralList
getMaybeIntsFromLiterals sel = map extractor sel
  where
   extractor :: ScalarExpr -> Maybe Int
   extractor (NumberLit _ s) = readMaybe s :: Maybe Int
   extractor _ = Nothing
{-# LINE 328 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 800 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}

classifyInteger :: String -> Type
classifyInteger s = case (readMaybe s :: Maybe Integer) of
                      -- assuming number literals are always positive
                      Just n | n < (2 ^ (31 :: Integer)) -> typeInt
                             | n < (2 ^ (63 :: Integer)) -> typeBigInt
                      _ -> typeNumeric
{-# LINE 338 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 17 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}


-- | some options when typechecking
data TypeCheckingFlags =
    TypeCheckingFlags
    { -- | add qualifiers to unqualified ids where possible
     tcfAddQualifiers :: Bool
     -- | add full aliases to every tableref and subselect
    ,tcfAddFullTablerefAliases :: Bool
     -- | add explicit aliases to all select items
    ,tcfAddSelectItemAliases :: Bool
     -- | expand stars in select lists to explicit list columns
    ,tcfExpandStars :: Bool
    ,tcfDialect :: SQLSyntaxDialect}
    deriving (Show,Eq)


-- | reasonable defaults for type checking, doesn't add anything
-- optional
defaultTypeCheckingFlags :: TypeCheckingFlags
defaultTypeCheckingFlags =
    TypeCheckingFlags
    {tcfAddQualifiers = False
    ,tcfAddFullTablerefAliases = False
    ,tcfAddSelectItemAliases = False
    ,tcfExpandStars = False
    ,tcfDialect = PostgreSQLDialect}

-- | Typechecks the ast, and returns the updated catalog (which
-- includes changes from any ddl statements in the ast).
typeCheckStatements :: TypeCheckingFlags -> Catalog -> [Statement] -> (Catalog,[Statement])
typeCheckStatements f cat sts =
    let t = _sem_Root (Root sts)
        ta = _wrap_Root t Inh_Root {_cat_Inh_Root = cat
                                  ,_flags_Inh_Root = f
                                  {-,_lib_Inh_Root = emptyBindings
                                  ,_idenv_Inh_Root = emptyIDEnv "tcs"-}}
        tl = _annotatedTree_Syn_Root ta
        cat1 = cat --_producedCat_Syn_Root ta
    in case tl of
         Root r -> (cat1,fixTree r)
-- | Typecheck a query expr
typeCheckQueryExpr :: TypeCheckingFlags -> Catalog -> QueryExpr -> QueryExpr
typeCheckQueryExpr f cat qe =
   let (_,[QueryStatement _ qe']) = typeCheckStatements f cat [QueryStatement emptyAnnotation qe]
   in qe'

-- | Not working yet. Typechecks a statement possibly containing ?
-- placeholders. These are annotated with the 'inferred type', and the
-- stType annotation on the return value can be used to get this info
-- easily. Returns Left if the statement is not a query,insert,update or delete
-- statement
typeCheckParameterizedStatement :: TypeCheckingFlags -> Catalog -> Statement -> Either String Statement
typeCheckParameterizedStatement f cat st =
    case st of
      QueryStatement _ _ -> tc
      Insert _ _ _ _ _ -> tc
      Update _ _ _ _ _ _ -> tc
      Delete _ _ _ _ _ -> tc
      _ -> Left "requires select, update, insert or delete statement"
    where
      tc = let tl = typeCheckStatements f cat [st]
           in case tl of
                (_,[st1]) -> Right st1
                _ -> error "impossible happened in typeCheckPS!"


-- | type check a scalar expr
typeCheckScalarExpr :: TypeCheckingFlags -> Catalog -> ScalarExpr -> ScalarExpr
typeCheckScalarExpr f cat ex =
    let t = _sem_ScalarExprRoot (ScalarExprRoot ex)
        rt = (_annotatedTree_Syn_ScalarExprRoot
              (_wrap_ScalarExprRoot t Inh_ScalarExprRoot {_cat_Inh_ScalarExprRoot = cat
                                                        ,_flags_Inh_ScalarExprRoot = f
                                                        ,_downEnv_Inh_ScalarExprRoot = E.emptyEnvironment
                                                        {-,_lib_Inh_ScalarExprRoot = emptyBindings
                                                        ,_idenv_Inh_ScalarExprRoot = emptyIDEnv "t
cse"-}}))
    in case rt of
         ScalarExprRoot e -> fixTree e

typeCheckScalarExprEnv::  TypeCheckingFlags -> Catalog -> Environment
                          -> ScalarExpr -> ScalarExpr
typeCheckScalarExprEnv f cat env ex =
    let t = _sem_ScalarExprRoot (ScalarExprRoot ex)
        rt = _annotatedTree_Syn_ScalarExprRoot
                $ _wrap_ScalarExprRoot t
                    Inh_ScalarExprRoot{_cat_Inh_ScalarExprRoot = cat
                                      ,_flags_Inh_ScalarExprRoot = f
                                      ,_downEnv_Inh_ScalarExprRoot = env}
    in case rt of
         ScalarExprRoot e -> fixTree e

{-# LINE 434 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 161 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}


-- | run on a typechecked tree. Finds all the places where an implicit
-- cast has been used in the typechecking and inserts an explicit cast
addExplicitCasts :: Data a => a -> a
addExplicitCasts = transformBi removeDoubleCasts . transformBi addCast
  where
    addCast :: ScalarExpr -> ScalarExpr
    addCast e = fromMaybe e $ do
                  t <- anImplicitCast (getAnnotation e)
                  n <- nameOfType $ teType t
                  return $ Cast emptyAnnotation e n
    -- addCast isn't very smart, so remove any unneeded casts
    -- that it has inserted. Only do this when have two
    -- nested casts which cast to the same type, so this
    -- shouldn't cause problems with sane sql
    removeDoubleCasts :: ScalarExpr -> ScalarExpr
    removeDoubleCasts e = case e of
      (Cast a (Cast _ e' t1) t)
         | resetAnnotations t1 == resetAnnotations t -> Cast a e' t
      e' -> e'
    resetAnnotations = transformBi (const emptyAnnotation)
-- | variation of the above, which uses ImplicitCast ctor
addImplicitCasts :: Data a => Catalog -> a -> a
addImplicitCasts cat = transformBi removeDoubleCasts . transformBi addCast
  where
    addCast:: ScalarExpr -> ScalarExpr
    addCast e = fromMaybe e $ do
                  te <- anImplicitCast ann'
                  -- ImplicitCastToDo: why anImplicitCast is not Nothing above Star
                  _ <- nameOfType $ teType te -- in order to preserve the old logic
                  -- guard $ isCastable e $ teType te
                  guard $ anType ann' /= Just te
                  return $ ImplicitCast emptyAnnotation e te
      where
        _isCastable:: ScalarExpr -> Type -> Bool
        _isCastable e' to = fromMaybe False $ do
            from <- liftM teType $ anType $ getAnnotation e'
            either  (const $ if from == UnknownType then Just True else Nothing) Just
                    $ catCast cat ImplicitCastContext from to
        ann' = getAnnotation e
    removeDoubleCasts:: ScalarExpr -> ScalarExpr
    removeDoubleCasts e = fst $ accumulateCasts e
    -- For each implicit cast, if there is a sequence of implicit casts right under it,
    --    that remained after bottom-up application of the algorithm being described:
    --  1. Check if there is a type in the sequence (of argument types of implicit casts),
    --      which is implicitly castable to the target type of the current implicit cast,
    --      according to the current catalog.
    --  2. If there is such a type, replace a sequence of casts that starts at this type with
    --      a single cast, and shorten the list of casts to be further investigated (snd of
    --      output type of this function).
    --    2.1. Analyze the list bottom-up, so that the longest possible sequence of casts is
    --      replaced.
    --  3. If there is no such a type, just add the current cast to the list.
    -- Reset the list on a node other than ImplicitCast.
    accumulateCasts:: ScalarExpr -> (ScalarExpr,[(ScalarExpr,Type)])
    accumulateCasts e = case e of
        ImplicitCast a e' te
          ->  let (e1,ets) = accumulateCasts e'
                  eStart = ImplicitCast a e1 te
                  isCastable (_,t) = either (const False) id
                      $ catCast cat ImplicitCastContext t $ teType te
                  f z xs = case dropWhile (not . isCastable) xs of
                      [] -> z
                      xs'@((e'',_):rest) -> f (ImplicitCast a e'' te, xs') rest
              in case anType $ getAnnotation e1 of
                    Nothing -> (eStart,[]) -- cut here (should not happen in practice)
                    Just te1 -> f (eStart, (e1, teType te1):ets) ets
        _ -> (e,[])

nameOfType :: Type -> Maybe TypeName
nameOfType (ScalarType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
-- a hack to support precision cast from string literals
nameOfType UnknownType = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc "unknown"])
nameOfType (DomainType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType (EnumType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType (NamedCompositeType t) = Just $ SimpleTypeName emptyAnnotation (Name emptyAnnotation [Nmc $ T.unpack t])
nameOfType _ = Nothing

-- hack for various fixups
fixTree :: Data a => a -> a
fixTree = fixMssqlDates

{-


disgusting hack to fix up datediff,datepart, convert and other
functions which accept a fixed list of keywords for one or more of the
arguments for sql server: set the type for the first argument to type
in if it is in the acceptable list.

This is really bad. What happens is that the normal typechecker will
check the keyword as an identifier and (usually!) put in unknown
identifier error. Then, when the function is typechecked, it will
ignore the type for this argument. After we've finished, the type
error is replaced with int type here.

The proper fix:

I think a good way to look at these is to consider them fixed enums
which can only accept a literal (and not an enum valued
expression). We set a flag/enum thing in the typecheck environment of
the identifier, so that it can check the identifier fits one of the
valid functions in the identifier itself. Then, there doesn't need to
be a fix here, and typechecking the function should work without a
hack here too. The typechecking of the function itself still needs
some special casing (e.g. for the convert function in odbc (and
similar in regular sql server syntax), the result type depends on the
value of the 'enum'. This can be implemented in a similar way to the
literal ints being passed to the function type checker.

This will be fixed with the rewrite of the findcallmatch/matchapp/a
million different fns for precision and nullability/tcApplike mess.

-}

fixMssqlDates :: Data a => a -> a
fixMssqlDates = transformBi $ \x -> case x of
  App aa nm@(Name _ [Nmc fn]) [Identifier ai tn@(Name _ [Nmc tnn]),a,b]
    | map toLower fn `elem` ["datediff","dateadd"]
    , map toLower tnn `elem` dateparts ->
      App aa nm [Identifier (nai ai) tn,a,b]
  App aa nm@(Name _ [Nmc fn]) [Identifier ai tn@(Name _ [Nmc tnn]),a]
    | map toLower fn == "datepart"
    , map toLower tnn `elem` dateparts ->
      App aa nm [Identifier (nai ai) tn,a]
  App aa nm@(Name _ [Nmc fn]) [a,Identifier ai tn@(Name _ [Nmc tnn])]
    | map toLower fn == "convert"
    , map toLower tnn `elem` map fst odbcConvertTypes ->
      App aa nm [a,Identifier (nai ai) tn]
  App aa nm@(Name _ [Nmc fn]) (Identifier ai tn@(Name _ [Nmc tnn]):as)
    | map toLower fn `elem` ["timestampadd","timestampdiff"]
    , map toLower tnn `elem` odbcIntervalTypes ->
      App aa nm (Identifier (nai ai) tn:as)
  x' -> x'
  where
      dateparts :: [String]
      dateparts = ["day","dd","d","month","mm","m","year","yyyy"
                  ,"yy","quarter","qq","q","dayofyear","doy","dy","y"
                  ,"weekday","dw","week","ww","wk","hour","hh"
                  ,"minute","mi","n","second","ss","s","millisecond","ms"
                  ,"microsecond","mcs","nanosecond","ns"]

      nai ai = ai {anType = Just $ mkTypeExtraNN typeInt
                  ,anErrs = []}

{-# LINE 583 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 20 "hssqlppp/src/Database/HsSqlPpp/Internals/Annotation.ag" #-}

-- | Represents a source file position, usually set by the parser.
type SourcePosition = (FilePath,Int,Int)

-- | Statement type is used for getting type information for a
-- parameterized statement. The first part is the args that the
-- parameterized statement needs, and the second is the names and types
-- of the output columns. No way to signal that a statement returns
-- exactly one row at the moment
type ParameterizedStatementType = ([T.Type],[(String,T.Type)])

{-# LINE 597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 52 "hssqlppp/src/Database/HsSqlPpp/Internals/Annotation.ag" #-}


--some simple wrappers around uniplate for internal use. I'm not sure
--which of these are actually used

-- | An annotation value with no information.
emptyAnnotation :: Annotation
emptyAnnotation = Annotation Nothing Nothing [] Nothing []

-- | get the annotation for the root element of the tree passed
getAnnotation :: Data a => a -> Annotation
getAnnotation = head . childrenBi

--don't know how to do this one with uniplate

-- | Update the first annotation in a tree using the function supplied
updateAnnotation :: Data a => (Annotation -> Annotation) -> a -> a
updateAnnotation f = gmapT (mkT f)

{-# LINE 619 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

nameComponents :: Name -> [NameComponent]
nameComponents (Name _ is) = is
-- todo: don't use error
nameComponents (AntiName _) = error "tried to get namecomponents of antiname"
{-# LINE 627 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 413 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}



data LiftFlavour = LiftAny | LiftAll
                   deriving (Show,Eq,Typeable,Data)

data Direction = Asc | Desc
                 deriving (Show,Eq,Typeable,Data)

data NullsOrder = NullsDefault | NullsFirst | NullsLast
                 deriving (Show,Eq,Typeable,Data)

data Distinct = Distinct | All
                deriving (Show,Eq,Typeable,Data)

-- maybe should improve this, since you can have at least union
-- distinct and union all just like select distinct and select all

data CombineType = Except | Union | Intersect | UnionAll
                   deriving (Show,Eq,Typeable,Data)

data IntervalField = IntervalYear
                   | IntervalMonth
                   | IntervalDay
                   | IntervalHour
                   | IntervalMinute
                   | IntervalSecond
                   | IntervalYearToMonth
                   | IntervalDayToHour
                   | IntervalDayToMinute
                   | IntervalDayToSecond
                   | IntervalHourToMinute
                   | IntervalHourToSecond
                   | IntervalMinuteToSecond
                     deriving (Show,Eq,Typeable,Data)

data ExtractField = ExtractCentury
                  | ExtractDay
                  | ExtractDecade
                  | ExtractDow
                  | ExtractDoy
                  | ExtractEpoch
                  | ExtractHour
                  | ExtractIsodow
                  | ExtractIsoyear
                  | ExtractMicroseconds
                  | ExtractMillennium
                  | ExtractMilliseconds
                  | ExtractMinute
                  | ExtractMonth
                  | ExtractQuarter
                  | ExtractSecond
                  | ExtractTimezone
                  | ExtractTimezoneHour
                  | ExtractTimezoneMinute
                  | ExtractWeek
                  | ExtractYear
                    deriving (Show,Eq,Typeable,Data)

-- todo: this needs fixing, it is currently based on limited frame options
data FrameClause = FrameUnboundedPreceding
                 | FrameUnboundedFull
                 | FrameRowsUnboundedPreceding
                   deriving (Show,Eq,Typeable,Data)


data OdbcLiteralType = OLDate
                     | OLTime
                     | OLTimestamp
                       deriving (Show,Eq,Typeable,Data)
{-# LINE 700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data JoinType = Inner | LeftOuter| RightOuter | FullOuter | Cross
                deriving (Show,Eq,Typeable,Data)
data JoinHint = Loop | Hash | Merge
                deriving (Show,Eq,Typeable,Data)
data Natural = Natural | Unnatural
               deriving (Show,Eq,Typeable,Data)
{-# LINE 710 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

-- | 'default' valued select, use for creating select values
--
-- > makeSelect :: QueryExpr
-- > makeSelect = Select
-- >              {ann = emptyAnnotation
-- >              ,selDistinct = All
-- >              ,selSelectList = (SelectList emptyAnnotation [])
-- >              ,selTref = []
-- >              ,selWhere = Nothing
-- >              ,selGroupBy = []
-- >              ,selHaving = Nothing
-- >              ,selOrderBy = []
-- >              ,selLimit = Nothing
-- >              ,selOffset = Nothing
-- >              ,selOption = []}
--
-- On its own, it isn't valid syntax: to use it you have to replace
-- the select list at minimum
--
-- use something like this
--
-- > s = makeSelect {selSelectList = sl [se $ i "a"]
-- >                ,selTref = [tref "t"]}
-- >     where
-- >         a = emptyAnnotation
-- >         sl = SelectList a
-- >         se = SelExp a
-- >         i = Identifier a
-- >         tref t = Tref a (Name a [Nmc t])

makeSelect :: QueryExpr
makeSelect = Select
             {ann = emptyAnnotation
             ,selDistinct = All
             ,selSelectList = (SelectList emptyAnnotation [])
             ,selTref = []
             ,selWhere = Nothing
             ,selGroupBy = []
             ,selHaving = Nothing
             ,selOrderBy = []
             ,selLimit = Nothing
             ,selOffset = Nothing
             ,selOption = []}
{-# LINE 757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 895 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data CopyFromSource = CopyFilename String
                    | Stdin
                      deriving (Show,Eq,Typeable,Data)
data CopyToSource = CopyTable Name [NameComponent]
                  | CopyQuery QueryExpr
                    deriving (Show,Eq,Typeable,Data)

data CopyFromOption = CopyFromFormat String
                    | CopyFromDelimiter String
                    | CopyFromErrorLog String
                    | CopyFromErrorVerbosity Int
                    | CopyFromParsers String
                    | CopyFromDirectory
                    | CopyFromOffset Integer
                    | CopyFromLimit Integer
                    | CopyFromErrorThreshold Int
                    | CopyFromNewlineFormat String
                  deriving (Show,Eq,Typeable,Data)

data CopyToOption = CopyToFormat String
                  | CopyToDelimiter String
                  | CopyToErrorLog String
                  | CopyToErrorVerbosity Int
                  deriving (Show,Eq,Typeable,Data)

{-# LINE 786 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 973 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data TableOption =
       TableOptionStringVal [String] String
     | TableOptionNameVal [String] [Name]
     | TableOptionNumberVal [String] String
     | TableOptionKeywords [String]
       deriving (Show,Eq,Typeable,Data)

{-# LINE 797 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data TablePartitionDateTimeInterval = Year | Month | Day | Hour | Minute | Second | Millisecond
                                 deriving (Show,Eq,Typeable,Data)
{-# LINE 803 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1059 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data SetValue
    = SetStr Annotation String
    | SetId Annotation String
    | SetNum Annotation Double
      deriving (Show,Eq,Typeable,Data)


data TriggerWhen = TriggerBefore | TriggerAfter
                   deriving (Show,Eq,Typeable,Data)
data TriggerEvent = TInsert| TUpdate | TDelete | AntiTriggerEvent String
                    deriving (Show,Eq,Typeable,Data)
data TriggerFire = EachRow | EachStatement
                   deriving (Show,Eq,Typeable,Data)

data DropType = Table
              | Domain
              | View
              | Type
              | Database
              | User
              | Login
              | Schema
                deriving (Show,Eq,Typeable,Data)

data Cascade = Cascade | Restrict
               deriving (Show,Eq,Typeable,Data)



data IfExists = Require | IfExists
                deriving (Show,Eq,Typeable,Data)


data RestartIdentity = RestartIdentity | ContinueIdentity
                       deriving (Show,Eq,Typeable,Data)

{-# LINE 843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1102 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data Replace = Replace | NoReplace
               deriving (Show,Eq,Typeable,Data)

data Volatility = Volatile | Stable | Immutable
                  deriving (Show,Eq,Typeable,Data)

-- todo: fix the fn body to support to support other languages
-- just as as string for now
-- probably change Language to be a string also

data Language = Sql | Plpgsql
                deriving (Show,Eq,Typeable,Data)
{-# LINE 859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1141 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data RaiseType = RNotice | RException | RError
                 deriving (Show,Eq,Typeable,Data)

{-# LINE 866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1155 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

data QueryHint = QueryHintPartitionGroup | QueryHintColumnarHostGroup
                 deriving (Show,Eq,Typeable,Data)

{-# LINE 873 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}

{-# LINE 1261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.ag" #-}

-- TODO: move this somewhere better
-- | run canonicalizeTypeName on all the TypeName nodes in an ast
canonicalizeTypeNames :: Data a => a -> a
canonicalizeTypeNames =
   (transformBi $ \x ->
       case x of
         ScalarType s -> ScalarType $ canonicalizeTypeName s
         x' -> x')
   . (transformBi $ \x ->
       case x of
         SimpleTypeName a tn -> SimpleTypeName a (c tn)
         PrecTypeName a tn i -> PrecTypeName a (c tn) i
         Prec2TypeName a tn i i1 -> Prec2TypeName a (c tn) i i1
         x' -> x')
   where
     c (Name a [Nmc nc]) = Name a [Nmc $ T.unpack $ canonicalizeTypeName $ T.pack nc]
     c z = z

{-# LINE 895 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
-- AlterColumnAction -------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterColumnAction 
         originalTree         : AlterColumnAction 
   alternatives:
      alternative SetDataType:
         child ann            : Annotation 
         child typ            : TypeName 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative SetNotNull:
         child ann            : Annotation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropNotNull:
         child ann            : Annotation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative SetDefault:
         child ann            : Annotation 
         child def            : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropDefault:
         child ann            : Annotation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterColumnAction = SetDataType (Annotation) (TypeName)
                       | SetNotNull (Annotation)
                       | DropNotNull (Annotation)
                       | SetDefault (Annotation) (ScalarExpr)
                       | DropDefault (Annotation)
                       deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AlterColumnAction :: AlterColumnAction ->
                         T_AlterColumnAction
_sem_AlterColumnAction (SetDataType _ann _typ) =
    (_sem_AlterColumnAction_SetDataType (_sem_Annotation _ann) (_sem_TypeName _typ))
_sem_AlterColumnAction (SetNotNull _ann) =
    (_sem_AlterColumnAction_SetNotNull (_sem_Annotation _ann))
_sem_AlterColumnAction (DropNotNull _ann) =
    (_sem_AlterColumnAction_DropNotNull (_sem_Annotation _ann))
_sem_AlterColumnAction (SetDefault _ann _def) =
    (_sem_AlterColumnAction_SetDefault (_sem_Annotation _ann) (_sem_ScalarExpr _def))
_sem_AlterColumnAction (DropDefault _ann) =
    (_sem_AlterColumnAction_DropDefault (_sem_Annotation _ann))
-- semantic domain
type T_AlterColumnAction = Catalog ->
                           TypeCheckingFlags ->
                           (Maybe TypeExtra) ->
                           ( AlterColumnAction,AlterColumnAction)
data Inh_AlterColumnAction = Inh_AlterColumnAction {_cat_Inh_AlterColumnAction :: Catalog,_flags_Inh_AlterColumnAction :: TypeCheckingFlags,_imCast_Inh_AlterColumnAction :: (Maybe TypeExtra)}
data Syn_AlterColumnAction = Syn_AlterColumnAction {_annotatedTree_Syn_AlterColumnAction :: AlterColumnAction,_originalTree_Syn_AlterColumnAction :: AlterColumnAction}
_wrap_AlterColumnAction :: T_AlterColumnAction ->
                          Inh_AlterColumnAction ->
                          Syn_AlterColumnAction
_wrap_AlterColumnAction sem (Inh_AlterColumnAction _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterColumnAction _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterColumnAction_SetDataType :: T_Annotation ->
                                     T_TypeName ->
                                     T_AlterColumnAction
_sem_AlterColumnAction_SetDataType ann_ typ_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterColumnAction
              _lhsOoriginalTree :: AlterColumnAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 24, column 37)
              _annOtpe =
                  ({-# LINE 24 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 992 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetDataType _annIannotatedTree _typIannotatedTree
                   {-# LINE 998 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetDataType _annIoriginalTree _typIoriginalTree
                   {-# LINE 1004 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1010 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1016 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1022 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1028 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1034 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1040 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1046 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1052 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterColumnAction_SetNotNull :: T_Annotation ->
                                    T_AlterColumnAction
_sem_AlterColumnAction_SetNotNull ann_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterColumnAction
              _lhsOoriginalTree :: AlterColumnAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 29, column 36)
              _annOtpe =
                  ({-# LINE 29 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1077 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetNotNull _annIannotatedTree
                   {-# LINE 1083 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetNotNull _annIoriginalTree
                   {-# LINE 1089 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1095 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1101 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1107 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1113 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1119 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterColumnAction_DropNotNull :: T_Annotation ->
                                     T_AlterColumnAction
_sem_AlterColumnAction_DropNotNull ann_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterColumnAction
              _lhsOoriginalTree :: AlterColumnAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 23, column 37)
              _annOtpe =
                  ({-# LINE 23 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropNotNull _annIannotatedTree
                   {-# LINE 1148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropNotNull _annIoriginalTree
                   {-# LINE 1154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterColumnAction_SetDefault :: T_Annotation ->
                                    T_ScalarExpr ->
                                    T_AlterColumnAction
_sem_AlterColumnAction_SetDefault ann_ def_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _defOdownEnv :: Environment
              _defOexpectedCast :: Bool
              _defOexpectedType :: (Maybe TypeExtra)
              _defOodbcFunction :: Bool
              _defOassignmentCastContext :: Bool
              _lhsOannotatedTree :: AlterColumnAction
              _lhsOoriginalTree :: AlterColumnAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _defOcat :: Catalog
              _defOflags :: TypeCheckingFlags
              _defOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _defIannotatedTree :: ScalarExpr
              _defIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _defIoriginalTree :: ScalarExpr
              _defIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 25, column 36)
              _annOtpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 26, column 36)
              _defOdownEnv =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 1226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 27, column 36)
              _defOexpectedCast =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 1232 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 28, column 36)
              _defOexpectedType =
                  ({-# LINE 28 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 1238 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 137, column 18)
              _defOodbcFunction =
                  ({-# LINE 137 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 1244 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 811, column 36)
              _defOassignmentCastContext =
                  ({-# LINE 811 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 1250 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetDefault _annIannotatedTree _defIannotatedTree
                   {-# LINE 1256 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetDefault _annIoriginalTree _defIoriginalTree
                   {-# LINE 1262 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1268 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1274 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1280 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1286 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1292 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _defOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1298 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _defOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1304 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _defOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1310 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _defIannotatedTree,_defIcolExprs,_defIoriginalTree,_defIupType) =
                  def_ _defOassignmentCastContext _defOcat _defOdownEnv _defOexpectedCast _defOexpectedType _defOflags _defOimCast _defOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterColumnAction_DropDefault :: T_Annotation ->
                                     T_AlterColumnAction
_sem_AlterColumnAction_DropDefault ann_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterColumnAction
              _lhsOoriginalTree :: AlterColumnAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 22, column 37)
              _annOtpe =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1335 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropDefault _annIannotatedTree
                   {-# LINE 1341 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropDefault _annIoriginalTree
                   {-# LINE 1347 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1353 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1359 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1377 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterDatabaseOperation --------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterDatabaseOperation 
         originalTree         : AlterDatabaseOperation 
   alternatives:
      alternative RenameDatabase:
         child ann            : Annotation 
         child newName        : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterDatabaseOperation = RenameDatabase (Annotation) (Name)
                            deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AlterDatabaseOperation :: AlterDatabaseOperation ->
                              T_AlterDatabaseOperation
_sem_AlterDatabaseOperation (RenameDatabase _ann _newName) =
    (_sem_AlterDatabaseOperation_RenameDatabase (_sem_Annotation _ann) (_sem_Name _newName))
-- semantic domain
type T_AlterDatabaseOperation = Catalog ->
                                TypeCheckingFlags ->
                                (Maybe TypeExtra) ->
                                ( AlterDatabaseOperation,AlterDatabaseOperation)
data Inh_AlterDatabaseOperation = Inh_AlterDatabaseOperation {_cat_Inh_AlterDatabaseOperation :: Catalog,_flags_Inh_AlterDatabaseOperation :: TypeCheckingFlags,_imCast_Inh_AlterDatabaseOperation :: (Maybe TypeExtra)}
data Syn_AlterDatabaseOperation = Syn_AlterDatabaseOperation {_annotatedTree_Syn_AlterDatabaseOperation :: AlterDatabaseOperation,_originalTree_Syn_AlterDatabaseOperation :: AlterDatabaseOperation}
_wrap_AlterDatabaseOperation :: T_AlterDatabaseOperation ->
                               Inh_AlterDatabaseOperation ->
                               Syn_AlterDatabaseOperation
_wrap_AlterDatabaseOperation sem (Inh_AlterDatabaseOperation _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterDatabaseOperation _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterDatabaseOperation_RenameDatabase :: T_Annotation ->
                                             T_Name ->
                                             T_AlterDatabaseOperation
_sem_AlterDatabaseOperation_RenameDatabase ann_ newName_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _newNameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterDatabaseOperation
              _lhsOoriginalTree :: AlterDatabaseOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _newNameOcat :: Catalog
              _newNameOflags :: TypeCheckingFlags
              _newNameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _newNameIannotatedTree :: Name
              _newNameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 30, column 45)
              _annOtpe =
                  ({-# LINE 30 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1445 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 31, column 45)
              _newNameOtpe =
                  ({-# LINE 31 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1451 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RenameDatabase _annIannotatedTree _newNameIannotatedTree
                   {-# LINE 1457 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RenameDatabase _annIoriginalTree _newNameIoriginalTree
                   {-# LINE 1463 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1469 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1475 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1481 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1487 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1493 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1499 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1505 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1511 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _newNameIannotatedTree,_newNameIoriginalTree) =
                  newName_ _newNameOcat _newNameOflags _newNameOimCast _newNameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterSchemaOperation ----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterSchemaOperation 
         originalTree         : AlterSchemaOperation 
   alternatives:
      alternative AlterSchemaName:
         child ann            : Annotation 
         child newName        : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSchemaOwner:
         child ann            : Annotation 
         child newName        : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterSchemaOperation = AlterSchemaName (Annotation) (Name)
                          | AlterSchemaOwner (Annotation) (Name)
                          deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AlterSchemaOperation :: AlterSchemaOperation ->
                            T_AlterSchemaOperation
_sem_AlterSchemaOperation (AlterSchemaName _ann _newName) =
    (_sem_AlterSchemaOperation_AlterSchemaName (_sem_Annotation _ann) (_sem_Name _newName))
_sem_AlterSchemaOperation (AlterSchemaOwner _ann _newName) =
    (_sem_AlterSchemaOperation_AlterSchemaOwner (_sem_Annotation _ann) (_sem_Name _newName))
-- semantic domain
type T_AlterSchemaOperation = Catalog ->
                              TypeCheckingFlags ->
                              (Maybe TypeExtra) ->
                              ( AlterSchemaOperation,AlterSchemaOperation)
data Inh_AlterSchemaOperation = Inh_AlterSchemaOperation {_cat_Inh_AlterSchemaOperation :: Catalog,_flags_Inh_AlterSchemaOperation :: TypeCheckingFlags,_imCast_Inh_AlterSchemaOperation :: (Maybe TypeExtra)}
data Syn_AlterSchemaOperation = Syn_AlterSchemaOperation {_annotatedTree_Syn_AlterSchemaOperation :: AlterSchemaOperation,_originalTree_Syn_AlterSchemaOperation :: AlterSchemaOperation}
_wrap_AlterSchemaOperation :: T_AlterSchemaOperation ->
                             Inh_AlterSchemaOperation ->
                             Syn_AlterSchemaOperation
_wrap_AlterSchemaOperation sem (Inh_AlterSchemaOperation _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterSchemaOperation _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterSchemaOperation_AlterSchemaName :: T_Annotation ->
                                            T_Name ->
                                            T_AlterSchemaOperation
_sem_AlterSchemaOperation_AlterSchemaName ann_ newName_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSchemaOperation
              _lhsOoriginalTree :: AlterSchemaOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _newNameOcat :: Catalog
              _newNameOflags :: TypeCheckingFlags
              _newNameOimCast :: (Maybe TypeExtra)
              _newNameOtpe :: (Either [TypeError] TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _newNameIannotatedTree :: Name
              _newNameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 32, column 44)
              _annOtpe =
                  ({-# LINE 32 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1590 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSchemaName _annIannotatedTree _newNameIannotatedTree
                   {-# LINE 1596 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSchemaName _annIoriginalTree _newNameIoriginalTree
                   {-# LINE 1602 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1608 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1614 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1620 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1626 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1632 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1638 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1644 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1650 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (chain)
              _newNameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: AlterSchemaOperation.AlterSchemaName.newName.tpe"
                   {-# LINE 1656 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _newNameIannotatedTree,_newNameIoriginalTree) =
                  newName_ _newNameOcat _newNameOflags _newNameOimCast _newNameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterSchemaOperation_AlterSchemaOwner :: T_Annotation ->
                                             T_Name ->
                                             T_AlterSchemaOperation
_sem_AlterSchemaOperation_AlterSchemaOwner ann_ newName_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _newNameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSchemaOperation
              _lhsOoriginalTree :: AlterSchemaOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _newNameOcat :: Catalog
              _newNameOflags :: TypeCheckingFlags
              _newNameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _newNameIannotatedTree :: Name
              _newNameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 33, column 45)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 34, column 45)
              _newNameOtpe =
                  ({-# LINE 34 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSchemaOwner _annIannotatedTree _newNameIannotatedTree
                   {-# LINE 1700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSchemaOwner _annIoriginalTree _newNameIoriginalTree
                   {-# LINE 1706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1718 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1730 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1736 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1742 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1748 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1754 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _newNameIannotatedTree,_newNameIoriginalTree) =
                  newName_ _newNameOcat _newNameOflags _newNameOimCast _newNameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterSequenceAction -----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterSequenceAction 
         originalTree         : AlterSequenceAction 
   alternatives:
      alternative AlterSequenceIncrement:
         child ann            : Annotation 
         child incr           : {Integer}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSequenceMin:
         child ann            : Annotation 
         child min            : {Maybe Integer}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSequenceMax:
         child ann            : Annotation 
         child max            : {Maybe Integer}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSequenceStart:
         child ann            : Annotation 
         child start          : {Integer}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSequenceRestart:
         child ann            : Annotation 
         child restart        : {Maybe Integer}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSequenceCache:
         child ann            : Annotation 
         child cache          : {Integer}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterSequenceAction = AlterSequenceIncrement (Annotation) (Integer)
                         | AlterSequenceMin (Annotation) ((Maybe Integer))
                         | AlterSequenceMax (Annotation) ((Maybe Integer))
                         | AlterSequenceStart (Annotation) (Integer)
                         | AlterSequenceRestart (Annotation) ((Maybe Integer))
                         | AlterSequenceCache (Annotation) (Integer)
                         deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AlterSequenceAction :: AlterSequenceAction ->
                           T_AlterSequenceAction
_sem_AlterSequenceAction (AlterSequenceIncrement _ann _incr) =
    (_sem_AlterSequenceAction_AlterSequenceIncrement (_sem_Annotation _ann) _incr)
_sem_AlterSequenceAction (AlterSequenceMin _ann _min) =
    (_sem_AlterSequenceAction_AlterSequenceMin (_sem_Annotation _ann) _min)
_sem_AlterSequenceAction (AlterSequenceMax _ann _max) =
    (_sem_AlterSequenceAction_AlterSequenceMax (_sem_Annotation _ann) _max)
_sem_AlterSequenceAction (AlterSequenceStart _ann _start) =
    (_sem_AlterSequenceAction_AlterSequenceStart (_sem_Annotation _ann) _start)
_sem_AlterSequenceAction (AlterSequenceRestart _ann _restart) =
    (_sem_AlterSequenceAction_AlterSequenceRestart (_sem_Annotation _ann) _restart)
_sem_AlterSequenceAction (AlterSequenceCache _ann _cache) =
    (_sem_AlterSequenceAction_AlterSequenceCache (_sem_Annotation _ann) _cache)
-- semantic domain
type T_AlterSequenceAction = Catalog ->
                             TypeCheckingFlags ->
                             (Maybe TypeExtra) ->
                             ( AlterSequenceAction,AlterSequenceAction)
data Inh_AlterSequenceAction = Inh_AlterSequenceAction {_cat_Inh_AlterSequenceAction :: Catalog,_flags_Inh_AlterSequenceAction :: TypeCheckingFlags,_imCast_Inh_AlterSequenceAction :: (Maybe TypeExtra)}
data Syn_AlterSequenceAction = Syn_AlterSequenceAction {_annotatedTree_Syn_AlterSequenceAction :: AlterSequenceAction,_originalTree_Syn_AlterSequenceAction :: AlterSequenceAction}
_wrap_AlterSequenceAction :: T_AlterSequenceAction ->
                            Inh_AlterSequenceAction ->
                            Syn_AlterSequenceAction
_wrap_AlterSequenceAction sem (Inh_AlterSequenceAction _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterSequenceAction _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterSequenceAction_AlterSequenceIncrement :: T_Annotation ->
                                                  Integer ->
                                                  T_AlterSequenceAction
_sem_AlterSequenceAction_AlterSequenceIncrement ann_ incr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSequenceAction
              _lhsOoriginalTree :: AlterSequenceAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 35, column 50)
              _annOtpe =
                  ({-# LINE 35 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1863 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceIncrement _annIannotatedTree incr_
                   {-# LINE 1869 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceIncrement _annIoriginalTree incr_
                   {-# LINE 1875 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1887 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1893 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1899 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1905 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterSequenceAction_AlterSequenceMin :: T_Annotation ->
                                            (Maybe Integer) ->
                                            T_AlterSequenceAction
_sem_AlterSequenceAction_AlterSequenceMin ann_ min_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSequenceAction
              _lhsOoriginalTree :: AlterSequenceAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 36, column 44)
              _annOtpe =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1929 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceMin _annIannotatedTree min_
                   {-# LINE 1935 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceMin _annIoriginalTree min_
                   {-# LINE 1941 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 1947 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 1953 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 1959 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 1965 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 1971 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterSequenceAction_AlterSequenceMax :: T_Annotation ->
                                            (Maybe Integer) ->
                                            T_AlterSequenceAction
_sem_AlterSequenceAction_AlterSequenceMax ann_ max_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSequenceAction
              _lhsOoriginalTree :: AlterSequenceAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 37, column 44)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 1995 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceMax _annIannotatedTree max_
                   {-# LINE 2001 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceMax _annIoriginalTree max_
                   {-# LINE 2007 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2013 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2019 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2037 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterSequenceAction_AlterSequenceStart :: T_Annotation ->
                                              Integer ->
                                              T_AlterSequenceAction
_sem_AlterSequenceAction_AlterSequenceStart ann_ start_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSequenceAction
              _lhsOoriginalTree :: AlterSequenceAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 38, column 46)
              _annOtpe =
                  ({-# LINE 38 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2061 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceStart _annIannotatedTree start_
                   {-# LINE 2067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceStart _annIoriginalTree start_
                   {-# LINE 2073 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2079 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2085 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2091 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2097 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2103 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterSequenceAction_AlterSequenceRestart :: T_Annotation ->
                                                (Maybe Integer) ->
                                                T_AlterSequenceAction
_sem_AlterSequenceAction_AlterSequenceRestart ann_ restart_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSequenceAction
              _lhsOoriginalTree :: AlterSequenceAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 39, column 48)
              _annOtpe =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceRestart _annIannotatedTree restart_
                   {-# LINE 2133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceRestart _annIoriginalTree restart_
                   {-# LINE 2139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2145 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2151 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterSequenceAction_AlterSequenceCache :: T_Annotation ->
                                              Integer ->
                                              T_AlterSequenceAction
_sem_AlterSequenceAction_AlterSequenceCache ann_ cache_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSequenceAction
              _lhsOoriginalTree :: AlterSequenceAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 40, column 46)
              _annOtpe =
                  ({-# LINE 40 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceCache _annIannotatedTree cache_
                   {-# LINE 2199 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceCache _annIoriginalTree cache_
                   {-# LINE 2205 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2211 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2217 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2223 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2229 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2235 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterSequenceActionList -------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterSequenceActionList 
         originalTree         : AlterSequenceActionList 
   alternatives:
      alternative Cons:
         child hd             : AlterSequenceAction 
         child tl             : AlterSequenceActionList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type AlterSequenceActionList = [AlterSequenceAction]
-- cata
_sem_AlterSequenceActionList :: AlterSequenceActionList ->
                               T_AlterSequenceActionList
_sem_AlterSequenceActionList list =
    (Prelude.foldr _sem_AlterSequenceActionList_Cons _sem_AlterSequenceActionList_Nil (Prelude.map _sem_AlterSequenceAction list))
-- semantic domain
type T_AlterSequenceActionList = Catalog ->
                                 TypeCheckingFlags ->
                                 (Maybe TypeExtra) ->
                                 ( AlterSequenceActionList,AlterSequenceActionList)
data Inh_AlterSequenceActionList = Inh_AlterSequenceActionList {_cat_Inh_AlterSequenceActionList :: Catalog,_flags_Inh_AlterSequenceActionList :: TypeCheckingFlags,_imCast_Inh_AlterSequenceActionList :: (Maybe TypeExtra)}
data Syn_AlterSequenceActionList = Syn_AlterSequenceActionList {_annotatedTree_Syn_AlterSequenceActionList :: AlterSequenceActionList,_originalTree_Syn_AlterSequenceActionList :: AlterSequenceActionList}
_wrap_AlterSequenceActionList :: T_AlterSequenceActionList ->
                                Inh_AlterSequenceActionList ->
                                Syn_AlterSequenceActionList
_wrap_AlterSequenceActionList sem (Inh_AlterSequenceActionList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterSequenceActionList _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterSequenceActionList_Cons :: T_AlterSequenceAction ->
                                    T_AlterSequenceActionList ->
                                    T_AlterSequenceActionList
_sem_AlterSequenceActionList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AlterSequenceActionList
              _lhsOoriginalTree :: AlterSequenceActionList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: AlterSequenceAction
              _hdIoriginalTree :: AlterSequenceAction
              _tlIannotatedTree :: AlterSequenceActionList
              _tlIoriginalTree :: AlterSequenceActionList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 2304 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 2310 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2316 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2322 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2328 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2334 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2340 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2346 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterSequenceActionList_Nil :: T_AlterSequenceActionList
_sem_AlterSequenceActionList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AlterSequenceActionList
              _lhsOoriginalTree :: AlterSequenceActionList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 2376 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 2382 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2388 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2394 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterSequenceOperation --------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterSequenceOperation 
         originalTree         : AlterSequenceOperation 
   alternatives:
      alternative AlterSequenceOwned:
         child ann            : Annotation 
         child owned          : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSequenceRename:
         child ann            : Annotation 
         child name           : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSequenceActions:
         child ann            : Annotation 
         child actions        : AlterSequenceActionList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterSequenceOperation = AlterSequenceOwned (Annotation) (Name)
                            | AlterSequenceRename (Annotation) (Name)
                            | AlterSequenceActions (Annotation) (AlterSequenceActionList)
                            deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AlterSequenceOperation :: AlterSequenceOperation ->
                              T_AlterSequenceOperation
_sem_AlterSequenceOperation (AlterSequenceOwned _ann _owned) =
    (_sem_AlterSequenceOperation_AlterSequenceOwned (_sem_Annotation _ann) (_sem_Name _owned))
_sem_AlterSequenceOperation (AlterSequenceRename _ann _name) =
    (_sem_AlterSequenceOperation_AlterSequenceRename (_sem_Annotation _ann) (_sem_Name _name))
_sem_AlterSequenceOperation (AlterSequenceActions _ann _actions) =
    (_sem_AlterSequenceOperation_AlterSequenceActions (_sem_Annotation _ann) (_sem_AlterSequenceActionList _actions))
-- semantic domain
type T_AlterSequenceOperation = Catalog ->
                                TypeCheckingFlags ->
                                (Maybe TypeExtra) ->
                                ( AlterSequenceOperation,AlterSequenceOperation)
data Inh_AlterSequenceOperation = Inh_AlterSequenceOperation {_cat_Inh_AlterSequenceOperation :: Catalog,_flags_Inh_AlterSequenceOperation :: TypeCheckingFlags,_imCast_Inh_AlterSequenceOperation :: (Maybe TypeExtra)}
data Syn_AlterSequenceOperation = Syn_AlterSequenceOperation {_annotatedTree_Syn_AlterSequenceOperation :: AlterSequenceOperation,_originalTree_Syn_AlterSequenceOperation :: AlterSequenceOperation}
_wrap_AlterSequenceOperation :: T_AlterSequenceOperation ->
                               Inh_AlterSequenceOperation ->
                               Syn_AlterSequenceOperation
_wrap_AlterSequenceOperation sem (Inh_AlterSequenceOperation _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterSequenceOperation _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterSequenceOperation_AlterSequenceOwned :: T_Annotation ->
                                                 T_Name ->
                                                 T_AlterSequenceOperation
_sem_AlterSequenceOperation_AlterSequenceOwned ann_ owned_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _ownedOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSequenceOperation
              _lhsOoriginalTree :: AlterSequenceOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _ownedOcat :: Catalog
              _ownedOflags :: TypeCheckingFlags
              _ownedOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _ownedIannotatedTree :: Name
              _ownedIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 41, column 49)
              _annOtpe =
                  ({-# LINE 41 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2478 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 42, column 49)
              _ownedOtpe =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2484 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceOwned _annIannotatedTree _ownedIannotatedTree
                   {-# LINE 2490 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceOwned _annIoriginalTree _ownedIoriginalTree
                   {-# LINE 2496 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2502 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2508 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2514 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2520 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2526 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _ownedOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2532 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _ownedOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _ownedOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2544 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _ownedIannotatedTree,_ownedIoriginalTree) =
                  owned_ _ownedOcat _ownedOflags _ownedOimCast _ownedOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterSequenceOperation_AlterSequenceRename :: T_Annotation ->
                                                  T_Name ->
                                                  T_AlterSequenceOperation
_sem_AlterSequenceOperation_AlterSequenceRename ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSequenceOperation
              _lhsOoriginalTree :: AlterSequenceOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 43, column 50)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 44, column 50)
              _nameOtpe =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceRename _annIannotatedTree _nameIannotatedTree
                   {-# LINE 2588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceRename _annIoriginalTree _nameIoriginalTree
                   {-# LINE 2594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2606 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2612 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2618 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2624 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2630 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2636 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2642 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterSequenceOperation_AlterSequenceActions :: T_Annotation ->
                                                   T_AlterSequenceActionList ->
                                                   T_AlterSequenceOperation
_sem_AlterSequenceOperation_AlterSequenceActions ann_ actions_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterSequenceOperation
              _lhsOoriginalTree :: AlterSequenceOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _actionsOcat :: Catalog
              _actionsOflags :: TypeCheckingFlags
              _actionsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _actionsIannotatedTree :: AlterSequenceActionList
              _actionsIoriginalTree :: AlterSequenceActionList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 45, column 51)
              _annOtpe =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2673 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceActions _annIannotatedTree _actionsIannotatedTree
                   {-# LINE 2679 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequenceActions _annIoriginalTree _actionsIoriginalTree
                   {-# LINE 2685 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actionsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2721 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actionsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actionsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _actionsIannotatedTree,_actionsIoriginalTree) =
                  actions_ _actionsOcat _actionsOflags _actionsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterTableAction --------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterTableAction 
         originalTree         : AlterTableAction 
   alternatives:
      alternative AddColumn:
         child ann            : Annotation 
         child att            : AttributeDef 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropColumn:
         child ann            : Annotation 
         child nm             : {NameComponent}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterColumn:
         child ann            : Annotation 
         child nm             : {NameComponent}
         child act            : AlterColumnAction 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AddConstraint:
         child ann            : Annotation 
         child con            : Constraint 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterTableAction = AddColumn (Annotation) (AttributeDef)
                      | DropColumn (Annotation) (NameComponent)
                      | AlterColumn (Annotation) (NameComponent) (AlterColumnAction)
                      | AddConstraint (Annotation) (Constraint)
                      deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AlterTableAction :: AlterTableAction ->
                        T_AlterTableAction
_sem_AlterTableAction (AddColumn _ann _att) =
    (_sem_AlterTableAction_AddColumn (_sem_Annotation _ann) (_sem_AttributeDef _att))
_sem_AlterTableAction (DropColumn _ann _nm) =
    (_sem_AlterTableAction_DropColumn (_sem_Annotation _ann) _nm)
_sem_AlterTableAction (AlterColumn _ann _nm _act) =
    (_sem_AlterTableAction_AlterColumn (_sem_Annotation _ann) _nm (_sem_AlterColumnAction _act))
_sem_AlterTableAction (AddConstraint _ann _con) =
    (_sem_AlterTableAction_AddConstraint (_sem_Annotation _ann) (_sem_Constraint _con))
-- semantic domain
type T_AlterTableAction = Catalog ->
                          TypeCheckingFlags ->
                          (Maybe TypeExtra) ->
                          ( AlterTableAction,AlterTableAction)
data Inh_AlterTableAction = Inh_AlterTableAction {_cat_Inh_AlterTableAction :: Catalog,_flags_Inh_AlterTableAction :: TypeCheckingFlags,_imCast_Inh_AlterTableAction :: (Maybe TypeExtra)}
data Syn_AlterTableAction = Syn_AlterTableAction {_annotatedTree_Syn_AlterTableAction :: AlterTableAction,_originalTree_Syn_AlterTableAction :: AlterTableAction}
_wrap_AlterTableAction :: T_AlterTableAction ->
                         Inh_AlterTableAction ->
                         Syn_AlterTableAction
_wrap_AlterTableAction sem (Inh_AlterTableAction _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterTableAction _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterTableAction_AddColumn :: T_Annotation ->
                                  T_AttributeDef ->
                                  T_AlterTableAction
_sem_AlterTableAction_AddColumn ann_ att_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableAction
              _lhsOoriginalTree :: AlterTableAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _attOcat :: Catalog
              _attOflags :: TypeCheckingFlags
              _attOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _attIannotatedTree :: AttributeDef
              _attIoriginalTree :: AttributeDef
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 46, column 34)
              _annOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2830 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AddColumn _annIannotatedTree _attIannotatedTree
                   {-# LINE 2836 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AddColumn _annIoriginalTree _attIoriginalTree
                   {-# LINE 2842 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2848 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2890 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _attIannotatedTree,_attIoriginalTree) =
                  att_ _attOcat _attOflags _attOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterTableAction_DropColumn :: T_Annotation ->
                                   NameComponent ->
                                   T_AlterTableAction
_sem_AlterTableAction_DropColumn ann_ nm_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableAction
              _lhsOoriginalTree :: AlterTableAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 49, column 35)
              _annOtpe =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropColumn _annIannotatedTree nm_
                   {-# LINE 2922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropColumn _annIoriginalTree nm_
                   {-# LINE 2928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 2934 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 2940 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 2946 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 2952 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 2958 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterTableAction_AlterColumn :: T_Annotation ->
                                    NameComponent ->
                                    T_AlterColumnAction ->
                                    T_AlterTableAction
_sem_AlterTableAction_AlterColumn ann_ nm_ act_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableAction
              _lhsOoriginalTree :: AlterTableAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _actOcat :: Catalog
              _actOflags :: TypeCheckingFlags
              _actOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _actIannotatedTree :: AlterColumnAction
              _actIoriginalTree :: AlterColumnAction
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 48, column 36)
              _annOtpe =
                  ({-# LINE 48 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 2988 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterColumn _annIannotatedTree nm_ _actIannotatedTree
                   {-# LINE 2994 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterColumn _annIoriginalTree nm_ _actIoriginalTree
                   {-# LINE 3000 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3018 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3024 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3030 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3036 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3042 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3048 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _actIannotatedTree,_actIoriginalTree) =
                  act_ _actOcat _actOflags _actOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterTableAction_AddConstraint :: T_Annotation ->
                                      T_Constraint ->
                                      T_AlterTableAction
_sem_AlterTableAction_AddConstraint ann_ con_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableAction
              _lhsOoriginalTree :: AlterTableAction
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _conOcat :: Catalog
              _conOflags :: TypeCheckingFlags
              _conOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _conIannotatedTree :: Constraint
              _conIoriginalTree :: Constraint
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 47, column 38)
              _annOtpe =
                  ({-# LINE 47 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 3079 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AddConstraint _annIannotatedTree _conIannotatedTree
                   {-# LINE 3085 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AddConstraint _annIoriginalTree _conIoriginalTree
                   {-# LINE 3091 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3097 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3103 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3109 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3115 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _conOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _conOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _conOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _conIannotatedTree,_conIoriginalTree) =
                  con_ _conOcat _conOflags _conOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterTableActionList ----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterTableActionList 
         originalTree         : AlterTableActionList 
   alternatives:
      alternative Cons:
         child hd             : AlterTableAction 
         child tl             : AlterTableActionList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type AlterTableActionList = [AlterTableAction]
-- cata
_sem_AlterTableActionList :: AlterTableActionList ->
                            T_AlterTableActionList
_sem_AlterTableActionList list =
    (Prelude.foldr _sem_AlterTableActionList_Cons _sem_AlterTableActionList_Nil (Prelude.map _sem_AlterTableAction list))
-- semantic domain
type T_AlterTableActionList = Catalog ->
                              TypeCheckingFlags ->
                              (Maybe TypeExtra) ->
                              ( AlterTableActionList,AlterTableActionList)
data Inh_AlterTableActionList = Inh_AlterTableActionList {_cat_Inh_AlterTableActionList :: Catalog,_flags_Inh_AlterTableActionList :: TypeCheckingFlags,_imCast_Inh_AlterTableActionList :: (Maybe TypeExtra)}
data Syn_AlterTableActionList = Syn_AlterTableActionList {_annotatedTree_Syn_AlterTableActionList :: AlterTableActionList,_originalTree_Syn_AlterTableActionList :: AlterTableActionList}
_wrap_AlterTableActionList :: T_AlterTableActionList ->
                             Inh_AlterTableActionList ->
                             Syn_AlterTableActionList
_wrap_AlterTableActionList sem (Inh_AlterTableActionList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterTableActionList _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterTableActionList_Cons :: T_AlterTableAction ->
                                 T_AlterTableActionList ->
                                 T_AlterTableActionList
_sem_AlterTableActionList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AlterTableActionList
              _lhsOoriginalTree :: AlterTableActionList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: AlterTableAction
              _hdIoriginalTree :: AlterTableAction
              _tlIannotatedTree :: AlterTableActionList
              _tlIoriginalTree :: AlterTableActionList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 3210 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 3216 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3222 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3264 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterTableActionList_Nil :: T_AlterTableActionList
_sem_AlterTableActionList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AlterTableActionList
              _lhsOoriginalTree :: AlterTableActionList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 3282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 3288 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3294 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AlterTableOperation -----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AlterTableOperation 
         originalTree         : AlterTableOperation 
   alternatives:
      alternative RenameTable:
         child ann            : Annotation 
         child newName        : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RenameColumn:
         child ann            : Annotation 
         child oldName        : {NameComponent}
         child newName        : {NameComponent}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterTableActions:
         child ann            : Annotation 
         child actions        : AlterTableActionList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AlterTableOperation = RenameTable (Annotation) (Name)
                         | RenameColumn (Annotation) (NameComponent) (NameComponent)
                         | AlterTableActions (Annotation) (AlterTableActionList)
                         deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AlterTableOperation :: AlterTableOperation ->
                           T_AlterTableOperation
_sem_AlterTableOperation (RenameTable _ann _newName) =
    (_sem_AlterTableOperation_RenameTable (_sem_Annotation _ann) (_sem_Name _newName))
_sem_AlterTableOperation (RenameColumn _ann _oldName _newName) =
    (_sem_AlterTableOperation_RenameColumn (_sem_Annotation _ann) _oldName _newName)
_sem_AlterTableOperation (AlterTableActions _ann _actions) =
    (_sem_AlterTableOperation_AlterTableActions (_sem_Annotation _ann) (_sem_AlterTableActionList _actions))
-- semantic domain
type T_AlterTableOperation = Catalog ->
                             TypeCheckingFlags ->
                             (Maybe TypeExtra) ->
                             ( AlterTableOperation,AlterTableOperation)
data Inh_AlterTableOperation = Inh_AlterTableOperation {_cat_Inh_AlterTableOperation :: Catalog,_flags_Inh_AlterTableOperation :: TypeCheckingFlags,_imCast_Inh_AlterTableOperation :: (Maybe TypeExtra)}
data Syn_AlterTableOperation = Syn_AlterTableOperation {_annotatedTree_Syn_AlterTableOperation :: AlterTableOperation,_originalTree_Syn_AlterTableOperation :: AlterTableOperation}
_wrap_AlterTableOperation :: T_AlterTableOperation ->
                            Inh_AlterTableOperation ->
                            Syn_AlterTableOperation
_wrap_AlterTableOperation sem (Inh_AlterTableOperation _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AlterTableOperation _lhsOannotatedTree _lhsOoriginalTree))
_sem_AlterTableOperation_RenameTable :: T_Annotation ->
                                       T_Name ->
                                       T_AlterTableOperation
_sem_AlterTableOperation_RenameTable ann_ newName_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _newNameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableOperation
              _lhsOoriginalTree :: AlterTableOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _newNameOcat :: Catalog
              _newNameOflags :: TypeCheckingFlags
              _newNameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _newNameIannotatedTree :: Name
              _newNameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 52, column 39)
              _annOtpe =
                  ({-# LINE 52 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 3385 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 53, column 39)
              _newNameOtpe =
                  ({-# LINE 53 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 3391 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RenameTable _annIannotatedTree _newNameIannotatedTree
                   {-# LINE 3397 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RenameTable _annIoriginalTree _newNameIoriginalTree
                   {-# LINE 3403 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3409 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3415 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3421 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3427 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3433 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3439 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3445 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _newNameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3451 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _newNameIannotatedTree,_newNameIoriginalTree) =
                  newName_ _newNameOcat _newNameOflags _newNameOimCast _newNameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterTableOperation_RenameColumn :: T_Annotation ->
                                        NameComponent ->
                                        NameComponent ->
                                        T_AlterTableOperation
_sem_AlterTableOperation_RenameColumn ann_ oldName_ newName_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableOperation
              _lhsOoriginalTree :: AlterTableOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 51, column 40)
              _annOtpe =
                  ({-# LINE 51 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 3478 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RenameColumn _annIannotatedTree oldName_ newName_
                   {-# LINE 3484 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RenameColumn _annIoriginalTree oldName_ newName_
                   {-# LINE 3490 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3496 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3502 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3508 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3514 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3520 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AlterTableOperation_AlterTableActions :: T_Annotation ->
                                             T_AlterTableActionList ->
                                             T_AlterTableOperation
_sem_AlterTableOperation_AlterTableActions ann_ actions_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: AlterTableOperation
              _lhsOoriginalTree :: AlterTableOperation
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _actionsOcat :: Catalog
              _actionsOflags :: TypeCheckingFlags
              _actionsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _actionsIannotatedTree :: AlterTableActionList
              _actionsIoriginalTree :: AlterTableActionList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 50, column 45)
              _annOtpe =
                  ({-# LINE 50 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 3549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterTableActions _annIannotatedTree _actionsIannotatedTree
                   {-# LINE 3555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterTableActions _annIoriginalTree _actionsIoriginalTree
                   {-# LINE 3561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3591 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actionsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actionsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _actionsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _actionsIannotatedTree,_actionsIoriginalTree) =
                  actions_ _actionsOcat _actionsOflags _actionsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- Annotation --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
         tpe                  : Either [TypeError] TypeExtra
      synthesized attributes:
         annotatedTree        : Annotation 
         originalTree         : Annotation 
   alternatives:
      alternative Annotation:
         child anSrc          : {Maybe SourcePosition}
         child anType         : {Maybe T.TypeExtra}
         child anErrs         : {[T.TypeError]}
         child anImplicitCast : {Maybe T.TypeExtra}
         child anCatUpd       : {[C.CatalogUpdate]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}

-- | Annotation type - one of these is attached to most of the
-- data types used in the ast.
-- the fields in order are:
data Annotation = Annotation {
                             -- | source position for this node
                             anSrc :: ( Maybe SourcePosition)
                             -- | type of the node, 'Nothing' if the tree hasn't been typechecked or if a type error elsewhere prevents determining this node's type
                             ,anType :: ( Maybe T.TypeExtra)
                             -- | any type errors
                             ,anErrs :: ( [T.TypeError])
                             -- | if an implicit cast is needed between this node an its parent, this the target type of cast. If no implicit cast is needed, this is Nothing
                             ,anImplicitCast :: ( Maybe T.TypeExtra)
                             -- | any catalog updates that a statement produces, used only for ddl Statements
                             ,anCatUpd :: ( [C.CatalogUpdate])

    } deriving (Eq,Show,Data,Typeable)

-- cata
_sem_Annotation :: Annotation ->
                  T_Annotation
_sem_Annotation (Annotation _anSrc _anType _anErrs _anImplicitCast _anCatUpd) =
    (_sem_Annotation_Annotation _anSrc _anType _anErrs _anImplicitCast _anCatUpd)
-- semantic domain
type T_Annotation = Catalog ->
                    TypeCheckingFlags ->
                    (Maybe TypeExtra) ->
                    (Either [TypeError] TypeExtra) ->
                    ( Annotation,Annotation)
data Inh_Annotation = Inh_Annotation {_cat_Inh_Annotation :: Catalog,_flags_Inh_Annotation :: TypeCheckingFlags,_imCast_Inh_Annotation :: (Maybe TypeExtra),_tpe_Inh_Annotation :: (Either [TypeError] TypeExtra)}
data Syn_Annotation = Syn_Annotation {_annotatedTree_Syn_Annotation :: Annotation,_originalTree_Syn_Annotation :: Annotation}
_wrap_Annotation :: T_Annotation ->
                   Inh_Annotation ->
                   Syn_Annotation
_wrap_Annotation sem (Inh_Annotation _lhsIcat _lhsIflags _lhsIimCast _lhsItpe) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast _lhsItpe
     in  (Syn_Annotation _lhsOannotatedTree _lhsOoriginalTree))
_sem_Annotation_Annotation :: (Maybe SourcePosition) ->
                             (Maybe T.TypeExtra) ->
                             ([T.TypeError]) ->
                             (Maybe T.TypeExtra) ->
                             ([C.CatalogUpdate]) ->
                             T_Annotation
_sem_Annotation_Annotation anSrc_ anType_ anErrs_ anImplicitCast_ anCatUpd_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsItpe ->
         (let _lhsOannotatedTree :: Annotation
              _lhsOoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag"(line 143, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 143 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   let t = either (const Nothing) Just _lhsItpe
                       es = either id (const []) _lhsItpe
                   in Annotation anSrc_ t es _lhsIimCast anCatUpd_
                   {-# LINE 3678 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Annotation anSrc_ anType_ anErrs_ anImplicitCast_ anCatUpd_
                   {-# LINE 3684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Annotation anSrc_ anType_ anErrs_ anImplicitCast_ anCatUpd_
                   {-# LINE 3690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AttributeDef ------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AttributeDef 
         originalTree         : AttributeDef 
   alternatives:
      alternative AttributeDef:
         child ann            : Annotation 
         child name           : {NameComponent}
         child typ            : TypeName 
         child def            : MaybeScalarExpr 
         child cons           : RowConstraintList 
         child options        : {[TableOption]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data AttributeDef = AttributeDef (Annotation) (NameComponent) (TypeName) (MaybeScalarExpr) (RowConstraintList) (([TableOption]))
                  deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_AttributeDef :: AttributeDef ->
                    T_AttributeDef
_sem_AttributeDef (AttributeDef _ann _name _typ _def _cons _options) =
    (_sem_AttributeDef_AttributeDef (_sem_Annotation _ann) _name (_sem_TypeName _typ) (_sem_MaybeScalarExpr _def) (_sem_RowConstraintList _cons) _options)
-- semantic domain
type T_AttributeDef = Catalog ->
                      TypeCheckingFlags ->
                      (Maybe TypeExtra) ->
                      ( AttributeDef,AttributeDef)
data Inh_AttributeDef = Inh_AttributeDef {_cat_Inh_AttributeDef :: Catalog,_flags_Inh_AttributeDef :: TypeCheckingFlags,_imCast_Inh_AttributeDef :: (Maybe TypeExtra)}
data Syn_AttributeDef = Syn_AttributeDef {_annotatedTree_Syn_AttributeDef :: AttributeDef,_originalTree_Syn_AttributeDef :: AttributeDef}
_wrap_AttributeDef :: T_AttributeDef ->
                     Inh_AttributeDef ->
                     Syn_AttributeDef
_wrap_AttributeDef sem (Inh_AttributeDef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AttributeDef _lhsOannotatedTree _lhsOoriginalTree))
_sem_AttributeDef_AttributeDef :: T_Annotation ->
                                 NameComponent ->
                                 T_TypeName ->
                                 T_MaybeScalarExpr ->
                                 T_RowConstraintList ->
                                 ([TableOption]) ->
                                 T_AttributeDef
_sem_AttributeDef_AttributeDef ann_ name_ typ_ def_ cons_ options_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _defOdownEnv :: Environment
              _defOexpectedCast :: Bool
              _defOexpectedType :: (Maybe TypeExtra)
              _defOassignmentCastContext :: Bool
              _lhsOannotatedTree :: AttributeDef
              _lhsOoriginalTree :: AttributeDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe TypeExtra)
              _defOcat :: Catalog
              _defOflags :: TypeCheckingFlags
              _defOimCast :: (Maybe TypeExtra)
              _consOcat :: Catalog
              _consOflags :: TypeCheckingFlags
              _consOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              _defIannotatedTree :: MaybeScalarExpr
              _defIoriginalTree :: MaybeScalarExpr
              _defIupType :: (Maybe TypeExtra)
              _consIannotatedTree :: RowConstraintList
              _consIoriginalTree :: RowConstraintList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 54, column 33)
              _annOtpe =
                  ({-# LINE 54 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 3785 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 55, column 33)
              _defOdownEnv =
                  ({-# LINE 55 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 3791 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 56, column 33)
              _defOexpectedCast =
                  ({-# LINE 56 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 3797 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 57, column 33)
              _defOexpectedType =
                  ({-# LINE 57 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 3803 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 812, column 33)
              _defOassignmentCastContext =
                  ({-# LINE 812 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 3809 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AttributeDef _annIannotatedTree name_ _typIannotatedTree _defIannotatedTree _consIannotatedTree options_
                   {-# LINE 3815 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AttributeDef _annIoriginalTree name_ _typIoriginalTree _defIoriginalTree _consIoriginalTree options_
                   {-# LINE 3821 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3827 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3833 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3839 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3845 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3851 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3857 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3863 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3869 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _defOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3875 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _defOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _defOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3887 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _consOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 3893 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _consOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 3899 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _consOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 3905 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
              ( _defIannotatedTree,_defIoriginalTree,_defIupType) =
                  def_ _defOassignmentCastContext _defOcat _defOdownEnv _defOexpectedCast _defOexpectedType _defOflags _defOimCast
              ( _consIannotatedTree,_consIoriginalTree) =
                  cons_ _consOcat _consOflags _consOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- AttributeDefList --------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : AttributeDefList 
         originalTree         : AttributeDefList 
   alternatives:
      alternative Cons:
         child hd             : AttributeDef 
         child tl             : AttributeDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type AttributeDefList = [AttributeDef]
-- cata
_sem_AttributeDefList :: AttributeDefList ->
                        T_AttributeDefList
_sem_AttributeDefList list =
    (Prelude.foldr _sem_AttributeDefList_Cons _sem_AttributeDefList_Nil (Prelude.map _sem_AttributeDef list))
-- semantic domain
type T_AttributeDefList = Catalog ->
                          TypeCheckingFlags ->
                          (Maybe TypeExtra) ->
                          ( AttributeDefList,AttributeDefList)
data Inh_AttributeDefList = Inh_AttributeDefList {_cat_Inh_AttributeDefList :: Catalog,_flags_Inh_AttributeDefList :: TypeCheckingFlags,_imCast_Inh_AttributeDefList :: (Maybe TypeExtra)}
data Syn_AttributeDefList = Syn_AttributeDefList {_annotatedTree_Syn_AttributeDefList :: AttributeDefList,_originalTree_Syn_AttributeDefList :: AttributeDefList}
_wrap_AttributeDefList :: T_AttributeDefList ->
                         Inh_AttributeDefList ->
                         Syn_AttributeDefList
_wrap_AttributeDefList sem (Inh_AttributeDefList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_AttributeDefList _lhsOannotatedTree _lhsOoriginalTree))
_sem_AttributeDefList_Cons :: T_AttributeDef ->
                             T_AttributeDefList ->
                             T_AttributeDefList
_sem_AttributeDefList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AttributeDefList
              _lhsOoriginalTree :: AttributeDefList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: AttributeDef
              _hdIoriginalTree :: AttributeDef
              _tlIannotatedTree :: AttributeDefList
              _tlIoriginalTree :: AttributeDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 3980 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 3986 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 3992 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 3998 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4004 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4010 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4016 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4022 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4028 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4034 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_AttributeDefList_Nil :: T_AttributeDefList
_sem_AttributeDefList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: AttributeDefList
              _lhsOoriginalTree :: AttributeDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 4052 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 4058 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4064 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4070 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- CaseScalarExprListScalarExprPair ----------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
         thenExpectedType     : Maybe TypeExtra
         whenExpectedType     : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : CaseScalarExprListScalarExprPair 
         originalTree         : CaseScalarExprListScalarExprPair 
         thenType             : Maybe TypeExtra
         upTypes              : [Maybe TypeExtra]
         whenTypes            : [Maybe TypeExtra]
   alternatives:
      alternative Tuple:
         child x1             : ScalarExprList 
         child x2             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type CaseScalarExprListScalarExprPair = ( ScalarExprList,ScalarExpr)
-- cata
_sem_CaseScalarExprListScalarExprPair :: CaseScalarExprListScalarExprPair ->
                                        T_CaseScalarExprListScalarExprPair
_sem_CaseScalarExprListScalarExprPair ( x1,x2) =
    (_sem_CaseScalarExprListScalarExprPair_Tuple (_sem_ScalarExprList x1) (_sem_ScalarExpr x2))
-- semantic domain
type T_CaseScalarExprListScalarExprPair = Catalog ->
                                          Environment ->
                                          TypeCheckingFlags ->
                                          (Maybe TypeExtra) ->
                                          (Maybe TypeExtra) ->
                                          (Maybe TypeExtra) ->
                                          ( CaseScalarExprListScalarExprPair,CaseScalarExprListScalarExprPair,(Maybe TypeExtra),([Maybe TypeExtra]),([Maybe TypeExtra]))
data Inh_CaseScalarExprListScalarExprPair = Inh_CaseScalarExprListScalarExprPair {_cat_Inh_CaseScalarExprListScalarExprPair :: Catalog,_downEnv_Inh_CaseScalarExprListScalarExprPair :: Environment,_flags_Inh_CaseScalarExprListScalarExprPair :: TypeCheckingFlags,_imCast_Inh_CaseScalarExprListScalarExprPair :: (Maybe TypeExtra),_thenExpectedType_Inh_CaseScalarExprListScalarExprPair :: (Maybe TypeExtra),_whenExpectedType_Inh_CaseScalarExprListScalarExprPair :: (Maybe TypeExtra)}
data Syn_CaseScalarExprListScalarExprPair = Syn_CaseScalarExprListScalarExprPair {_annotatedTree_Syn_CaseScalarExprListScalarExprPair :: CaseScalarExprListScalarExprPair,_originalTree_Syn_CaseScalarExprListScalarExprPair :: CaseScalarExprListScalarExprPair,_thenType_Syn_CaseScalarExprListScalarExprPair :: (Maybe TypeExtra),_upTypes_Syn_CaseScalarExprListScalarExprPair :: ([Maybe TypeExtra]),_whenTypes_Syn_CaseScalarExprListScalarExprPair :: ([Maybe TypeExtra])}
_wrap_CaseScalarExprListScalarExprPair :: T_CaseScalarExprListScalarExprPair ->
                                         Inh_CaseScalarExprListScalarExprPair ->
                                         Syn_CaseScalarExprListScalarExprPair
_wrap_CaseScalarExprListScalarExprPair sem (Inh_CaseScalarExprListScalarExprPair _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast _lhsIthenExpectedType _lhsIwhenExpectedType) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenType,_lhsOupTypes,_lhsOwhenTypes) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast _lhsIthenExpectedType _lhsIwhenExpectedType
     in  (Syn_CaseScalarExprListScalarExprPair _lhsOannotatedTree _lhsOoriginalTree _lhsOthenType _lhsOupTypes _lhsOwhenTypes))
_sem_CaseScalarExprListScalarExprPair_Tuple :: T_ScalarExprList ->
                                              T_ScalarExpr ->
                                              T_CaseScalarExprListScalarExprPair
_sem_CaseScalarExprListScalarExprPair_Tuple x1_ x2_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast
       _lhsIthenExpectedType
       _lhsIwhenExpectedType ->
         (let _x2OodbcFunction :: Bool
              _lhsOwhenTypes :: ([Maybe TypeExtra])
              _lhsOthenType :: (Maybe TypeExtra)
              _x1OexpectedTypes :: ([TypeExtra])
              _x1OexpectedCast :: Bool
              _x2OexpectedType :: (Maybe TypeExtra)
              _x2OexpectedCast :: Bool
              _x1OassignmentCastContext :: Bool
              _x2OassignmentCastContext :: Bool
              _lhsOannotatedTree :: CaseScalarExprListScalarExprPair
              _lhsOoriginalTree :: CaseScalarExprListScalarExprPair
              _lhsOupTypes :: ([Maybe TypeExtra])
              _x1Ocat :: Catalog
              _x1OdownEnv :: Environment
              _x1Oflags :: TypeCheckingFlags
              _x1OimCast :: (Maybe TypeExtra)
              _x2Ocat :: Catalog
              _x2OdownEnv :: Environment
              _x2Oflags :: TypeCheckingFlags
              _x2OimCast :: (Maybe TypeExtra)
              _x1IannotatedTree :: ScalarExprList
              _x1IoriginalTree :: ScalarExprList
              _x1IupTypes :: ([Maybe TypeExtra])
              _x2IannotatedTree :: ScalarExpr
              _x2IcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _x2IoriginalTree :: ScalarExpr
              _x2IupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 140, column 13)
              _x2OodbcFunction =
                  ({-# LINE 140 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 559, column 13)
              _lhsOwhenTypes =
                  ({-# LINE 559 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _x1IupTypes
                   {-# LINE 4166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 560, column 13)
              _lhsOthenType =
                  ({-# LINE 560 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _x2IupType
                   {-# LINE 4172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 613, column 11)
              _x1OexpectedTypes =
                  ({-# LINE 613 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe [] repeat _lhsIwhenExpectedType
                   {-# LINE 4178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 614, column 11)
              _x1OexpectedCast =
                  ({-# LINE 614 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 615, column 11)
              _x2OexpectedType =
                  ({-# LINE 615 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIthenExpectedType
                   {-# LINE 4190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 616, column 11)
              _x2OexpectedCast =
                  ({-# LINE 616 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   True
                   {-# LINE 4196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 813, column 46)
              _x1OassignmentCastContext =
                  ({-# LINE 813 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 814, column 46)
              _x2OassignmentCastContext =
                  ({-# LINE 814 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,_x2IannotatedTree)
                   {-# LINE 4214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,_x2IoriginalTree)
                   {-# LINE 4220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4232 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOupTypes =
                  ({-# LINE 564 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _x1IupTypes
                   {-# LINE 4238 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4244 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OdownEnv =
                  ({-# LINE 195 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 4250 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4256 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4262 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4268 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2OdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 4274 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4280 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4286 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _x1IannotatedTree,_x1IoriginalTree,_x1IupTypes) =
                  x1_ _x1OassignmentCastContext _x1Ocat _x1OdownEnv _x1OexpectedCast _x1OexpectedTypes _x1Oflags _x1OimCast
              ( _x2IannotatedTree,_x2IcolExprs,_x2IoriginalTree,_x2IupType) =
                  x2_ _x2OassignmentCastContext _x2Ocat _x2OdownEnv _x2OexpectedCast _x2OexpectedType _x2Oflags _x2OimCast _x2OodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenType,_lhsOupTypes,_lhsOwhenTypes)))
-- CaseScalarExprListScalarExprPairList ------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
         thenExpectedType     : Maybe TypeExtra
         whenExpectedType     : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : CaseScalarExprListScalarExprPairList 
         originalTree         : CaseScalarExprListScalarExprPairList 
         thenTypes            : [Maybe TypeExtra]
         upTypes              : [Maybe TypeExtra]
         whenTypes            : [[Maybe TypeExtra]]
   alternatives:
      alternative Cons:
         child hd             : CaseScalarExprListScalarExprPair 
         child tl             : CaseScalarExprListScalarExprPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type CaseScalarExprListScalarExprPairList = [CaseScalarExprListScalarExprPair]
-- cata
_sem_CaseScalarExprListScalarExprPairList :: CaseScalarExprListScalarExprPairList ->
                                            T_CaseScalarExprListScalarExprPairList
_sem_CaseScalarExprListScalarExprPairList list =
    (Prelude.foldr _sem_CaseScalarExprListScalarExprPairList_Cons _sem_CaseScalarExprListScalarExprPairList_Nil (Prelude.map _sem_CaseScalarExprListScalarExprPair list))
-- semantic domain
type T_CaseScalarExprListScalarExprPairList = Catalog ->
                                              Environment ->
                                              TypeCheckingFlags ->
                                              (Maybe TypeExtra) ->
                                              (Maybe TypeExtra) ->
                                              (Maybe TypeExtra) ->
                                              ( CaseScalarExprListScalarExprPairList,CaseScalarExprListScalarExprPairList,([Maybe TypeExtra]),([Maybe TypeExtra]),([[Maybe TypeExtra]]))
data Inh_CaseScalarExprListScalarExprPairList = Inh_CaseScalarExprListScalarExprPairList {_cat_Inh_CaseScalarExprListScalarExprPairList :: Catalog,_downEnv_Inh_CaseScalarExprListScalarExprPairList :: Environment,_flags_Inh_CaseScalarExprListScalarExprPairList :: TypeCheckingFlags,_imCast_Inh_CaseScalarExprListScalarExprPairList :: (Maybe TypeExtra),_thenExpectedType_Inh_CaseScalarExprListScalarExprPairList :: (Maybe TypeExtra),_whenExpectedType_Inh_CaseScalarExprListScalarExprPairList :: (Maybe TypeExtra)}
data Syn_CaseScalarExprListScalarExprPairList = Syn_CaseScalarExprListScalarExprPairList {_annotatedTree_Syn_CaseScalarExprListScalarExprPairList :: CaseScalarExprListScalarExprPairList,_originalTree_Syn_CaseScalarExprListScalarExprPairList :: CaseScalarExprListScalarExprPairList,_thenTypes_Syn_CaseScalarExprListScalarExprPairList :: ([Maybe TypeExtra]),_upTypes_Syn_CaseScalarExprListScalarExprPairList :: ([Maybe TypeExtra]),_whenTypes_Syn_CaseScalarExprListScalarExprPairList :: ([[Maybe TypeExtra]])}
_wrap_CaseScalarExprListScalarExprPairList :: T_CaseScalarExprListScalarExprPairList ->
                                             Inh_CaseScalarExprListScalarExprPairList ->
                                             Syn_CaseScalarExprListScalarExprPairList
_wrap_CaseScalarExprListScalarExprPairList sem (Inh_CaseScalarExprListScalarExprPairList _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast _lhsIthenExpectedType _lhsIwhenExpectedType) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenTypes,_lhsOupTypes,_lhsOwhenTypes) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast _lhsIthenExpectedType _lhsIwhenExpectedType
     in  (Syn_CaseScalarExprListScalarExprPairList _lhsOannotatedTree _lhsOoriginalTree _lhsOthenTypes _lhsOupTypes _lhsOwhenTypes))
_sem_CaseScalarExprListScalarExprPairList_Cons :: T_CaseScalarExprListScalarExprPair ->
                                                 T_CaseScalarExprListScalarExprPairList ->
                                                 T_CaseScalarExprListScalarExprPairList
_sem_CaseScalarExprListScalarExprPairList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast
       _lhsIthenExpectedType
       _lhsIwhenExpectedType ->
         (let _lhsOwhenTypes :: ([[Maybe TypeExtra]])
              _lhsOthenTypes :: ([Maybe TypeExtra])
              _lhsOannotatedTree :: CaseScalarExprListScalarExprPairList
              _lhsOoriginalTree :: CaseScalarExprListScalarExprPairList
              _lhsOupTypes :: ([Maybe TypeExtra])
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _hdOthenExpectedType :: (Maybe TypeExtra)
              _hdOwhenExpectedType :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _tlOthenExpectedType :: (Maybe TypeExtra)
              _tlOwhenExpectedType :: (Maybe TypeExtra)
              _hdIannotatedTree :: CaseScalarExprListScalarExprPair
              _hdIoriginalTree :: CaseScalarExprListScalarExprPair
              _hdIthenType :: (Maybe TypeExtra)
              _hdIupTypes :: ([Maybe TypeExtra])
              _hdIwhenTypes :: ([Maybe TypeExtra])
              _tlIannotatedTree :: CaseScalarExprListScalarExprPairList
              _tlIoriginalTree :: CaseScalarExprListScalarExprPairList
              _tlIthenTypes :: ([Maybe TypeExtra])
              _tlIupTypes :: ([Maybe TypeExtra])
              _tlIwhenTypes :: ([[Maybe TypeExtra]])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 548, column 10)
              _lhsOwhenTypes =
                  ({-# LINE 548 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _hdIwhenTypes : _tlIwhenTypes
                   {-# LINE 4384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 549, column 10)
              _lhsOthenTypes =
                  ({-# LINE 549 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _hdIthenType : _tlIthenTypes
                   {-# LINE 4390 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 4396 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 4402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOupTypes =
                  ({-# LINE 564 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tlIupTypes
                   {-# LINE 4420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4426 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOdownEnv =
                  ({-# LINE 563 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 4432 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4438 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4444 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOthenExpectedType =
                  ({-# LINE 609 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIthenExpectedType
                   {-# LINE 4450 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOwhenExpectedType =
                  ({-# LINE 610 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIwhenExpectedType
                   {-# LINE 4456 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4462 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 563 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 4468 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4480 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOthenExpectedType =
                  ({-# LINE 609 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIthenExpectedType
                   {-# LINE 4486 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOwhenExpectedType =
                  ({-# LINE 610 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIwhenExpectedType
                   {-# LINE 4492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree,_hdIthenType,_hdIupTypes,_hdIwhenTypes) =
                  hd_ _hdOcat _hdOdownEnv _hdOflags _hdOimCast _hdOthenExpectedType _hdOwhenExpectedType
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIthenTypes,_tlIupTypes,_tlIwhenTypes) =
                  tl_ _tlOcat _tlOdownEnv _tlOflags _tlOimCast _tlOthenExpectedType _tlOwhenExpectedType
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenTypes,_lhsOupTypes,_lhsOwhenTypes)))
_sem_CaseScalarExprListScalarExprPairList_Nil :: T_CaseScalarExprListScalarExprPairList
_sem_CaseScalarExprListScalarExprPairList_Nil =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast
       _lhsIthenExpectedType
       _lhsIwhenExpectedType ->
         (let _lhsOwhenTypes :: ([[Maybe TypeExtra]])
              _lhsOthenTypes :: ([Maybe TypeExtra])
              _lhsOupTypes :: ([Maybe TypeExtra])
              _lhsOannotatedTree :: CaseScalarExprListScalarExprPairList
              _lhsOoriginalTree :: CaseScalarExprListScalarExprPairList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 550, column 9)
              _lhsOwhenTypes =
                  ({-# LINE 550 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 4516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 551, column 9)
              _lhsOthenTypes =
                  ({-# LINE 551 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 4522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 552, column 9)
              _lhsOupTypes =
                  ({-# LINE 552 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 4528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 4534 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 4540 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOthenTypes,_lhsOupTypes,_lhsOwhenTypes)))
-- Constraint --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : Constraint 
         originalTree         : Constraint 
   alternatives:
      alternative UniqueConstraint:
         child ann            : Annotation 
         child name           : {String}
         child x              : {[NameComponent]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative PrimaryKeyConstraint:
         child ann            : Annotation 
         child name           : {String}
         child x              : {[NameComponent]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CheckConstraint:
         child ann            : Annotation 
         child name           : {String}
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ReferenceConstraint:
         child ann            : Annotation 
         child name           : {String}
         child atts           : {[NameComponent]}
         child table          : Name 
         child tableAtts      : {[NameComponent]}
         child onUpdate       : {Cascade}
         child onDelete       : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data Constraint = UniqueConstraint (Annotation) (String) (([NameComponent]))
                | PrimaryKeyConstraint (Annotation) (String) (([NameComponent]))
                | CheckConstraint (Annotation) (String) (ScalarExpr)
                | ReferenceConstraint (Annotation) (String) (([NameComponent])) (Name) (([NameComponent])) (Cascade) (Cascade)
                deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_Constraint :: Constraint ->
                  T_Constraint
_sem_Constraint (UniqueConstraint _ann _name _x) =
    (_sem_Constraint_UniqueConstraint (_sem_Annotation _ann) _name _x)
_sem_Constraint (PrimaryKeyConstraint _ann _name _x) =
    (_sem_Constraint_PrimaryKeyConstraint (_sem_Annotation _ann) _name _x)
_sem_Constraint (CheckConstraint _ann _name _expr) =
    (_sem_Constraint_CheckConstraint (_sem_Annotation _ann) _name (_sem_ScalarExpr _expr))
_sem_Constraint (ReferenceConstraint _ann _name _atts _table _tableAtts _onUpdate _onDelete) =
    (_sem_Constraint_ReferenceConstraint (_sem_Annotation _ann) _name _atts (_sem_Name _table) _tableAtts _onUpdate _onDelete)
-- semantic domain
type T_Constraint = Catalog ->
                    TypeCheckingFlags ->
                    (Maybe TypeExtra) ->
                    ( Constraint,Constraint)
data Inh_Constraint = Inh_Constraint {_cat_Inh_Constraint :: Catalog,_flags_Inh_Constraint :: TypeCheckingFlags,_imCast_Inh_Constraint :: (Maybe TypeExtra)}
data Syn_Constraint = Syn_Constraint {_annotatedTree_Syn_Constraint :: Constraint,_originalTree_Syn_Constraint :: Constraint}
_wrap_Constraint :: T_Constraint ->
                   Inh_Constraint ->
                   Syn_Constraint
_wrap_Constraint sem (Inh_Constraint _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_Constraint _lhsOannotatedTree _lhsOoriginalTree))
_sem_Constraint_UniqueConstraint :: T_Annotation ->
                                   String ->
                                   ([NameComponent]) ->
                                   T_Constraint
_sem_Constraint_UniqueConstraint ann_ name_ x_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Constraint
              _lhsOoriginalTree :: Constraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 65, column 35)
              _annOtpe =
                  ({-# LINE 65 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 4648 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   UniqueConstraint _annIannotatedTree name_ x_
                   {-# LINE 4654 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   UniqueConstraint _annIoriginalTree name_ x_
                   {-# LINE 4660 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4666 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4672 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4678 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Constraint_PrimaryKeyConstraint :: T_Annotation ->
                                       String ->
                                       ([NameComponent]) ->
                                       T_Constraint
_sem_Constraint_PrimaryKeyConstraint ann_ name_ x_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Constraint
              _lhsOoriginalTree :: Constraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 62, column 39)
              _annOtpe =
                  ({-# LINE 62 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 4715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrimaryKeyConstraint _annIannotatedTree name_ x_
                   {-# LINE 4721 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrimaryKeyConstraint _annIoriginalTree name_ x_
                   {-# LINE 4727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4739 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4745 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Constraint_CheckConstraint :: T_Annotation ->
                                  String ->
                                  T_ScalarExpr ->
                                  T_Constraint
_sem_Constraint_CheckConstraint ann_ name_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Constraint
              _lhsOoriginalTree :: Constraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 58, column 34)
              _annOtpe =
                  ({-# LINE 58 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 4794 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 59, column 34)
              _exprOdownEnv =
                  ({-# LINE 59 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 4800 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 60, column 34)
              _exprOexpectedCast =
                  ({-# LINE 60 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 4806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 61, column 34)
              _exprOexpectedType =
                  ({-# LINE 61 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 4812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 143, column 23)
              _exprOodbcFunction =
                  ({-# LINE 143 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4818 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 815, column 34)
              _exprOassignmentCastContext =
                  ({-# LINE 815 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 4824 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CheckConstraint _annIannotatedTree name_ _exprIannotatedTree
                   {-# LINE 4830 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CheckConstraint _annIoriginalTree name_ _exprIoriginalTree
                   {-# LINE 4836 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4842 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4848 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Constraint_ReferenceConstraint :: T_Annotation ->
                                      String ->
                                      ([NameComponent]) ->
                                      T_Name ->
                                      ([NameComponent]) ->
                                      Cascade ->
                                      Cascade ->
                                      T_Constraint
_sem_Constraint_ReferenceConstraint ann_ name_ atts_ table_ tableAtts_ onUpdate_ onDelete_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _tableOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Constraint
              _lhsOoriginalTree :: Constraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckingFlags
              _tableOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tableIannotatedTree :: Name
              _tableIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 63, column 38)
              _annOtpe =
                  ({-# LINE 63 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 4921 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 64, column 38)
              _tableOtpe =
                  ({-# LINE 64 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 4927 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReferenceConstraint _annIannotatedTree name_ atts_ _tableIannotatedTree tableAtts_ onUpdate_ onDelete_
                   {-# LINE 4933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReferenceConstraint _annIoriginalTree name_ atts_ _tableIoriginalTree tableAtts_ onUpdate_ onDelete_
                   {-# LINE 4939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 4945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 4951 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4957 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4963 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4969 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 4975 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 4981 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 4987 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ConstraintList ----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ConstraintList 
         originalTree         : ConstraintList 
   alternatives:
      alternative Cons:
         child hd             : Constraint 
         child tl             : ConstraintList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ConstraintList = [Constraint]
-- cata
_sem_ConstraintList :: ConstraintList ->
                      T_ConstraintList
_sem_ConstraintList list =
    (Prelude.foldr _sem_ConstraintList_Cons _sem_ConstraintList_Nil (Prelude.map _sem_Constraint list))
-- semantic domain
type T_ConstraintList = Catalog ->
                        TypeCheckingFlags ->
                        (Maybe TypeExtra) ->
                        ( ConstraintList,ConstraintList)
data Inh_ConstraintList = Inh_ConstraintList {_cat_Inh_ConstraintList :: Catalog,_flags_Inh_ConstraintList :: TypeCheckingFlags,_imCast_Inh_ConstraintList :: (Maybe TypeExtra)}
data Syn_ConstraintList = Syn_ConstraintList {_annotatedTree_Syn_ConstraintList :: ConstraintList,_originalTree_Syn_ConstraintList :: ConstraintList}
_wrap_ConstraintList :: T_ConstraintList ->
                       Inh_ConstraintList ->
                       Syn_ConstraintList
_wrap_ConstraintList sem (Inh_ConstraintList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ConstraintList _lhsOannotatedTree _lhsOoriginalTree))
_sem_ConstraintList_Cons :: T_Constraint ->
                           T_ConstraintList ->
                           T_ConstraintList
_sem_ConstraintList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ConstraintList
              _lhsOoriginalTree :: ConstraintList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: Constraint
              _hdIoriginalTree :: Constraint
              _tlIannotatedTree :: ConstraintList
              _tlIoriginalTree :: ConstraintList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 5058 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 5064 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5070 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5076 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5082 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5088 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5094 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_ConstraintList_Nil :: T_ConstraintList
_sem_ConstraintList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ConstraintList
              _lhsOoriginalTree :: ConstraintList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 5130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 5136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- FnBody ------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : FnBody 
         originalTree         : FnBody 
   alternatives:
      alternative SqlFnBody:
         child ann            : Annotation 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative PlpgsqlFnBody:
         child ann            : Annotation 
         child blk            : Statement 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data FnBody = SqlFnBody (Annotation) (StatementList)
            | PlpgsqlFnBody (Annotation) (Statement)
            deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_FnBody :: FnBody ->
              T_FnBody
_sem_FnBody (SqlFnBody _ann _sts) =
    (_sem_FnBody_SqlFnBody (_sem_Annotation _ann) (_sem_StatementList _sts))
_sem_FnBody (PlpgsqlFnBody _ann _blk) =
    (_sem_FnBody_PlpgsqlFnBody (_sem_Annotation _ann) (_sem_Statement _blk))
-- semantic domain
type T_FnBody = Catalog ->
                TypeCheckingFlags ->
                (Maybe TypeExtra) ->
                ( FnBody,FnBody)
data Inh_FnBody = Inh_FnBody {_cat_Inh_FnBody :: Catalog,_flags_Inh_FnBody :: TypeCheckingFlags,_imCast_Inh_FnBody :: (Maybe TypeExtra)}
data Syn_FnBody = Syn_FnBody {_annotatedTree_Syn_FnBody :: FnBody,_originalTree_Syn_FnBody :: FnBody}
_wrap_FnBody :: T_FnBody ->
               Inh_FnBody ->
               Syn_FnBody
_wrap_FnBody sem (Inh_FnBody _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_FnBody _lhsOannotatedTree _lhsOoriginalTree))
_sem_FnBody_SqlFnBody :: T_Annotation ->
                        T_StatementList ->
                        T_FnBody
_sem_FnBody_SqlFnBody ann_ sts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: FnBody
              _lhsOoriginalTree :: FnBody
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckingFlags
              _stsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _stsIannotatedTree :: StatementList
              _stsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 67, column 24)
              _annOtpe =
                  ({-# LINE 67 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 5222 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SqlFnBody _annIannotatedTree _stsIannotatedTree
                   {-# LINE 5228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SqlFnBody _annIoriginalTree _stsIoriginalTree
                   {-# LINE 5234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5264 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5270 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5276 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_FnBody_PlpgsqlFnBody :: T_Annotation ->
                            T_Statement ->
                            T_FnBody
_sem_FnBody_PlpgsqlFnBody ann_ blk_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: FnBody
              _lhsOoriginalTree :: FnBody
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _blkOcat :: Catalog
              _blkOflags :: TypeCheckingFlags
              _blkOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _blkIannotatedTree :: Statement
              _blkIoriginalTree :: Statement
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 66, column 28)
              _annOtpe =
                  ({-# LINE 66 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 5313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PlpgsqlFnBody _annIannotatedTree _blkIannotatedTree
                   {-# LINE 5319 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PlpgsqlFnBody _annIoriginalTree _blkIoriginalTree
                   {-# LINE 5325 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5331 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5337 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5343 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5349 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5355 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _blkOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5361 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _blkOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5367 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _blkOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5373 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _blkIannotatedTree,_blkIoriginalTree) =
                  blk_ _blkOcat _blkOflags _blkOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- InList ------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe TypeExtra
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : InList 
         listType             : Either [TypeError] TypeExtra
         originalTree         : InList 
   alternatives:
      alternative InList:
         child ann            : Annotation 
         child exprs          : ScalarExprList 
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative InQueryExpr:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
-}
data InList = InList (Annotation) (ScalarExprList)
            | InQueryExpr (Annotation) (QueryExpr)
            deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_InList :: InList ->
              T_InList
_sem_InList (InList _ann _exprs) =
    (_sem_InList_InList (_sem_Annotation _ann) (_sem_ScalarExprList _exprs))
_sem_InList (InQueryExpr _ann _sel) =
    (_sem_InList_InQueryExpr (_sem_Annotation _ann) (_sem_QueryExpr _sel))
-- semantic domain
type T_InList = Catalog ->
                Environment ->
                Bool ->
                (Maybe TypeExtra) ->
                TypeCheckingFlags ->
                (Maybe TypeExtra) ->
                ( InList,(Either [TypeError] TypeExtra),InList)
data Inh_InList = Inh_InList {_cat_Inh_InList :: Catalog,_downEnv_Inh_InList :: Environment,_expectedCast_Inh_InList :: Bool,_expectedType_Inh_InList :: (Maybe TypeExtra),_flags_Inh_InList :: TypeCheckingFlags,_imCast_Inh_InList :: (Maybe TypeExtra)}
data Syn_InList = Syn_InList {_annotatedTree_Syn_InList :: InList,_listType_Syn_InList :: (Either [TypeError] TypeExtra),_originalTree_Syn_InList :: InList}
_wrap_InList :: T_InList ->
               Inh_InList ->
               Syn_InList
_wrap_InList sem (Inh_InList _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOlistType,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_InList _lhsOannotatedTree _lhsOlistType _lhsOoriginalTree))
_sem_InList_InList :: T_Annotation ->
                     T_ScalarExprList ->
                     T_InList
_sem_InList_InList ann_ exprs_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOlistType :: (Either [TypeError] TypeExtra)
              _exprsOexpectedTypes :: ([TypeExtra])
              _exprsOexpectedCast :: Bool
              _annOimCast :: (Maybe TypeExtra)
              _exprsOassignmentCastContext :: Bool
              _lhsOannotatedTree :: InList
              _lhsOoriginalTree :: InList
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOtpe :: (Either [TypeError] TypeExtra)
              _exprsOcat :: Catalog
              _exprsOdownEnv :: Environment
              _exprsOflags :: TypeCheckingFlags
              _exprsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprsIannotatedTree :: ScalarExprList
              _exprsIoriginalTree :: ScalarExprList
              _exprsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 219, column 9)
              _tpe =
                  ({-# LINE 219 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
                   {-# LINE 5469 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 688, column 9)
              _lhsOlistType =
                  ({-# LINE 688 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   mapM (maybe (Left []) Right) _exprsIupTypes
                   >>= resolveResultSetTypeExtra _lhsIcat
                   {-# LINE 5476 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 690, column 9)
              _exprsOexpectedTypes =
                  ({-# LINE 690 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe [] repeat _lhsIexpectedType
                   {-# LINE 5482 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 692, column 9)
              _exprsOexpectedCast =
                  ({-# LINE 692 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 5488 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 786, column 12)
              _annOimCast =
                  ({-# LINE 786 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 5494 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 816, column 21)
              _exprsOassignmentCastContext =
                  ({-# LINE 816 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 5500 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InList _annIannotatedTree _exprsIannotatedTree
                   {-# LINE 5506 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InList _annIoriginalTree _exprsIoriginalTree
                   {-# LINE 5512 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5518 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5524 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5530 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5536 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 5542 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5548 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprsOdownEnv =
                  ({-# LINE 195 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 5554 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5560 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5566 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprsIannotatedTree,_exprsIoriginalTree,_exprsIupTypes) =
                  exprs_ _exprsOassignmentCastContext _exprsOcat _exprsOdownEnv _exprsOexpectedCast _exprsOexpectedTypes _exprsOflags _exprsOimCast
          in  ( _lhsOannotatedTree,_lhsOlistType,_lhsOoriginalTree)))
_sem_InList_InQueryExpr :: T_Annotation ->
                          T_QueryExpr ->
                          T_InList
_sem_InList_InQueryExpr ann_ sel_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _selOouterDownEnv :: (Maybe Environment)
              _lhsOlistType :: (Either [TypeError] TypeExtra)
              _selOexpectedType :: (Maybe [TypeExtra])
              _annOimCast :: (Maybe TypeExtra)
              _selOassignmentCastContext :: Bool
              _lhsOannotatedTree :: InList
              _lhsOoriginalTree :: InList
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOtpe :: (Either [TypeError] TypeExtra)
              _selOcat :: Catalog
              _selOflags :: TypeCheckingFlags
              _selOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selIannotatedTree :: QueryExpr
              _selIoriginalTree :: QueryExpr
              _selIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 97, column 17)
              _selOouterDownEnv =
                  ({-# LINE 97 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Nothing
                   {-# LINE 5605 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 219, column 9)
              _tpe =
                  ({-# LINE 219 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
                   {-# LINE 5611 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 695, column 9)
              _lhsOlistType =
                  ({-# LINE 695 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   st <- maybe (Left []) Right (map snd <$> _selIupType)
                   case length st of
                             0 -> Left [InternalError
                                        "got subquery with no columns? in inselect"]
                             1 -> Right $ head st
                             _ -> Right $ mkTypeExtra $ AnonymousCompositeType
                                     $ map teType st
                   {-# LINE 5624 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 705, column 9)
              _selOexpectedType =
                  ({-# LINE 705 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   liftM (map snd) _selIupType
                   {-# LINE 5630 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 787, column 17)
              _annOimCast =
                  ({-# LINE 787 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 5636 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 817, column 26)
              _selOassignmentCastContext =
                  ({-# LINE 817 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 5642 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InQueryExpr _annIannotatedTree _selIannotatedTree
                   {-# LINE 5648 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InQueryExpr _annIoriginalTree _selIoriginalTree
                   {-# LINE 5654 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5660 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5666 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5672 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5678 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 5684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5702 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOassignmentCastContext _selOcat _selOexpectedType _selOflags _selOimCast _selOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOlistType,_lhsOoriginalTree)))
-- JoinExpr ----------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : JoinExpr 
         originalTree         : JoinExpr 
   alternatives:
      alternative JoinOn:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative JoinUsing:
         child ann            : Annotation 
         child x              : {[NameComponent]}
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
-}
data JoinExpr = JoinOn (Annotation) (ScalarExpr)
              | JoinUsing (Annotation) (([NameComponent]))
              deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_JoinExpr :: JoinExpr ->
                T_JoinExpr
_sem_JoinExpr (JoinOn _ann _expr) =
    (_sem_JoinExpr_JoinOn (_sem_Annotation _ann) (_sem_ScalarExpr _expr))
_sem_JoinExpr (JoinUsing _ann _x) =
    (_sem_JoinExpr_JoinUsing (_sem_Annotation _ann) _x)
-- semantic domain
type T_JoinExpr = Catalog ->
                  Environment ->
                  TypeCheckingFlags ->
                  (Maybe TypeExtra) ->
                  ( JoinExpr,JoinExpr)
data Inh_JoinExpr = Inh_JoinExpr {_cat_Inh_JoinExpr :: Catalog,_downEnv_Inh_JoinExpr :: Environment,_flags_Inh_JoinExpr :: TypeCheckingFlags,_imCast_Inh_JoinExpr :: (Maybe TypeExtra)}
data Syn_JoinExpr = Syn_JoinExpr {_annotatedTree_Syn_JoinExpr :: JoinExpr,_originalTree_Syn_JoinExpr :: JoinExpr}
_wrap_JoinExpr :: T_JoinExpr ->
                 Inh_JoinExpr ->
                 Syn_JoinExpr
_wrap_JoinExpr sem (Inh_JoinExpr _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast
     in  (Syn_JoinExpr _lhsOannotatedTree _lhsOoriginalTree))
_sem_JoinExpr_JoinOn :: T_Annotation ->
                       T_ScalarExpr ->
                       T_JoinExpr
_sem_JoinExpr_JoinOn ann_ expr_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _exprOodbcFunction :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOexpectedCast :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: JoinExpr
              _lhsOoriginalTree :: JoinExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 223, column 9)
              _tpe =
                  ({-# LINE 223 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
                   {-# LINE 5792 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 146, column 14)
              _exprOodbcFunction =
                  ({-# LINE 146 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 5798 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 752, column 7)
              _exprOexpectedType =
                  ({-# LINE 752 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Just $ TypeExtra typeBool Nothing Nothing
                                 $ maybe False teNullable _exprIupType
                   {-# LINE 5805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 754, column 7)
              _exprOexpectedCast =
                  ({-# LINE 754 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 5811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 818, column 23)
              _exprOassignmentCastContext =
                  ({-# LINE 818 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 5817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinOn _annIannotatedTree _exprIannotatedTree
                   {-# LINE 5823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinOn _annIoriginalTree _exprIoriginalTree
                   {-# LINE 5829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 5865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 5877 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5883 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5889 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_JoinExpr_JoinUsing :: T_Annotation ->
                          ([NameComponent]) ->
                          T_JoinExpr
_sem_JoinExpr_JoinUsing ann_ x_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: JoinExpr
              _lhsOoriginalTree :: JoinExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 223, column 9)
              _tpe =
                  ({-# LINE 223 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
                   {-# LINE 5916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinUsing _annIannotatedTree x_
                   {-# LINE 5922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinUsing _annIoriginalTree x_
                   {-# LINE 5928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 5934 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 5940 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 5946 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 5952 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 5958 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 5964 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- MaybeBoolExpr -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : MaybeBoolExpr 
         originalTree         : MaybeBoolExpr 
   alternatives:
      alternative Just:
         child just           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeBoolExpr = Maybe (ScalarExpr)
-- cata
_sem_MaybeBoolExpr :: MaybeBoolExpr ->
                     T_MaybeBoolExpr
_sem_MaybeBoolExpr (Prelude.Just x) =
    (_sem_MaybeBoolExpr_Just (_sem_ScalarExpr x))
_sem_MaybeBoolExpr Prelude.Nothing =
    _sem_MaybeBoolExpr_Nothing
-- semantic domain
type T_MaybeBoolExpr = Catalog ->
                       Environment ->
                       TypeCheckingFlags ->
                       (Maybe TypeExtra) ->
                       ( MaybeBoolExpr,MaybeBoolExpr)
data Inh_MaybeBoolExpr = Inh_MaybeBoolExpr {_cat_Inh_MaybeBoolExpr :: Catalog,_downEnv_Inh_MaybeBoolExpr :: Environment,_flags_Inh_MaybeBoolExpr :: TypeCheckingFlags,_imCast_Inh_MaybeBoolExpr :: (Maybe TypeExtra)}
data Syn_MaybeBoolExpr = Syn_MaybeBoolExpr {_annotatedTree_Syn_MaybeBoolExpr :: MaybeBoolExpr,_originalTree_Syn_MaybeBoolExpr :: MaybeBoolExpr}
_wrap_MaybeBoolExpr :: T_MaybeBoolExpr ->
                      Inh_MaybeBoolExpr ->
                      Syn_MaybeBoolExpr
_wrap_MaybeBoolExpr sem (Inh_MaybeBoolExpr _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast
     in  (Syn_MaybeBoolExpr _lhsOannotatedTree _lhsOoriginalTree))
_sem_MaybeBoolExpr_Just :: T_ScalarExpr ->
                          T_MaybeBoolExpr
_sem_MaybeBoolExpr_Just just_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _justOodbcFunction :: Bool
              _justOexpectedType :: (Maybe TypeExtra)
              _justOexpectedCast :: Bool
              _justOassignmentCastContext :: Bool
              _lhsOannotatedTree :: MaybeBoolExpr
              _lhsOoriginalTree :: MaybeBoolExpr
              _justOcat :: Catalog
              _justOdownEnv :: Environment
              _justOflags :: TypeCheckingFlags
              _justOimCast :: (Maybe TypeExtra)
              _justIannotatedTree :: ScalarExpr
              _justIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _justIoriginalTree :: ScalarExpr
              _justIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 149, column 12)
              _justOodbcFunction =
                  ({-# LINE 149 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 6038 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 766, column 7)
              _justOexpectedType =
                  ({-# LINE 766 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 6044 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 767, column 7)
              _justOexpectedCast =
                  ({-# LINE 767 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 6050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 819, column 26)
              _justOassignmentCastContext =
                  ({-# LINE 819 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 6056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
                   {-# LINE 6062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
                   {-# LINE 6068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6080 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6086 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 6092 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6098 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6104 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _justIannotatedTree,_justIcolExprs,_justIoriginalTree,_justIupType) =
                  just_ _justOassignmentCastContext _justOcat _justOdownEnv _justOexpectedCast _justOexpectedType _justOflags _justOimCast _justOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_MaybeBoolExpr_Nothing :: T_MaybeBoolExpr
_sem_MaybeBoolExpr_Nothing =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeBoolExpr
              _lhsOoriginalTree :: MaybeBoolExpr
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 6121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 6127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- MaybeNameComponentList --------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : MaybeNameComponentList 
         originalTree         : MaybeNameComponentList 
   alternatives:
      alternative Just:
         child just           : NameComponentList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeNameComponentList = Maybe (NameComponentList)
-- cata
_sem_MaybeNameComponentList :: MaybeNameComponentList ->
                              T_MaybeNameComponentList
_sem_MaybeNameComponentList (Prelude.Just x) =
    (_sem_MaybeNameComponentList_Just (_sem_NameComponentList x))
_sem_MaybeNameComponentList Prelude.Nothing =
    _sem_MaybeNameComponentList_Nothing
-- semantic domain
type T_MaybeNameComponentList = Catalog ->
                                TypeCheckingFlags ->
                                (Maybe TypeExtra) ->
                                ( MaybeNameComponentList,MaybeNameComponentList)
data Inh_MaybeNameComponentList = Inh_MaybeNameComponentList {_cat_Inh_MaybeNameComponentList :: Catalog,_flags_Inh_MaybeNameComponentList :: TypeCheckingFlags,_imCast_Inh_MaybeNameComponentList :: (Maybe TypeExtra)}
data Syn_MaybeNameComponentList = Syn_MaybeNameComponentList {_annotatedTree_Syn_MaybeNameComponentList :: MaybeNameComponentList,_originalTree_Syn_MaybeNameComponentList :: MaybeNameComponentList}
_wrap_MaybeNameComponentList :: T_MaybeNameComponentList ->
                               Inh_MaybeNameComponentList ->
                               Syn_MaybeNameComponentList
_wrap_MaybeNameComponentList sem (Inh_MaybeNameComponentList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_MaybeNameComponentList _lhsOannotatedTree _lhsOoriginalTree))
_sem_MaybeNameComponentList_Just :: T_NameComponentList ->
                                   T_MaybeNameComponentList
_sem_MaybeNameComponentList_Just just_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeNameComponentList
              _lhsOoriginalTree :: MaybeNameComponentList
              _justOcat :: Catalog
              _justOflags :: TypeCheckingFlags
              _justOimCast :: (Maybe TypeExtra)
              _justIannotatedTree :: NameComponentList
              _justIoriginalTree :: NameComponentList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
                   {-# LINE 6201 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
                   {-# LINE 6207 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6213 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6219 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6225 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _justIannotatedTree,_justIoriginalTree) =
                  just_ _justOcat _justOflags _justOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_MaybeNameComponentList_Nothing :: T_MaybeNameComponentList
_sem_MaybeNameComponentList_Nothing =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeNameComponentList
              _lhsOoriginalTree :: MaybeNameComponentList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 6253 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 6259 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6265 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6271 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- MaybeScalarExpr ---------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe TypeExtra
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : MaybeScalarExpr 
         originalTree         : MaybeScalarExpr 
         upType               : Maybe TypeExtra
   alternatives:
      alternative Just:
         child just           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeScalarExpr = Maybe (ScalarExpr)
-- cata
_sem_MaybeScalarExpr :: MaybeScalarExpr ->
                       T_MaybeScalarExpr
_sem_MaybeScalarExpr (Prelude.Just x) =
    (_sem_MaybeScalarExpr_Just (_sem_ScalarExpr x))
_sem_MaybeScalarExpr Prelude.Nothing =
    _sem_MaybeScalarExpr_Nothing
-- semantic domain
type T_MaybeScalarExpr = Bool ->
                         Catalog ->
                         Environment ->
                         Bool ->
                         (Maybe TypeExtra) ->
                         TypeCheckingFlags ->
                         (Maybe TypeExtra) ->
                         ( MaybeScalarExpr,MaybeScalarExpr,(Maybe TypeExtra))
data Inh_MaybeScalarExpr = Inh_MaybeScalarExpr {_assignmentCastContext_Inh_MaybeScalarExpr :: Bool,_cat_Inh_MaybeScalarExpr :: Catalog,_downEnv_Inh_MaybeScalarExpr :: Environment,_expectedCast_Inh_MaybeScalarExpr :: Bool,_expectedType_Inh_MaybeScalarExpr :: (Maybe TypeExtra),_flags_Inh_MaybeScalarExpr :: TypeCheckingFlags,_imCast_Inh_MaybeScalarExpr :: (Maybe TypeExtra)}
data Syn_MaybeScalarExpr = Syn_MaybeScalarExpr {_annotatedTree_Syn_MaybeScalarExpr :: MaybeScalarExpr,_originalTree_Syn_MaybeScalarExpr :: MaybeScalarExpr,_upType_Syn_MaybeScalarExpr :: (Maybe TypeExtra)}
_wrap_MaybeScalarExpr :: T_MaybeScalarExpr ->
                        Inh_MaybeScalarExpr ->
                        Syn_MaybeScalarExpr
_wrap_MaybeScalarExpr sem (Inh_MaybeScalarExpr _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_MaybeScalarExpr _lhsOannotatedTree _lhsOoriginalTree _lhsOupType))
_sem_MaybeScalarExpr_Just :: T_ScalarExpr ->
                            T_MaybeScalarExpr
_sem_MaybeScalarExpr_Just just_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _justOodbcFunction :: Bool
              _lhsOannotatedTree :: MaybeScalarExpr
              _lhsOoriginalTree :: MaybeScalarExpr
              _lhsOupType :: (Maybe TypeExtra)
              _justOassignmentCastContext :: Bool
              _justOcat :: Catalog
              _justOdownEnv :: Environment
              _justOexpectedCast :: Bool
              _justOexpectedType :: (Maybe TypeExtra)
              _justOflags :: TypeCheckingFlags
              _justOimCast :: (Maybe TypeExtra)
              _justIannotatedTree :: ScalarExpr
              _justIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _justIoriginalTree :: ScalarExpr
              _justIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 152, column 12)
              _justOodbcFunction =
                  ({-# LINE 152 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 6354 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
                   {-# LINE 6360 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
                   {-# LINE 6366 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6378 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOupType =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _justIupType
                   {-# LINE 6384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 6390 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6396 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 6402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOexpectedCast =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 6408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOexpectedType =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 6414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6426 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _justIannotatedTree,_justIcolExprs,_justIoriginalTree,_justIupType) =
                  just_ _justOassignmentCastContext _justOcat _justOdownEnv _justOexpectedCast _justOexpectedType _justOflags _justOimCast _justOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
_sem_MaybeScalarExpr_Nothing :: T_MaybeScalarExpr
_sem_MaybeScalarExpr_Nothing =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupType :: (Maybe TypeExtra)
              _lhsOannotatedTree :: MaybeScalarExpr
              _lhsOoriginalTree :: MaybeScalarExpr
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 126, column 15)
              _lhsOupType =
                  ({-# LINE 126 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 6447 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 6453 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 6459 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6465 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6471 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
-- MaybeSelectList ---------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : MaybeSelectList 
         originalTree         : MaybeSelectList 
   alternatives:
      alternative Just:
         child just           : SelectList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeSelectList = Maybe (SelectList)
-- cata
_sem_MaybeSelectList :: MaybeSelectList ->
                       T_MaybeSelectList
_sem_MaybeSelectList (Prelude.Just x) =
    (_sem_MaybeSelectList_Just (_sem_SelectList x))
_sem_MaybeSelectList Prelude.Nothing =
    _sem_MaybeSelectList_Nothing
-- semantic domain
type T_MaybeSelectList = Catalog ->
                         TypeCheckingFlags ->
                         (Maybe TypeExtra) ->
                         ( MaybeSelectList,MaybeSelectList)
data Inh_MaybeSelectList = Inh_MaybeSelectList {_cat_Inh_MaybeSelectList :: Catalog,_flags_Inh_MaybeSelectList :: TypeCheckingFlags,_imCast_Inh_MaybeSelectList :: (Maybe TypeExtra)}
data Syn_MaybeSelectList = Syn_MaybeSelectList {_annotatedTree_Syn_MaybeSelectList :: MaybeSelectList,_originalTree_Syn_MaybeSelectList :: MaybeSelectList}
_wrap_MaybeSelectList :: T_MaybeSelectList ->
                        Inh_MaybeSelectList ->
                        Syn_MaybeSelectList
_wrap_MaybeSelectList sem (Inh_MaybeSelectList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_MaybeSelectList _lhsOannotatedTree _lhsOoriginalTree))
_sem_MaybeSelectList_Just :: T_SelectList ->
                            T_MaybeSelectList
_sem_MaybeSelectList_Just just_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _justOdownEnv :: Environment
              _justOexpectedCast :: Bool
              _justOexpectedType :: (Maybe [TypeExtra])
              _justOassignmentCastContext :: Bool
              _lhsOannotatedTree :: MaybeSelectList
              _lhsOoriginalTree :: MaybeSelectList
              _justOcat :: Catalog
              _justOflags :: TypeCheckingFlags
              _justOimCast :: (Maybe TypeExtra)
              _justIannotatedTree :: SelectList
              _justIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _justIoriginalTree :: SelectList
              _justIupEnv :: Environment
              _justIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 68, column 28)
              _justOdownEnv =
                  ({-# LINE 68 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 6540 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 69, column 28)
              _justOexpectedCast =
                  ({-# LINE 69 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 6546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 70, column 28)
              _justOexpectedType =
                  ({-# LINE 70 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 6552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 820, column 28)
              _justOassignmentCastContext =
                  ({-# LINE 820 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 6558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
                   {-# LINE 6564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
                   {-# LINE 6570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _justIannotatedTree,_justIcolExprs,_justIoriginalTree,_justIupEnv,_justIupType) =
                  just_ _justOassignmentCastContext _justOcat _justOdownEnv _justOexpectedCast _justOexpectedType _justOflags _justOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_MaybeSelectList_Nothing :: T_MaybeSelectList
_sem_MaybeSelectList_Nothing =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeSelectList
              _lhsOoriginalTree :: MaybeSelectList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 6616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 6622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- MaybeTablePartitionDef --------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : MaybeTablePartitionDef 
         originalTree         : MaybeTablePartitionDef 
   alternatives:
      alternative Just:
         child just           : TablePartitionDef 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type MaybeTablePartitionDef = Maybe (TablePartitionDef)
-- cata
_sem_MaybeTablePartitionDef :: MaybeTablePartitionDef ->
                              T_MaybeTablePartitionDef
_sem_MaybeTablePartitionDef (Prelude.Just x) =
    (_sem_MaybeTablePartitionDef_Just (_sem_TablePartitionDef x))
_sem_MaybeTablePartitionDef Prelude.Nothing =
    _sem_MaybeTablePartitionDef_Nothing
-- semantic domain
type T_MaybeTablePartitionDef = Catalog ->
                                TypeCheckingFlags ->
                                (Maybe TypeExtra) ->
                                ( MaybeTablePartitionDef,MaybeTablePartitionDef)
data Inh_MaybeTablePartitionDef = Inh_MaybeTablePartitionDef {_cat_Inh_MaybeTablePartitionDef :: Catalog,_flags_Inh_MaybeTablePartitionDef :: TypeCheckingFlags,_imCast_Inh_MaybeTablePartitionDef :: (Maybe TypeExtra)}
data Syn_MaybeTablePartitionDef = Syn_MaybeTablePartitionDef {_annotatedTree_Syn_MaybeTablePartitionDef :: MaybeTablePartitionDef,_originalTree_Syn_MaybeTablePartitionDef :: MaybeTablePartitionDef}
_wrap_MaybeTablePartitionDef :: T_MaybeTablePartitionDef ->
                               Inh_MaybeTablePartitionDef ->
                               Syn_MaybeTablePartitionDef
_wrap_MaybeTablePartitionDef sem (Inh_MaybeTablePartitionDef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_MaybeTablePartitionDef _lhsOannotatedTree _lhsOoriginalTree))
_sem_MaybeTablePartitionDef_Just :: T_TablePartitionDef ->
                                   T_MaybeTablePartitionDef
_sem_MaybeTablePartitionDef_Just just_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeTablePartitionDef
              _lhsOoriginalTree :: MaybeTablePartitionDef
              _justOcat :: Catalog
              _justOflags :: TypeCheckingFlags
              _justOimCast :: (Maybe TypeExtra)
              _justIannotatedTree :: TablePartitionDef
              _justIoriginalTree :: TablePartitionDef
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
                   {-# LINE 6696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
                   {-# LINE 6702 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6708 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6732 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _justIannotatedTree,_justIoriginalTree) =
                  just_ _justOcat _justOflags _justOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_MaybeTablePartitionDef_Nothing :: T_MaybeTablePartitionDef
_sem_MaybeTablePartitionDef_Nothing =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: MaybeTablePartitionDef
              _lhsOoriginalTree :: MaybeTablePartitionDef
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 6748 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 6754 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6760 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6766 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- Name --------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
         tpe                  : Either [TypeError] TypeExtra
      synthesized attributes:
         annotatedTree        : Name 
         originalTree         : Name 
   alternatives:
      alternative Name:
         child ann            : Annotation 
         child is             : {[NameComponent]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AntiName:
         child string         : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data Name = Name (Annotation) (([NameComponent]))
          | AntiName (String)
          deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_Name :: Name ->
            T_Name
_sem_Name (Name _ann _is) =
    (_sem_Name_Name (_sem_Annotation _ann) _is)
_sem_Name (AntiName _string) =
    (_sem_Name_AntiName _string)
-- semantic domain
type T_Name = Catalog ->
              TypeCheckingFlags ->
              (Maybe TypeExtra) ->
              (Either [TypeError] TypeExtra) ->
              ( Name,Name)
data Inh_Name = Inh_Name {_cat_Inh_Name :: Catalog,_flags_Inh_Name :: TypeCheckingFlags,_imCast_Inh_Name :: (Maybe TypeExtra),_tpe_Inh_Name :: (Either [TypeError] TypeExtra)}
data Syn_Name = Syn_Name {_annotatedTree_Syn_Name :: Name,_originalTree_Syn_Name :: Name}
_wrap_Name :: T_Name ->
             Inh_Name ->
             Syn_Name
_wrap_Name sem (Inh_Name _lhsIcat _lhsIflags _lhsIimCast _lhsItpe) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast _lhsItpe
     in  (Syn_Name _lhsOannotatedTree _lhsOoriginalTree))
_sem_Name_Name :: T_Annotation ->
                 ([NameComponent]) ->
                 T_Name
_sem_Name_Name ann_ is_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsItpe ->
         (let _lhsOannotatedTree :: Name
              _lhsOoriginalTree :: Name
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Name _annIannotatedTree is_
                   {-# LINE 6837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Name _annIoriginalTree is_
                   {-# LINE 6843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6849 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6855 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 6861 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 6867 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 6873 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOtpe =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsItpe
                   {-# LINE 6879 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Name_AntiName :: String ->
                     T_Name
_sem_Name_AntiName string_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast
       _lhsItpe ->
         (let _lhsOannotatedTree :: Name
              _lhsOoriginalTree :: Name
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiName string_
                   {-# LINE 6897 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiName string_
                   {-# LINE 6903 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6909 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6915 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- NameComponentList -------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : NameComponentList 
         originalTree         : NameComponentList 
   alternatives:
      alternative Cons:
         child hd             : {NameComponent}
         child tl             : NameComponentList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type NameComponentList = [(NameComponent)]
-- cata
_sem_NameComponentList :: NameComponentList ->
                         T_NameComponentList
_sem_NameComponentList list =
    (Prelude.foldr _sem_NameComponentList_Cons _sem_NameComponentList_Nil list)
-- semantic domain
type T_NameComponentList = Catalog ->
                           TypeCheckingFlags ->
                           (Maybe TypeExtra) ->
                           ( NameComponentList,NameComponentList)
data Inh_NameComponentList = Inh_NameComponentList {_cat_Inh_NameComponentList :: Catalog,_flags_Inh_NameComponentList :: TypeCheckingFlags,_imCast_Inh_NameComponentList :: (Maybe TypeExtra)}
data Syn_NameComponentList = Syn_NameComponentList {_annotatedTree_Syn_NameComponentList :: NameComponentList,_originalTree_Syn_NameComponentList :: NameComponentList}
_wrap_NameComponentList :: T_NameComponentList ->
                          Inh_NameComponentList ->
                          Syn_NameComponentList
_wrap_NameComponentList sem (Inh_NameComponentList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_NameComponentList _lhsOannotatedTree _lhsOoriginalTree))
_sem_NameComponentList_Cons :: NameComponent ->
                              T_NameComponentList ->
                              T_NameComponentList
_sem_NameComponentList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: NameComponentList
              _lhsOoriginalTree :: NameComponentList
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _tlIannotatedTree :: NameComponentList
              _tlIoriginalTree :: NameComponentList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) hd_ _tlIannotatedTree
                   {-# LINE 6977 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) hd_ _tlIoriginalTree
                   {-# LINE 6983 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 6989 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 6995 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7001 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7007 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7013 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_NameComponentList_Nil :: T_NameComponentList
_sem_NameComponentList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: NameComponentList
              _lhsOoriginalTree :: NameComponentList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 7029 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 7035 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7041 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7047 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- NameTypeNameListPair ----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : NameTypeNameListPair 
         originalTree         : NameTypeNameListPair 
   alternatives:
      alternative Tuple:
         child x1             : Name 
         child x2             : TypeNameList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type NameTypeNameListPair = ( Name,TypeNameList)
-- cata
_sem_NameTypeNameListPair :: NameTypeNameListPair ->
                            T_NameTypeNameListPair
_sem_NameTypeNameListPair ( x1,x2) =
    (_sem_NameTypeNameListPair_Tuple (_sem_Name x1) (_sem_TypeNameList x2))
-- semantic domain
type T_NameTypeNameListPair = Catalog ->
                              TypeCheckingFlags ->
                              (Maybe TypeExtra) ->
                              ( NameTypeNameListPair,NameTypeNameListPair)
data Inh_NameTypeNameListPair = Inh_NameTypeNameListPair {_cat_Inh_NameTypeNameListPair :: Catalog,_flags_Inh_NameTypeNameListPair :: TypeCheckingFlags,_imCast_Inh_NameTypeNameListPair :: (Maybe TypeExtra)}
data Syn_NameTypeNameListPair = Syn_NameTypeNameListPair {_annotatedTree_Syn_NameTypeNameListPair :: NameTypeNameListPair,_originalTree_Syn_NameTypeNameListPair :: NameTypeNameListPair}
_wrap_NameTypeNameListPair :: T_NameTypeNameListPair ->
                             Inh_NameTypeNameListPair ->
                             Syn_NameTypeNameListPair
_wrap_NameTypeNameListPair sem (Inh_NameTypeNameListPair _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_NameTypeNameListPair _lhsOannotatedTree _lhsOoriginalTree))
_sem_NameTypeNameListPair_Tuple :: T_Name ->
                                  T_TypeNameList ->
                                  T_NameTypeNameListPair
_sem_NameTypeNameListPair_Tuple x1_ x2_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _x1Otpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: NameTypeNameListPair
              _lhsOoriginalTree :: NameTypeNameListPair
              _x1Ocat :: Catalog
              _x1Oflags :: TypeCheckingFlags
              _x1OimCast :: (Maybe TypeExtra)
              _x2Ocat :: Catalog
              _x2Oflags :: TypeCheckingFlags
              _x2OimCast :: (Maybe TypeExtra)
              _x1IannotatedTree :: Name
              _x1IoriginalTree :: Name
              _x2IannotatedTree :: TypeNameList
              _x2IoriginalTree :: TypeNameList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 71, column 34)
              _x1Otpe =
                  ({-# LINE 71 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 7111 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,_x2IannotatedTree)
                   {-# LINE 7117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,_x2IoriginalTree)
                   {-# LINE 7123 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7129 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7135 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7141 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7147 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7153 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7159 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7165 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7171 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _x1IannotatedTree,_x1IoriginalTree) =
                  x1_ _x1Ocat _x1Oflags _x1OimCast _x1Otpe
              ( _x2IannotatedTree,_x2IoriginalTree) =
                  x2_ _x2Ocat _x2Oflags _x2OimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- NameTypeNameListPairList ------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : NameTypeNameListPairList 
         originalTree         : NameTypeNameListPairList 
   alternatives:
      alternative Cons:
         child hd             : NameTypeNameListPair 
         child tl             : NameTypeNameListPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type NameTypeNameListPairList = [NameTypeNameListPair]
-- cata
_sem_NameTypeNameListPairList :: NameTypeNameListPairList ->
                                T_NameTypeNameListPairList
_sem_NameTypeNameListPairList list =
    (Prelude.foldr _sem_NameTypeNameListPairList_Cons _sem_NameTypeNameListPairList_Nil (Prelude.map _sem_NameTypeNameListPair list))
-- semantic domain
type T_NameTypeNameListPairList = Catalog ->
                                  TypeCheckingFlags ->
                                  (Maybe TypeExtra) ->
                                  ( NameTypeNameListPairList,NameTypeNameListPairList)
data Inh_NameTypeNameListPairList = Inh_NameTypeNameListPairList {_cat_Inh_NameTypeNameListPairList :: Catalog,_flags_Inh_NameTypeNameListPairList :: TypeCheckingFlags,_imCast_Inh_NameTypeNameListPairList :: (Maybe TypeExtra)}
data Syn_NameTypeNameListPairList = Syn_NameTypeNameListPairList {_annotatedTree_Syn_NameTypeNameListPairList :: NameTypeNameListPairList,_originalTree_Syn_NameTypeNameListPairList :: NameTypeNameListPairList}
_wrap_NameTypeNameListPairList :: T_NameTypeNameListPairList ->
                                 Inh_NameTypeNameListPairList ->
                                 Syn_NameTypeNameListPairList
_wrap_NameTypeNameListPairList sem (Inh_NameTypeNameListPairList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_NameTypeNameListPairList _lhsOannotatedTree _lhsOoriginalTree))
_sem_NameTypeNameListPairList_Cons :: T_NameTypeNameListPair ->
                                     T_NameTypeNameListPairList ->
                                     T_NameTypeNameListPairList
_sem_NameTypeNameListPairList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: NameTypeNameListPairList
              _lhsOoriginalTree :: NameTypeNameListPairList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: NameTypeNameListPair
              _hdIoriginalTree :: NameTypeNameListPair
              _tlIannotatedTree :: NameTypeNameListPairList
              _tlIoriginalTree :: NameTypeNameListPairList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 7242 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 7248 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7254 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7260 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7266 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7272 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7278 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7284 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7290 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7296 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_NameTypeNameListPairList_Nil :: T_NameTypeNameListPairList
_sem_NameTypeNameListPairList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: NameTypeNameListPairList
              _lhsOoriginalTree :: NameTypeNameListPairList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 7314 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 7320 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7326 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7332 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- OnExpr ------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : OnExpr 
         originalTree         : OnExpr 
   alternatives:
      alternative Just:
         child just           : JoinExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nothing:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type OnExpr = Maybe (JoinExpr)
-- cata
_sem_OnExpr :: OnExpr ->
              T_OnExpr
_sem_OnExpr (Prelude.Just x) =
    (_sem_OnExpr_Just (_sem_JoinExpr x))
_sem_OnExpr Prelude.Nothing =
    _sem_OnExpr_Nothing
-- semantic domain
type T_OnExpr = Catalog ->
                Environment ->
                TypeCheckingFlags ->
                (Maybe TypeExtra) ->
                ( OnExpr,OnExpr)
data Inh_OnExpr = Inh_OnExpr {_cat_Inh_OnExpr :: Catalog,_downEnv_Inh_OnExpr :: Environment,_flags_Inh_OnExpr :: TypeCheckingFlags,_imCast_Inh_OnExpr :: (Maybe TypeExtra)}
data Syn_OnExpr = Syn_OnExpr {_annotatedTree_Syn_OnExpr :: OnExpr,_originalTree_Syn_OnExpr :: OnExpr}
_wrap_OnExpr :: T_OnExpr ->
               Inh_OnExpr ->
               Syn_OnExpr
_wrap_OnExpr sem (Inh_OnExpr _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast
     in  (Syn_OnExpr _lhsOannotatedTree _lhsOoriginalTree))
_sem_OnExpr_Just :: T_JoinExpr ->
                   T_OnExpr
_sem_OnExpr_Just just_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: OnExpr
              _lhsOoriginalTree :: OnExpr
              _justOcat :: Catalog
              _justOdownEnv :: Environment
              _justOflags :: TypeCheckingFlags
              _justOimCast :: (Maybe TypeExtra)
              _justIannotatedTree :: JoinExpr
              _justIoriginalTree :: JoinExpr
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIannotatedTree
                   {-# LINE 7398 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Just _justIoriginalTree
                   {-# LINE 7404 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7410 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7416 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7422 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOdownEnv =
                  ({-# LINE 215 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 7428 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7434 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _justOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7440 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _justIannotatedTree,_justIoriginalTree) =
                  just_ _justOcat _justOdownEnv _justOflags _justOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_OnExpr_Nothing :: T_OnExpr
_sem_OnExpr_Nothing =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: OnExpr
              _lhsOoriginalTree :: OnExpr
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 7457 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 7463 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7469 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7475 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ParamDef ----------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ParamDef 
         originalTree         : ParamDef 
   alternatives:
      alternative ParamDef:
         child ann            : Annotation 
         child name           : {NameComponent}
         child typ            : TypeName 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ParamDefTp:
         child ann            : Annotation 
         child typ            : TypeName 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data ParamDef = ParamDef (Annotation) (NameComponent) (TypeName)
              | ParamDefTp (Annotation) (TypeName)
              deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_ParamDef :: ParamDef ->
                T_ParamDef
_sem_ParamDef (ParamDef _ann _name _typ) =
    (_sem_ParamDef_ParamDef (_sem_Annotation _ann) _name (_sem_TypeName _typ))
_sem_ParamDef (ParamDefTp _ann _typ) =
    (_sem_ParamDef_ParamDefTp (_sem_Annotation _ann) (_sem_TypeName _typ))
-- semantic domain
type T_ParamDef = Catalog ->
                  TypeCheckingFlags ->
                  (Maybe TypeExtra) ->
                  ( ParamDef,ParamDef)
data Inh_ParamDef = Inh_ParamDef {_cat_Inh_ParamDef :: Catalog,_flags_Inh_ParamDef :: TypeCheckingFlags,_imCast_Inh_ParamDef :: (Maybe TypeExtra)}
data Syn_ParamDef = Syn_ParamDef {_annotatedTree_Syn_ParamDef :: ParamDef,_originalTree_Syn_ParamDef :: ParamDef}
_wrap_ParamDef :: T_ParamDef ->
                 Inh_ParamDef ->
                 Syn_ParamDef
_wrap_ParamDef sem (Inh_ParamDef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ParamDef _lhsOannotatedTree _lhsOoriginalTree))
_sem_ParamDef_ParamDef :: T_Annotation ->
                         NameComponent ->
                         T_TypeName ->
                         T_ParamDef
_sem_ParamDef_ParamDef ann_ name_ typ_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: ParamDef
              _lhsOoriginalTree :: ParamDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 72, column 25)
              _annOtpe =
                  ({-# LINE 72 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 7552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamDef _annIannotatedTree name_ _typIannotatedTree
                   {-# LINE 7558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamDef _annIoriginalTree name_ _typIoriginalTree
                   {-# LINE 7564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7588 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7594 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7600 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7606 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7612 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_ParamDef_ParamDefTp :: T_Annotation ->
                           T_TypeName ->
                           T_ParamDef
_sem_ParamDef_ParamDefTp ann_ typ_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: ParamDef
              _lhsOoriginalTree :: ParamDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 73, column 27)
              _annOtpe =
                  ({-# LINE 73 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 7644 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamDefTp _annIannotatedTree _typIannotatedTree
                   {-# LINE 7650 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamDefTp _annIoriginalTree _typIoriginalTree
                   {-# LINE 7656 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7662 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7668 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7674 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7680 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7686 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7692 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7698 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7704 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ParamDefList ------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ParamDefList 
         originalTree         : ParamDefList 
   alternatives:
      alternative Cons:
         child hd             : ParamDef 
         child tl             : ParamDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ParamDefList = [ParamDef]
-- cata
_sem_ParamDefList :: ParamDefList ->
                    T_ParamDefList
_sem_ParamDefList list =
    (Prelude.foldr _sem_ParamDefList_Cons _sem_ParamDefList_Nil (Prelude.map _sem_ParamDef list))
-- semantic domain
type T_ParamDefList = Catalog ->
                      TypeCheckingFlags ->
                      (Maybe TypeExtra) ->
                      ( ParamDefList,ParamDefList)
data Inh_ParamDefList = Inh_ParamDefList {_cat_Inh_ParamDefList :: Catalog,_flags_Inh_ParamDefList :: TypeCheckingFlags,_imCast_Inh_ParamDefList :: (Maybe TypeExtra)}
data Syn_ParamDefList = Syn_ParamDefList {_annotatedTree_Syn_ParamDefList :: ParamDefList,_originalTree_Syn_ParamDefList :: ParamDefList}
_wrap_ParamDefList :: T_ParamDefList ->
                     Inh_ParamDefList ->
                     Syn_ParamDefList
_wrap_ParamDefList sem (Inh_ParamDefList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ParamDefList _lhsOannotatedTree _lhsOoriginalTree))
_sem_ParamDefList_Cons :: T_ParamDef ->
                         T_ParamDefList ->
                         T_ParamDefList
_sem_ParamDefList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ParamDefList
              _lhsOoriginalTree :: ParamDefList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ParamDef
              _hdIoriginalTree :: ParamDef
              _tlIannotatedTree :: ParamDefList
              _tlIoriginalTree :: ParamDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 7775 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 7781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 7817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 7823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 7829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_ParamDefList_Nil :: T_ParamDefList
_sem_ParamDefList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ParamDefList
              _lhsOoriginalTree :: ParamDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 7847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 7853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 7859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 7865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- QueryExpr ---------------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         expectedType         : Maybe [TypeExtra]
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
         outerDownEnv         : Maybe Environment
      synthesized attributes:
         annotatedTree        : QueryExpr 
         originalTree         : QueryExpr 
         upType               : Maybe [(Text,TypeExtra)]
   alternatives:
      alternative Select:
         child ann            : Annotation 
         child selDistinct    : {Distinct}
         child selSelectList  : SelectList 
         child selTref        : TableRefList 
         child selWhere       : MaybeBoolExpr 
         child selGroupBy     : ScalarExprList 
         child selHaving      : MaybeBoolExpr 
         child selOrderBy     : ScalarExprDirectionPairList 
         child selLimit       : MaybeScalarExpr 
         child selOffset      : MaybeScalarExpr 
         child selOption      : {[QueryHint]}
         visit 0:
            local tpee        : {Either [TypeError] [(Text,TypeExtra)]}
            local tpe         : {Either [TypeError] TypeExtra}
            local selGroupBy  : _
            local annotatedTree : _
            local originalTree : _
      alternative CombineQueryExpr:
         child ann            : Annotation 
         child cqType         : {CombineType}
         child cqQe0          : QueryExpr 
         child cqQe1          : QueryExpr 
         visit 0:
            local tpe         : {Either [TypeError] TypeExtra}
            local tpee        : {Either [TypeError] [(Text,TypeExtra)]}
            local annotatedTree : _
            local originalTree : _
      alternative Values:
         child ann            : Annotation 
         child qeValues       : ScalarExprListList 
         visit 0:
            local tpe         : {Either [TypeError] TypeExtra}
            local tpee        : {Either [TypeError] [(Text,TypeExtra)]}
            local annotatedTree : _
            local originalTree : _
      alternative WithQueryExpr:
         child ann            : Annotation 
         child withs          : WithQueryList 
         child withQe         : QueryExpr 
         visit 0:
            local tpe         : {Either [TypeError] TypeExtra}
            local tpee        : {Either [TypeError] [(Text,TypeExtra)]}
            local annotatedTree : _
            local originalTree : _
-}

data QueryExpr
    = Select { ann:: (Annotation)
             ,selDistinct :: ( Distinct)
             ,selSelectList :: ( SelectList)
             ,selTref :: ( TableRefList)
             ,selWhere :: ( MaybeBoolExpr)
             ,selGroupBy :: ( ScalarExprList)
             ,selHaving :: ( MaybeBoolExpr)
             ,selOrderBy :: ( ScalarExprDirectionPairList)
             ,selLimit :: ( MaybeScalarExpr)
             ,selOffset :: ( MaybeScalarExpr)
             ,selOption :: ( [QueryHint])
        }
    |  CombineQueryExpr { ann:: (Annotation)
                       ,cqType :: ( CombineType)
                       ,cqQe0 :: ( QueryExpr)
                       ,cqQe1 :: ( QueryExpr)
        }
    |  Values { ann:: (Annotation)
             ,qeValues:: (ScalarExprListList)
        }
    |  WithQueryExpr { ann :: ( Annotation)
                    ,withs :: ( WithQueryList)
                    ,withQe :: ( QueryExpr)

-- todo: represent parens explicitly in queryexpr
--    | QueryExprParens ex:: QueryExpr


    } deriving (Eq,Show,Data,Typeable)

-- cata
_sem_QueryExpr :: QueryExpr ->
                 T_QueryExpr
_sem_QueryExpr (Select _ann _selDistinct _selSelectList _selTref _selWhere _selGroupBy _selHaving _selOrderBy _selLimit _selOffset _selOption) =
    (_sem_QueryExpr_Select (_sem_Annotation _ann) _selDistinct (_sem_SelectList _selSelectList) (_sem_TableRefList _selTref) (_sem_MaybeBoolExpr _selWhere) (_sem_ScalarExprList _selGroupBy) (_sem_MaybeBoolExpr _selHaving) (_sem_ScalarExprDirectionPairList _selOrderBy) (_sem_MaybeScalarExpr _selLimit) (_sem_MaybeScalarExpr _selOffset) _selOption)
_sem_QueryExpr (CombineQueryExpr _ann _cqType _cqQe0 _cqQe1) =
    (_sem_QueryExpr_CombineQueryExpr (_sem_Annotation _ann) _cqType (_sem_QueryExpr _cqQe0) (_sem_QueryExpr _cqQe1))
_sem_QueryExpr (Values _ann _qeValues) =
    (_sem_QueryExpr_Values (_sem_Annotation _ann) (_sem_ScalarExprListList _qeValues))
_sem_QueryExpr (WithQueryExpr _ann _withs _withQe) =
    (_sem_QueryExpr_WithQueryExpr (_sem_Annotation _ann) (_sem_WithQueryList _withs) (_sem_QueryExpr _withQe))
-- semantic domain
type T_QueryExpr = Bool ->
                   Catalog ->
                   (Maybe [TypeExtra]) ->
                   TypeCheckingFlags ->
                   (Maybe TypeExtra) ->
                   (Maybe Environment) ->
                   ( QueryExpr,QueryExpr,(Maybe [(Text,TypeExtra)]))
data Inh_QueryExpr = Inh_QueryExpr {_assignmentCastContext_Inh_QueryExpr :: Bool,_cat_Inh_QueryExpr :: Catalog,_expectedType_Inh_QueryExpr :: (Maybe [TypeExtra]),_flags_Inh_QueryExpr :: TypeCheckingFlags,_imCast_Inh_QueryExpr :: (Maybe TypeExtra),_outerDownEnv_Inh_QueryExpr :: (Maybe Environment)}
data Syn_QueryExpr = Syn_QueryExpr {_annotatedTree_Syn_QueryExpr :: QueryExpr,_originalTree_Syn_QueryExpr :: QueryExpr,_upType_Syn_QueryExpr :: (Maybe [(Text,TypeExtra)])}
_wrap_QueryExpr :: T_QueryExpr ->
                  Inh_QueryExpr ->
                  Syn_QueryExpr
_wrap_QueryExpr sem (Inh_QueryExpr _lhsIassignmentCastContext _lhsIcat _lhsIexpectedType _lhsIflags _lhsIimCast _lhsIouterDownEnv) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType) = sem _lhsIassignmentCastContext _lhsIcat _lhsIexpectedType _lhsIflags _lhsIimCast _lhsIouterDownEnv
     in  (Syn_QueryExpr _lhsOannotatedTree _lhsOoriginalTree _lhsOupType))
_sem_QueryExpr_Select :: T_Annotation ->
                        Distinct ->
                        T_SelectList ->
                        T_TableRefList ->
                        T_MaybeBoolExpr ->
                        T_ScalarExprList ->
                        T_MaybeBoolExpr ->
                        T_ScalarExprDirectionPairList ->
                        T_MaybeScalarExpr ->
                        T_MaybeScalarExpr ->
                        ([QueryHint]) ->
                        T_QueryExpr
_sem_QueryExpr_Select ann_ selDistinct_ selSelectList_ selTref_ selWhere_ selGroupBy_ selHaving_ selOrderBy_ selLimit_ selOffset_ selOption_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIouterDownEnv ->
         (let _selGroupByOexpectedCast :: Bool
              _selLimitOdownEnv :: Environment
              _selLimitOexpectedCast :: Bool
              _selOffsetOdownEnv :: Environment
              _selOffsetOexpectedCast :: Bool
              _selSelectListOexpectedCast :: Bool
              _selSelectListOdownEnv :: Environment
              _selGroupByOdownEnv :: Environment
              _selHavingOdownEnv :: Environment
              _selOrderByOdownEnv :: Environment
              _tpee :: (Either [TypeError] [(Text,TypeExtra)])
              _selWhereOdownEnv :: Environment
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _lhsOannotatedTree :: QueryExpr
              _selGroupByOexpectedTypes :: ([TypeExtra])
              _selLimitOexpectedType :: (Maybe TypeExtra)
              _selOffsetOexpectedType :: (Maybe TypeExtra)
              _lhsOoriginalTree :: QueryExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _selSelectListOassignmentCastContext :: Bool
              _selSelectListOcat :: Catalog
              _selSelectListOexpectedType :: (Maybe [TypeExtra])
              _selSelectListOflags :: TypeCheckingFlags
              _selSelectListOimCast :: (Maybe TypeExtra)
              _selTrefOcat :: Catalog
              _selTrefOflags :: TypeCheckingFlags
              _selTrefOimCast :: (Maybe TypeExtra)
              _selWhereOcat :: Catalog
              _selWhereOflags :: TypeCheckingFlags
              _selWhereOimCast :: (Maybe TypeExtra)
              _selGroupByOassignmentCastContext :: Bool
              _selGroupByOcat :: Catalog
              _selGroupByOflags :: TypeCheckingFlags
              _selGroupByOimCast :: (Maybe TypeExtra)
              _selHavingOcat :: Catalog
              _selHavingOflags :: TypeCheckingFlags
              _selHavingOimCast :: (Maybe TypeExtra)
              _selOrderByOcat :: Catalog
              _selOrderByOflags :: TypeCheckingFlags
              _selOrderByOimCast :: (Maybe TypeExtra)
              _selLimitOassignmentCastContext :: Bool
              _selLimitOcat :: Catalog
              _selLimitOflags :: TypeCheckingFlags
              _selLimitOimCast :: (Maybe TypeExtra)
              _selOffsetOassignmentCastContext :: Bool
              _selOffsetOcat :: Catalog
              _selOffsetOflags :: TypeCheckingFlags
              _selOffsetOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selSelectListIannotatedTree :: SelectList
              _selSelectListIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _selSelectListIoriginalTree :: SelectList
              _selSelectListIupEnv :: Environment
              _selSelectListIupType :: (Maybe [(Text,TypeExtra)])
              _selTrefIannotatedTree :: TableRefList
              _selTrefIoriginalTree :: TableRefList
              _selTrefIupEnv :: Environment
              _selWhereIannotatedTree :: MaybeBoolExpr
              _selWhereIoriginalTree :: MaybeBoolExpr
              _selGroupByIannotatedTree :: ScalarExprList
              _selGroupByIoriginalTree :: ScalarExprList
              _selGroupByIupTypes :: ([Maybe TypeExtra])
              _selHavingIannotatedTree :: MaybeBoolExpr
              _selHavingIoriginalTree :: MaybeBoolExpr
              _selOrderByIannotatedTree :: ScalarExprDirectionPairList
              _selOrderByIoriginalTree :: ScalarExprDirectionPairList
              _selLimitIannotatedTree :: MaybeScalarExpr
              _selLimitIoriginalTree :: MaybeScalarExpr
              _selLimitIupType :: (Maybe TypeExtra)
              _selOffsetIannotatedTree :: MaybeScalarExpr
              _selOffsetIoriginalTree :: MaybeScalarExpr
              _selOffsetIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 74, column 24)
              _selGroupByOexpectedCast =
                  ({-# LINE 74 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 8061 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 75, column 24)
              _selLimitOdownEnv =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 8067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 76, column 24)
              _selLimitOexpectedCast =
                  ({-# LINE 76 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 8073 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 77, column 24)
              _selOffsetOdownEnv =
                  ({-# LINE 77 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 8079 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 78, column 24)
              _selOffsetOexpectedCast =
                  ({-# LINE 78 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 8085 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 79, column 24)
              _selSelectListOexpectedCast =
                  ({-# LINE 79 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 8091 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 106, column 9)
              _selSelectListOdownEnv =
                  ({-# LINE 106 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _selTrefIupEnv
                   {-# LINE 8097 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 107, column 9)
              _selGroupByOdownEnv =
                  ({-# LINE 107 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _selTrefIupEnv
                   {-# LINE 8103 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 108, column 9)
              _selHavingOdownEnv =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _selTrefIupEnv
                   {-# LINE 8109 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 128, column 9)
              _selOrderByOdownEnv =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   E.orderByEnvironment _selSelectListIupEnv _selTrefIupEnv
                   {-# LINE 8115 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 129, column 9)
              _tpee =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   maybe (Left []) Right _selSelectListIupType
                   {-# LINE 8121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 132, column 9)
              _selWhereOdownEnv =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   maybe _selTrefIupEnv
                    (\e -> E.createCorrelatedSubqueryEnvironment e _selTrefIupEnv)
                    _lhsIouterDownEnv
                   {-# LINE 8129 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 142, column 9)
              _tpe =
                  ({-# LINE 142 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM (mkTypeExtra . CompositeType) _tpee
                   {-# LINE 8135 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 145, column 9)
              _lhsOupType =
                  ({-# LINE 145 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   either (const Nothing) Just _tpee
                   {-# LINE 8141 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 239, column 9)
              _selGroupBy =
                  ({-# LINE 239 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   case _selGroupByIannotatedTree of
                       [App e nm@(Name _ [Nmc "cube"]) es] ->
                         [App e{anType = (Just (mkTypeExtra $ ScalarType "int4"))
                               ,anErrs = []
                               } nm es]
                       x -> x
                   {-# LINE 8152 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 248, column 9)
              _lhsOannotatedTree =
                  ({-# LINE 248 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Select _annIannotatedTree
                          selDistinct_
                          _selSelectListIannotatedTree
                          _selTrefIannotatedTree
                          _selWhereIannotatedTree
                          _selGroupBy
                          _selHavingIannotatedTree
                          _selOrderByIannotatedTree
                          _selLimitIannotatedTree
                          _selOffsetIannotatedTree
                          selOption_
                   {-# LINE 8168 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 771, column 7)
              _selGroupByOexpectedTypes =
                  ({-# LINE 771 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 8174 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 772, column 7)
              _selLimitOexpectedType =
                  ({-# LINE 772 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 8180 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 773, column 7)
              _selOffsetOexpectedType =
                  ({-# LINE 773 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 8186 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Select _annIannotatedTree selDistinct_ _selSelectListIannotatedTree _selTrefIannotatedTree _selWhereIannotatedTree _selGroupByIannotatedTree _selHavingIannotatedTree _selOrderByIannotatedTree _selLimitIannotatedTree _selOffsetIannotatedTree selOption_
                   {-# LINE 8192 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Select _annIoriginalTree selDistinct_ _selSelectListIoriginalTree _selTrefIoriginalTree _selWhereIoriginalTree _selGroupByIoriginalTree _selHavingIoriginalTree _selOrderByIoriginalTree _selLimitIoriginalTree _selOffsetIoriginalTree selOption_
                   {-# LINE 8198 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8204 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8210 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8216 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8222 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 8228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selSelectListOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 8234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selSelectListOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selSelectListOexpectedType =
                  ({-# LINE 159 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 8246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selSelectListOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selSelectListOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selTrefOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8264 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selTrefOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8270 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selTrefOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8276 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selWhereOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selWhereOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8288 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selWhereOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8294 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selGroupByOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 8300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selGroupByOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selGroupByOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selGroupByOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selHavingOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selHavingOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selHavingOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOrderByOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOrderByOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOrderByOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8354 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selLimitOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 8360 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selLimitOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8366 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selLimitOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selLimitOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8378 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOffsetOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 8384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOffsetOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8390 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOffsetOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8396 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOffsetOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selSelectListIannotatedTree,_selSelectListIcolExprs,_selSelectListIoriginalTree,_selSelectListIupEnv,_selSelectListIupType) =
                  selSelectList_ _selSelectListOassignmentCastContext _selSelectListOcat _selSelectListOdownEnv _selSelectListOexpectedCast _selSelectListOexpectedType _selSelectListOflags _selSelectListOimCast
              ( _selTrefIannotatedTree,_selTrefIoriginalTree,_selTrefIupEnv) =
                  selTref_ _selTrefOcat _selTrefOflags _selTrefOimCast
              ( _selWhereIannotatedTree,_selWhereIoriginalTree) =
                  selWhere_ _selWhereOcat _selWhereOdownEnv _selWhereOflags _selWhereOimCast
              ( _selGroupByIannotatedTree,_selGroupByIoriginalTree,_selGroupByIupTypes) =
                  selGroupBy_ _selGroupByOassignmentCastContext _selGroupByOcat _selGroupByOdownEnv _selGroupByOexpectedCast _selGroupByOexpectedTypes _selGroupByOflags _selGroupByOimCast
              ( _selHavingIannotatedTree,_selHavingIoriginalTree) =
                  selHaving_ _selHavingOcat _selHavingOdownEnv _selHavingOflags _selHavingOimCast
              ( _selOrderByIannotatedTree,_selOrderByIoriginalTree) =
                  selOrderBy_ _selOrderByOcat _selOrderByOdownEnv _selOrderByOflags _selOrderByOimCast
              ( _selLimitIannotatedTree,_selLimitIoriginalTree,_selLimitIupType) =
                  selLimit_ _selLimitOassignmentCastContext _selLimitOcat _selLimitOdownEnv _selLimitOexpectedCast _selLimitOexpectedType _selLimitOflags _selLimitOimCast
              ( _selOffsetIannotatedTree,_selOffsetIoriginalTree,_selOffsetIupType) =
                  selOffset_ _selOffsetOassignmentCastContext _selOffsetOcat _selOffsetOdownEnv _selOffsetOexpectedCast _selOffsetOexpectedType _selOffsetOflags _selOffsetOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
_sem_QueryExpr_CombineQueryExpr :: T_Annotation ->
                                  CombineType ->
                                  T_QueryExpr ->
                                  T_QueryExpr ->
                                  T_QueryExpr
_sem_QueryExpr_CombineQueryExpr ann_ cqType_ cqQe0_ cqQe1_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIouterDownEnv ->
         (let _tpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _tpee :: (Either [TypeError] [(Text,TypeExtra)])
              _lhsOannotatedTree :: QueryExpr
              _lhsOoriginalTree :: QueryExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _cqQe0OassignmentCastContext :: Bool
              _cqQe0Ocat :: Catalog
              _cqQe0OexpectedType :: (Maybe [TypeExtra])
              _cqQe0Oflags :: TypeCheckingFlags
              _cqQe0OimCast :: (Maybe TypeExtra)
              _cqQe0OouterDownEnv :: (Maybe Environment)
              _cqQe1OassignmentCastContext :: Bool
              _cqQe1Ocat :: Catalog
              _cqQe1OexpectedType :: (Maybe [TypeExtra])
              _cqQe1Oflags :: TypeCheckingFlags
              _cqQe1OimCast :: (Maybe TypeExtra)
              _cqQe1OouterDownEnv :: (Maybe Environment)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _cqQe0IannotatedTree :: QueryExpr
              _cqQe0IoriginalTree :: QueryExpr
              _cqQe0IupType :: (Maybe [(Text,TypeExtra)])
              _cqQe1IannotatedTree :: QueryExpr
              _cqQe1IoriginalTree :: QueryExpr
              _cqQe1IupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 142, column 9)
              _tpe =
                  ({-# LINE 142 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM (mkTypeExtra . CompositeType) _tpee
                   {-# LINE 8468 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 145, column 9)
              _lhsOupType =
                  ({-# LINE 145 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   either (const Nothing) Just _tpee
                   {-# LINE 8474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 156, column 9)
              _tpee =
                  ({-# LINE 156 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   do
                   a <- maybe (Left []) Right _cqQe0IupType
                   b <- maybe (Left []) Right _cqQe1IupType
                   unless (length a == length b) $ Left [IncompatibleUnionTypes (CompositeType a) (CompositeType b)]
                   let uts = zipWithM (\(_,te1) (_,te2) -> resolveResultSetTypeExtra _lhsIcat [te1,te2])
                                 a b
                   case uts of
                     Left{} -> Left [IncompatibleUnionTypes (CompositeType a) (CompositeType b)]
                     Right uts' -> return $ zipWith (\(n,_) te -> (n,te)) a uts'
                   {-# LINE 8488 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CombineQueryExpr _annIannotatedTree cqType_ _cqQe0IannotatedTree _cqQe1IannotatedTree
                   {-# LINE 8494 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CombineQueryExpr _annIoriginalTree cqType_ _cqQe0IoriginalTree _cqQe1IoriginalTree
                   {-# LINE 8500 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 8506 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8512 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8518 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8524 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8530 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 8536 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe0OassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 8542 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe0Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8548 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe0OexpectedType =
                  ({-# LINE 18 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 8554 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe0Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8560 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe0OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8566 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe0OouterDownEnv =
                  ({-# LINE 89 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIouterDownEnv
                   {-# LINE 8572 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe1OassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 8578 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe1Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8584 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe1OexpectedType =
                  ({-# LINE 18 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 8590 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe1Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8596 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe1OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8602 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _cqQe1OouterDownEnv =
                  ({-# LINE 89 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIouterDownEnv
                   {-# LINE 8608 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _cqQe0IannotatedTree,_cqQe0IoriginalTree,_cqQe0IupType) =
                  cqQe0_ _cqQe0OassignmentCastContext _cqQe0Ocat _cqQe0OexpectedType _cqQe0Oflags _cqQe0OimCast _cqQe0OouterDownEnv
              ( _cqQe1IannotatedTree,_cqQe1IoriginalTree,_cqQe1IupType) =
                  cqQe1_ _cqQe1OassignmentCastContext _cqQe1Ocat _cqQe1OexpectedType _cqQe1Oflags _cqQe1OimCast _cqQe1OouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
_sem_QueryExpr_Values :: T_Annotation ->
                        T_ScalarExprListList ->
                        T_QueryExpr
_sem_QueryExpr_Values ann_ qeValues_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIouterDownEnv ->
         (let _qeValuesOdownEnv :: Environment
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _tpee :: (Either [TypeError] [(Text,TypeExtra)])
              _qeValuesOexpectedCast :: Bool
              _lhsOannotatedTree :: QueryExpr
              _lhsOoriginalTree :: QueryExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _qeValuesOassignmentCastContext :: Bool
              _qeValuesOcat :: Catalog
              _qeValuesOexpectedType :: (Maybe [TypeExtra])
              _qeValuesOflags :: TypeCheckingFlags
              _qeValuesOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _qeValuesIannotatedTree :: ScalarExprListList
              _qeValuesIoriginalTree :: ScalarExprListList
              _qeValuesIupType :: (Either [TypeError] [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 80, column 24)
              _qeValuesOdownEnv =
                  ({-# LINE 80 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 8652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 142, column 9)
              _tpe =
                  ({-# LINE 142 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM (mkTypeExtra . CompositeType) _tpee
                   {-# LINE 8658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 145, column 9)
              _lhsOupType =
                  ({-# LINE 145 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   either (const Nothing) Just _tpee
                   {-# LINE 8664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 153, column 9)
              _tpee =
                  ({-# LINE 153 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _qeValuesIupType
                   {-# LINE 8670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 154, column 9)
              _qeValuesOexpectedCast =
                  ({-# LINE 154 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   True
                   {-# LINE 8676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Values _annIannotatedTree _qeValuesIannotatedTree
                   {-# LINE 8682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Values _annIoriginalTree _qeValuesIoriginalTree
                   {-# LINE 8688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 8694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8718 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 8724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _qeValuesOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 8730 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _qeValuesOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8736 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _qeValuesOexpectedType =
                  ({-# LINE 186 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 8742 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _qeValuesOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8748 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _qeValuesOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8754 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _qeValuesIannotatedTree,_qeValuesIoriginalTree,_qeValuesIupType) =
                  qeValues_ _qeValuesOassignmentCastContext _qeValuesOcat _qeValuesOdownEnv _qeValuesOexpectedCast _qeValuesOexpectedType _qeValuesOflags _qeValuesOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
_sem_QueryExpr_WithQueryExpr :: T_Annotation ->
                               T_WithQueryList ->
                               T_QueryExpr ->
                               T_QueryExpr
_sem_QueryExpr_WithQueryExpr ann_ withs_ withQe_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIouterDownEnv ->
         (let _withQeOcat :: Catalog
              _withsOcatExtIncomp :: (Either [TypeError] Catalog)
              _lhsOannotatedTree :: QueryExpr
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _tpee :: (Either [TypeError] [(Text,TypeExtra)])
              _lhsOoriginalTree :: QueryExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _withsOcat :: Catalog
              _withsOflags :: TypeCheckingFlags
              _withsOimCast :: (Maybe TypeExtra)
              _withQeOassignmentCastContext :: Bool
              _withQeOexpectedType :: (Maybe [TypeExtra])
              _withQeOflags :: TypeCheckingFlags
              _withQeOimCast :: (Maybe TypeExtra)
              _withQeOouterDownEnv :: (Maybe Environment)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _withsIannotatedTree :: WithQueryList
              _withsIcatExtComp :: (Either [TypeError] Catalog)
              _withsIoriginalTree :: WithQueryList
              _withQeIannotatedTree :: QueryExpr
              _withQeIoriginalTree :: QueryExpr
              _withQeIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 70, column 8)
              _withQeOcat =
                  ({-# LINE 70 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   case _withsIcatExtComp of
                     Right catExtComp -> catExtComp
                     Left _ -> _lhsIcat
                   {-# LINE 8805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 74, column 8)
              _withsOcatExtIncomp =
                  ({-# LINE 74 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   return _lhsIcat
                   {-# LINE 8811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 76, column 8)
              _lhsOannotatedTree =
                  ({-# LINE 76 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   case _withsIcatExtComp of
                     Right _ -> WithQueryExpr (_annIannotatedTree) (_withsIannotatedTree) (_withQeIannotatedTree)
                     Left tyErrs -> WithQueryExpr (emptyAnnotation { anType = Nothing, anErrs = tyErrs })
                       (_withsIannotatedTree) (_withQeIannotatedTree)
                   {-# LINE 8820 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 142, column 9)
              _tpe =
                  ({-# LINE 142 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM (mkTypeExtra . CompositeType) _tpee
                   {-# LINE 8826 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 145, column 9)
              _lhsOupType =
                  ({-# LINE 145 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   either (const Nothing) Just _tpee
                   {-# LINE 8832 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 151, column 9)
              _tpee =
                  ({-# LINE 151 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   maybe (Left []) Right _withQeIupType
                   {-# LINE 8838 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WithQueryExpr _annIannotatedTree _withsIannotatedTree _withQeIannotatedTree
                   {-# LINE 8844 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WithQueryExpr _annIoriginalTree _withsIoriginalTree _withQeIoriginalTree
                   {-# LINE 8850 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 8856 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8862 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8868 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8874 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _annOtpe =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _tpe
                   {-# LINE 8880 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 8886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withQeOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 8904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withQeOexpectedType =
                  ({-# LINE 18 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 8910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withQeOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 8916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withQeOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 8922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _withQeOouterDownEnv =
                  ({-# LINE 89 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIouterDownEnv
                   {-# LINE 8928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _withsIannotatedTree,_withsIcatExtComp,_withsIoriginalTree) =
                  withs_ _withsOcat _withsOcatExtIncomp _withsOflags _withsOimCast
              ( _withQeIannotatedTree,_withQeIoriginalTree,_withQeIupType) =
                  withQe_ _withQeOassignmentCastContext _withQeOcat _withQeOexpectedType _withQeOflags _withQeOimCast _withQeOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
-- Root --------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
      synthesized attributes:
         annotatedTree        : Root 
         originalTree         : Root 
   alternatives:
      alternative Root:
         child statements     : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data Root = Root (StatementList)
          deriving ( Show)
-- cata
_sem_Root :: Root ->
            T_Root
_sem_Root (Root _statements) =
    (_sem_Root_Root (_sem_StatementList _statements))
-- semantic domain
type T_Root = Catalog ->
              TypeCheckingFlags ->
              ( Root,Root)
data Inh_Root = Inh_Root {_cat_Inh_Root :: Catalog,_flags_Inh_Root :: TypeCheckingFlags}
data Syn_Root = Syn_Root {_annotatedTree_Syn_Root :: Root,_originalTree_Syn_Root :: Root}
_wrap_Root :: T_Root ->
             Inh_Root ->
             Syn_Root
_wrap_Root sem (Inh_Root _lhsIcat _lhsIflags) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags
     in  (Syn_Root _lhsOannotatedTree _lhsOoriginalTree))
_sem_Root_Root :: T_StatementList ->
                 T_Root
_sem_Root_Root statements_ =
    (\ _lhsIcat
       _lhsIflags ->
         (let _statementsOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: Root
              _lhsOoriginalTree :: Root
              _statementsOcat :: Catalog
              _statementsOflags :: TypeCheckingFlags
              _statementsIannotatedTree :: StatementList
              _statementsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag"(line 136, column 8)
              _statementsOimCast =
                  ({-# LINE 136 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 8988 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Root _statementsIannotatedTree
                   {-# LINE 8994 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Root _statementsIoriginalTree
                   {-# LINE 9000 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _statementsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9018 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _statementsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9024 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _statementsIannotatedTree,_statementsIoriginalTree) =
                  statements_ _statementsOcat _statementsOflags _statementsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- RowConstraint -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : RowConstraint 
         originalTree         : RowConstraint 
   alternatives:
      alternative NullConstraint:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative NotNullConstraint:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative IdentityConstraint:
         child ann            : Annotation 
         child name           : {String}
         child seedAndInc     : {(Maybe (Integer,Integer))}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RowCheckConstraint:
         child ann            : Annotation 
         child name           : {String}
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RowUniqueConstraint:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RowPrimaryKeyConstraint:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative RowReferenceConstraint:
         child ann            : Annotation 
         child name           : {String}
         child table          : Name 
         child att            : {Maybe NameComponent}
         child onUpdate       : {Cascade}
         child onDelete       : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data RowConstraint = NullConstraint (Annotation) (String)
                   | NotNullConstraint (Annotation) (String)
                   | IdentityConstraint (Annotation) (String) (((Maybe (Integer,Integer))))
                   | RowCheckConstraint (Annotation) (String) (ScalarExpr)
                   | RowUniqueConstraint (Annotation) (String)
                   | RowPrimaryKeyConstraint (Annotation) (String)
                   | RowReferenceConstraint (Annotation) (String) (Name) ((Maybe NameComponent)) (Cascade) (Cascade)
                   deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_RowConstraint :: RowConstraint ->
                     T_RowConstraint
_sem_RowConstraint (NullConstraint _ann _name) =
    (_sem_RowConstraint_NullConstraint (_sem_Annotation _ann) _name)
_sem_RowConstraint (NotNullConstraint _ann _name) =
    (_sem_RowConstraint_NotNullConstraint (_sem_Annotation _ann) _name)
_sem_RowConstraint (IdentityConstraint _ann _name _seedAndInc) =
    (_sem_RowConstraint_IdentityConstraint (_sem_Annotation _ann) _name _seedAndInc)
_sem_RowConstraint (RowCheckConstraint _ann _name _expr) =
    (_sem_RowConstraint_RowCheckConstraint (_sem_Annotation _ann) _name (_sem_ScalarExpr _expr))
_sem_RowConstraint (RowUniqueConstraint _ann _name) =
    (_sem_RowConstraint_RowUniqueConstraint (_sem_Annotation _ann) _name)
_sem_RowConstraint (RowPrimaryKeyConstraint _ann _name) =
    (_sem_RowConstraint_RowPrimaryKeyConstraint (_sem_Annotation _ann) _name)
_sem_RowConstraint (RowReferenceConstraint _ann _name _table _att _onUpdate _onDelete) =
    (_sem_RowConstraint_RowReferenceConstraint (_sem_Annotation _ann) _name (_sem_Name _table) _att _onUpdate _onDelete)
-- semantic domain
type T_RowConstraint = Catalog ->
                       TypeCheckingFlags ->
                       (Maybe TypeExtra) ->
                       ( RowConstraint,RowConstraint)
data Inh_RowConstraint = Inh_RowConstraint {_cat_Inh_RowConstraint :: Catalog,_flags_Inh_RowConstraint :: TypeCheckingFlags,_imCast_Inh_RowConstraint :: (Maybe TypeExtra)}
data Syn_RowConstraint = Syn_RowConstraint {_annotatedTree_Syn_RowConstraint :: RowConstraint,_originalTree_Syn_RowConstraint :: RowConstraint}
_wrap_RowConstraint :: T_RowConstraint ->
                      Inh_RowConstraint ->
                      Syn_RowConstraint
_wrap_RowConstraint sem (Inh_RowConstraint _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_RowConstraint _lhsOannotatedTree _lhsOoriginalTree))
_sem_RowConstraint_NullConstraint :: T_Annotation ->
                                    String ->
                                    T_RowConstraint
_sem_RowConstraint_NullConstraint ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 83, column 36)
              _annOtpe =
                  ({-# LINE 83 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 9146 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullConstraint _annIannotatedTree name_
                   {-# LINE 9152 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullConstraint _annIoriginalTree name_
                   {-# LINE 9158 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9164 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9170 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9176 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9182 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 9188 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraint_NotNullConstraint :: T_Annotation ->
                                       String ->
                                       T_RowConstraint
_sem_RowConstraint_NotNullConstraint ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 82, column 39)
              _annOtpe =
                  ({-# LINE 82 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 9212 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NotNullConstraint _annIannotatedTree name_
                   {-# LINE 9218 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NotNullConstraint _annIoriginalTree name_
                   {-# LINE 9224 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9230 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9236 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9242 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9248 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 9254 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraint_IdentityConstraint :: T_Annotation ->
                                        String ->
                                        ((Maybe (Integer,Integer))) ->
                                        T_RowConstraint
_sem_RowConstraint_IdentityConstraint ann_ name_ seedAndInc_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 81, column 40)
              _annOtpe =
                  ({-# LINE 81 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 9279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   IdentityConstraint _annIannotatedTree name_ seedAndInc_
                   {-# LINE 9285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   IdentityConstraint _annIoriginalTree name_ seedAndInc_
                   {-# LINE 9291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9303 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9309 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9315 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 9321 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraint_RowCheckConstraint :: T_Annotation ->
                                        String ->
                                        T_ScalarExpr ->
                                        T_RowConstraint
_sem_RowConstraint_RowCheckConstraint ann_ name_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 84, column 40)
              _annOtpe =
                  ({-# LINE 84 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 9358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 85, column 40)
              _exprOdownEnv =
                  ({-# LINE 85 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 9364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 86, column 40)
              _exprOexpectedCast =
                  ({-# LINE 86 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 9370 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 87, column 40)
              _exprOexpectedType =
                  ({-# LINE 87 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 9376 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 155, column 26)
              _exprOodbcFunction =
                  ({-# LINE 155 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 9382 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 821, column 40)
              _exprOassignmentCastContext =
                  ({-# LINE 821 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 9388 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowCheckConstraint _annIannotatedTree name_ _exprIannotatedTree
                   {-# LINE 9394 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowCheckConstraint _annIoriginalTree name_ _exprIoriginalTree
                   {-# LINE 9400 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9406 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9412 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9418 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9424 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 9430 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9436 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9442 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 9448 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraint_RowUniqueConstraint :: T_Annotation ->
                                         String ->
                                         T_RowConstraint
_sem_RowConstraint_RowUniqueConstraint ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 91, column 41)
              _annOtpe =
                  ({-# LINE 91 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 9474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowUniqueConstraint _annIannotatedTree name_
                   {-# LINE 9480 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowUniqueConstraint _annIoriginalTree name_
                   {-# LINE 9486 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9498 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9504 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9510 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 9516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraint_RowPrimaryKeyConstraint :: T_Annotation ->
                                             String ->
                                             T_RowConstraint
_sem_RowConstraint_RowPrimaryKeyConstraint ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 88, column 45)
              _annOtpe =
                  ({-# LINE 88 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 9540 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowPrimaryKeyConstraint _annIannotatedTree name_
                   {-# LINE 9546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowPrimaryKeyConstraint _annIoriginalTree name_
                   {-# LINE 9552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 9582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraint_RowReferenceConstraint :: T_Annotation ->
                                            String ->
                                            T_Name ->
                                            (Maybe NameComponent) ->
                                            Cascade ->
                                            Cascade ->
                                            T_RowConstraint
_sem_RowConstraint_RowReferenceConstraint ann_ name_ table_ att_ onUpdate_ onDelete_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _tableOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: RowConstraint
              _lhsOoriginalTree :: RowConstraint
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckingFlags
              _tableOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tableIannotatedTree :: Name
              _tableIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 89, column 44)
              _annOtpe =
                  ({-# LINE 89 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 9616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 90, column 44)
              _tableOtpe =
                  ({-# LINE 90 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 9622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowReferenceConstraint _annIannotatedTree name_ _tableIannotatedTree att_ onUpdate_ onDelete_
                   {-# LINE 9628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   RowReferenceConstraint _annIoriginalTree name_ _tableIoriginalTree att_ onUpdate_ onDelete_
                   {-# LINE 9634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 9664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 9682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- RowConstraintList -------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : RowConstraintList 
         originalTree         : RowConstraintList 
   alternatives:
      alternative Cons:
         child hd             : RowConstraint 
         child tl             : RowConstraintList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type RowConstraintList = [RowConstraint]
-- cata
_sem_RowConstraintList :: RowConstraintList ->
                         T_RowConstraintList
_sem_RowConstraintList list =
    (Prelude.foldr _sem_RowConstraintList_Cons _sem_RowConstraintList_Nil (Prelude.map _sem_RowConstraint list))
-- semantic domain
type T_RowConstraintList = Catalog ->
                           TypeCheckingFlags ->
                           (Maybe TypeExtra) ->
                           ( RowConstraintList,RowConstraintList)
data Inh_RowConstraintList = Inh_RowConstraintList {_cat_Inh_RowConstraintList :: Catalog,_flags_Inh_RowConstraintList :: TypeCheckingFlags,_imCast_Inh_RowConstraintList :: (Maybe TypeExtra)}
data Syn_RowConstraintList = Syn_RowConstraintList {_annotatedTree_Syn_RowConstraintList :: RowConstraintList,_originalTree_Syn_RowConstraintList :: RowConstraintList}
_wrap_RowConstraintList :: T_RowConstraintList ->
                          Inh_RowConstraintList ->
                          Syn_RowConstraintList
_wrap_RowConstraintList sem (Inh_RowConstraintList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_RowConstraintList _lhsOannotatedTree _lhsOoriginalTree))
_sem_RowConstraintList_Cons :: T_RowConstraint ->
                              T_RowConstraintList ->
                              T_RowConstraintList
_sem_RowConstraintList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: RowConstraintList
              _lhsOoriginalTree :: RowConstraintList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: RowConstraint
              _hdIoriginalTree :: RowConstraint
              _tlIannotatedTree :: RowConstraintList
              _tlIoriginalTree :: RowConstraintList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 9753 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 9759 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9765 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9771 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9777 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9783 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 9789 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 9795 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 9801 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 9807 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_RowConstraintList_Nil :: T_RowConstraintList
_sem_RowConstraintList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: RowConstraintList
              _lhsOoriginalTree :: RowConstraintList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 9825 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 9831 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 9837 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 9843 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExpr --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe TypeExtra
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
         odbcFunction         : Bool
      synthesized attributes:
         annotatedTree        : ScalarExpr 
         colExprs             : [(NameComponent,Maybe TypeExtra,ScalarExpr)]
         originalTree         : ScalarExpr 
         upType               : Maybe TypeExtra
   alternatives:
      alternative NumberLit:
         child ann            : Annotation 
         child d              : {String}
         visit 0:
            local upType      : _
            local tpe         : _
            local digChars    : _
            local annotatedTree : _
            local originalTree : _
      alternative StringLit:
         child ann            : Annotation 
         child value          : {String}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative NullLit:
         child ann            : Annotation 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative BooleanLit:
         child ann            : Annotation 
         child b              : {Bool}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative TypedStringLit:
         child ann            : Annotation 
         child tn             : TypeName 
         child value          : {String}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Interval:
         child ann            : Annotation 
         child value          : {String}
         child field          : {IntervalField}
         child prec           : {Maybe Int}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Extract:
         child ann            : Annotation 
         child field          : {ExtractField}
         child e              : ScalarExpr 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative PositionalArg:
         child ann            : Annotation 
         child p              : {Integer}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Placeholder:
         child ann            : Annotation 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Cast:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         child tn             : TypeName 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative ImplicitCast:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         child te             : {TypeExtra}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Star:
         child ann            : Annotation 
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] TypeExtra}
            local starCS      : _
            local annotatedTree : _
            local originalTree : _
      alternative QStar:
         child ann            : Annotation 
         child q              : {NameComponent}
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] TypeExtra}
            local starCS      : _
            local annotatedTree : _
            local originalTree : _
      alternative Identifier:
         child ann            : Annotation 
         child i              : Name 
         visit 0:
            local upType      : _
            local elkp        : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Case:
         child ann            : Annotation 
         child cases          : CaseScalarExprListScalarExprPairList 
         child els            : MaybeScalarExpr 
         visit 0:
            local upType      : _
            local whenTypes   : _
            local thenTypes   : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative CaseSimple:
         child ann            : Annotation 
         child value          : ScalarExpr 
         child cases          : CaseScalarExprListScalarExprPairList 
         child els            : MaybeScalarExpr 
         visit 0:
            local upType      : _
            local whenTypes   : _
            local thenTypes   : _
            local whent       : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Exists:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative App:
         child ann            : Annotation 
         child funName        : Name 
         child args           : ScalarExprList 
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] TypeExtra}
            local funName     : _
            local ttpe        : {Either [TypeError] ([TypeExtra],TypeExtra)}
            local annotatedTree : _
            local originalTree : _
      alternative PrefixOp:
         child ann            : Annotation 
         child opName         : Name 
         child arg            : ScalarExpr 
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] TypeExtra}
            local ttpe        : {Either [TypeError] ([TypeExtra],TypeExtra)}
            local annotatedTree : _
            local originalTree : _
      alternative PostfixOp:
         child ann            : Annotation 
         child opName         : Name 
         child arg            : ScalarExpr 
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] TypeExtra}
            local ttpe        : {Either [TypeError] ([TypeExtra],TypeExtra)}
            local annotatedTree : _
            local originalTree : _
      alternative BinaryOp:
         child ann            : Annotation 
         child opName         : Name 
         child arg0           : ScalarExpr 
         child arg1           : ScalarExpr 
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] TypeExtra}
            local ttpe        : {Either [TypeError] ([TypeExtra],TypeExtra)}
            local annotatedTree : _
            local originalTree : _
      alternative SpecialOp:
         child ann            : Annotation 
         child opName         : Name 
         child args           : ScalarExprList 
         visit 0:
            local upType      : _
            local tpe         : {Either [TypeError] TypeExtra}
            local ttpe        : {Either [TypeError] ([TypeExtra],TypeExtra)}
            local annotatedTree : _
            local originalTree : _
      alternative AggregateApp:
         child ann            : Annotation 
         child aggDistinct    : {Distinct}
         child fn             : ScalarExpr 
         child orderBy        : ScalarExprDirectionPairList 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative WindowApp:
         child ann            : Annotation 
         child fn             : ScalarExpr 
         child partitionBy    : ScalarExprList 
         child orderBy        : ScalarExprDirectionPairList 
         child frm            : {Maybe FrameClause}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative InPredicate:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         child i              : {Bool}
         child list           : InList 
         visit 0:
            local upType      : _
            local rt          : {Either [TypeError] TypeExtra}
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative LiftApp:
         child ann            : Annotation 
         child oper           : Name 
         child flav           : {LiftFlavour}
         child args           : ScalarExprList 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative ScalarSubQuery:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative AntiScalarExpr:
         child string         : {String}
         visit 0:
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative Parens:
         child ann            : Annotation 
         child ex             : ScalarExpr 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative OdbcLiteral:
         child ann            : Annotation 
         child olt            : {OdbcLiteralType}
         child val            : {String}
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
      alternative OdbcFunc:
         child ann            : Annotation 
         child ex             : ScalarExpr 
         visit 0:
            local upType      : _
            local tpe         : _
            local annotatedTree : _
            local originalTree : _
-}
data ScalarExpr = NumberLit (Annotation) (String)
                | StringLit (Annotation) (String)
                | NullLit (Annotation)
                | BooleanLit (Annotation) (Bool)
                | TypedStringLit (Annotation) (TypeName) (String)
                | Interval (Annotation) (String) (IntervalField) ((Maybe Int))
                | Extract (Annotation) (ExtractField) (ScalarExpr)
                | PositionalArg (Annotation) (Integer)
                | Placeholder (Annotation)
                | Cast (Annotation) (ScalarExpr) (TypeName)
                | ImplicitCast (Annotation) (ScalarExpr) (TypeExtra)
                | Star (Annotation)
                | QStar (Annotation) (NameComponent)
                | Identifier (Annotation) (Name)
                | Case (Annotation) (CaseScalarExprListScalarExprPairList) (MaybeScalarExpr)
                | CaseSimple (Annotation) (ScalarExpr) (CaseScalarExprListScalarExprPairList) (MaybeScalarExpr)
                | Exists (Annotation) (QueryExpr)
                | App (Annotation) (Name) (ScalarExprList)
                | PrefixOp (Annotation) (Name) (ScalarExpr)
                | PostfixOp (Annotation) (Name) (ScalarExpr)
                | BinaryOp (Annotation) (Name) (ScalarExpr) (ScalarExpr)
                | SpecialOp (Annotation) (Name) (ScalarExprList)
                | AggregateApp (Annotation) (Distinct) (ScalarExpr) (ScalarExprDirectionPairList)
                | WindowApp (Annotation) (ScalarExpr) (ScalarExprList) (ScalarExprDirectionPairList) ((Maybe FrameClause))
                | InPredicate (Annotation) (ScalarExpr) (Bool) (InList)
                | LiftApp (Annotation) (Name) (LiftFlavour) (ScalarExprList)
                | ScalarSubQuery (Annotation) (QueryExpr)
                | AntiScalarExpr (String)
                | Parens (Annotation) (ScalarExpr)
                | OdbcLiteral (Annotation) (OdbcLiteralType) (String)
                | OdbcFunc (Annotation) (ScalarExpr)
                deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_ScalarExpr :: ScalarExpr ->
                  T_ScalarExpr
_sem_ScalarExpr (NumberLit _ann _d) =
    (_sem_ScalarExpr_NumberLit (_sem_Annotation _ann) _d)
_sem_ScalarExpr (StringLit _ann _value) =
    (_sem_ScalarExpr_StringLit (_sem_Annotation _ann) _value)
_sem_ScalarExpr (NullLit _ann) =
    (_sem_ScalarExpr_NullLit (_sem_Annotation _ann))
_sem_ScalarExpr (BooleanLit _ann _b) =
    (_sem_ScalarExpr_BooleanLit (_sem_Annotation _ann) _b)
_sem_ScalarExpr (TypedStringLit _ann _tn _value) =
    (_sem_ScalarExpr_TypedStringLit (_sem_Annotation _ann) (_sem_TypeName _tn) _value)
_sem_ScalarExpr (Interval _ann _value _field _prec) =
    (_sem_ScalarExpr_Interval (_sem_Annotation _ann) _value _field _prec)
_sem_ScalarExpr (Extract _ann _field _e) =
    (_sem_ScalarExpr_Extract (_sem_Annotation _ann) _field (_sem_ScalarExpr _e))
_sem_ScalarExpr (PositionalArg _ann _p) =
    (_sem_ScalarExpr_PositionalArg (_sem_Annotation _ann) _p)
_sem_ScalarExpr (Placeholder _ann) =
    (_sem_ScalarExpr_Placeholder (_sem_Annotation _ann))
_sem_ScalarExpr (Cast _ann _expr _tn) =
    (_sem_ScalarExpr_Cast (_sem_Annotation _ann) (_sem_ScalarExpr _expr) (_sem_TypeName _tn))
_sem_ScalarExpr (ImplicitCast _ann _expr _te) =
    (_sem_ScalarExpr_ImplicitCast (_sem_Annotation _ann) (_sem_ScalarExpr _expr) _te)
_sem_ScalarExpr (Star _ann) =
    (_sem_ScalarExpr_Star (_sem_Annotation _ann))
_sem_ScalarExpr (QStar _ann _q) =
    (_sem_ScalarExpr_QStar (_sem_Annotation _ann) _q)
_sem_ScalarExpr (Identifier _ann _i) =
    (_sem_ScalarExpr_Identifier (_sem_Annotation _ann) (_sem_Name _i))
_sem_ScalarExpr (Case _ann _cases _els) =
    (_sem_ScalarExpr_Case (_sem_Annotation _ann) (_sem_CaseScalarExprListScalarExprPairList _cases) (_sem_MaybeScalarExpr _els))
_sem_ScalarExpr (CaseSimple _ann _value _cases _els) =
    (_sem_ScalarExpr_CaseSimple (_sem_Annotation _ann) (_sem_ScalarExpr _value) (_sem_CaseScalarExprListScalarExprPairList _cases) (_sem_MaybeScalarExpr _els))
_sem_ScalarExpr (Exists _ann _sel) =
    (_sem_ScalarExpr_Exists (_sem_Annotation _ann) (_sem_QueryExpr _sel))
_sem_ScalarExpr (App _ann _funName _args) =
    (_sem_ScalarExpr_App (_sem_Annotation _ann) (_sem_Name _funName) (_sem_ScalarExprList _args))
_sem_ScalarExpr (PrefixOp _ann _opName _arg) =
    (_sem_ScalarExpr_PrefixOp (_sem_Annotation _ann) (_sem_Name _opName) (_sem_ScalarExpr _arg))
_sem_ScalarExpr (PostfixOp _ann _opName _arg) =
    (_sem_ScalarExpr_PostfixOp (_sem_Annotation _ann) (_sem_Name _opName) (_sem_ScalarExpr _arg))
_sem_ScalarExpr (BinaryOp _ann _opName _arg0 _arg1) =
    (_sem_ScalarExpr_BinaryOp (_sem_Annotation _ann) (_sem_Name _opName) (_sem_ScalarExpr _arg0) (_sem_ScalarExpr _arg1))
_sem_ScalarExpr (SpecialOp _ann _opName _args) =
    (_sem_ScalarExpr_SpecialOp (_sem_Annotation _ann) (_sem_Name _opName) (_sem_ScalarExprList _args))
_sem_ScalarExpr (AggregateApp _ann _aggDistinct _fn _orderBy) =
    (_sem_ScalarExpr_AggregateApp (_sem_Annotation _ann) _aggDistinct (_sem_ScalarExpr _fn) (_sem_ScalarExprDirectionPairList _orderBy))
_sem_ScalarExpr (WindowApp _ann _fn _partitionBy _orderBy _frm) =
    (_sem_ScalarExpr_WindowApp (_sem_Annotation _ann) (_sem_ScalarExpr _fn) (_sem_ScalarExprList _partitionBy) (_sem_ScalarExprDirectionPairList _orderBy) _frm)
_sem_ScalarExpr (InPredicate _ann _expr _i _list) =
    (_sem_ScalarExpr_InPredicate (_sem_Annotation _ann) (_sem_ScalarExpr _expr) _i (_sem_InList _list))
_sem_ScalarExpr (LiftApp _ann _oper _flav _args) =
    (_sem_ScalarExpr_LiftApp (_sem_Annotation _ann) (_sem_Name _oper) _flav (_sem_ScalarExprList _args))
_sem_ScalarExpr (ScalarSubQuery _ann _sel) =
    (_sem_ScalarExpr_ScalarSubQuery (_sem_Annotation _ann) (_sem_QueryExpr _sel))
_sem_ScalarExpr (AntiScalarExpr _string) =
    (_sem_ScalarExpr_AntiScalarExpr _string)
_sem_ScalarExpr (Parens _ann _ex) =
    (_sem_ScalarExpr_Parens (_sem_Annotation _ann) (_sem_ScalarExpr _ex))
_sem_ScalarExpr (OdbcLiteral _ann _olt _val) =
    (_sem_ScalarExpr_OdbcLiteral (_sem_Annotation _ann) _olt _val)
_sem_ScalarExpr (OdbcFunc _ann _ex) =
    (_sem_ScalarExpr_OdbcFunc (_sem_Annotation _ann) (_sem_ScalarExpr _ex))
-- semantic domain
type T_ScalarExpr = Bool ->
                    Catalog ->
                    Environment ->
                    Bool ->
                    (Maybe TypeExtra) ->
                    TypeCheckingFlags ->
                    (Maybe TypeExtra) ->
                    Bool ->
                    ( ScalarExpr,([(NameComponent,Maybe TypeExtra,ScalarExpr)]),ScalarExpr,(Maybe TypeExtra))
data Inh_ScalarExpr = Inh_ScalarExpr {_assignmentCastContext_Inh_ScalarExpr :: Bool,_cat_Inh_ScalarExpr :: Catalog,_downEnv_Inh_ScalarExpr :: Environment,_expectedCast_Inh_ScalarExpr :: Bool,_expectedType_Inh_ScalarExpr :: (Maybe TypeExtra),_flags_Inh_ScalarExpr :: TypeCheckingFlags,_imCast_Inh_ScalarExpr :: (Maybe TypeExtra),_odbcFunction_Inh_ScalarExpr :: Bool}
data Syn_ScalarExpr = Syn_ScalarExpr {_annotatedTree_Syn_ScalarExpr :: ScalarExpr,_colExprs_Syn_ScalarExpr :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)]),_originalTree_Syn_ScalarExpr :: ScalarExpr,_upType_Syn_ScalarExpr :: (Maybe TypeExtra)}
_wrap_ScalarExpr :: T_ScalarExpr ->
                   Inh_ScalarExpr ->
                   Syn_ScalarExpr
_wrap_ScalarExpr sem (Inh_ScalarExpr _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast _lhsIodbcFunction) =
    (let ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast _lhsIodbcFunction
     in  (Syn_ScalarExpr _lhsOannotatedTree _lhsOcolExprs _lhsOoriginalTree _lhsOupType))
_sem_ScalarExpr_NumberLit :: T_Annotation ->
                            String ->
                            T_ScalarExpr
_sem_ScalarExpr_NumberLit ann_ d_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10305 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10311 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10317 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10323 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10334 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 255, column 9)
              _tpe =
                  ({-# LINE 255 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ if all (`elem` _digChars    ) d_
                           then mkTypeExtraNN $ classifyInteger d_
                           else mkTypeExtraNN typeNumeric
                   {-# LINE 10342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 258, column 9)
              _digChars =
                  ({-# LINE 258 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   concatMap show [(0::Int)..9]
                   {-# LINE 10348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NumberLit _annIannotatedTree d_
                   {-# LINE 10354 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NumberLit _annIoriginalTree d_
                   {-# LINE 10360 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 10366 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 10372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10378 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_StringLit :: T_Annotation ->
                            String ->
                            T_ScalarExpr
_sem_ScalarExpr_StringLit ann_ value_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10430 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10436 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10442 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10448 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10459 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 262, column 9)
              _tpe =
                  ({-# LINE 262 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ (mkTypeExtraNN UnknownType) {tePrecision = Just $ length value_}
                   {-# LINE 10465 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   StringLit _annIannotatedTree value_
                   {-# LINE 10471 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   StringLit _annIoriginalTree value_
                   {-# LINE 10477 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 10483 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 10489 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10495 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10501 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_NullLit :: T_Annotation ->
                          T_ScalarExpr
_sem_ScalarExpr_NullLit ann_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10575 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 265, column 10)
              _tpe =
                  ({-# LINE 265 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ mkTypeExtra UnknownType
                   {-# LINE 10581 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullLit _annIannotatedTree
                   {-# LINE 10587 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullLit _annIoriginalTree
                   {-# LINE 10593 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 10599 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 10605 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10611 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10617 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_BooleanLit :: T_Annotation ->
                             Bool ->
                             T_ScalarExpr
_sem_ScalarExpr_BooleanLit ann_ b_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10663 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10669 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10681 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10692 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 246, column 9)
              _tpe =
                  ({-# LINE 246 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ mkTypeExtraNN typeBool
                   {-# LINE 10698 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   BooleanLit _annIannotatedTree b_
                   {-# LINE 10704 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   BooleanLit _annIoriginalTree b_
                   {-# LINE 10710 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 10716 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 10722 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10728 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10734 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_TypedStringLit :: T_Annotation ->
                                 T_TypeName ->
                                 String ->
                                 T_ScalarExpr
_sem_ScalarExpr_TypedStringLit ann_ tn_ value_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckingFlags
              _tnOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tnIannotatedTree :: TypeName
              _tnInamedType :: (Maybe TypeExtra)
              _tnIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10816 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 275, column 10)
              _tpe =
                  ({-# LINE 275 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right _tnInamedType
                   {-# LINE 10822 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TypedStringLit _annIannotatedTree _tnIannotatedTree value_
                   {-# LINE 10828 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TypedStringLit _annIoriginalTree _tnIoriginalTree value_
                   {-# LINE 10834 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 10840 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 10846 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10852 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10858 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10864 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10870 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 10876 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tnIannotatedTree,_tnInamedType,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Interval :: T_Annotation ->
                           String ->
                           IntervalField ->
                           (Maybe Int) ->
                           T_ScalarExpr
_sem_ScalarExpr_Interval ann_ value_ field_ prec_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 10926 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 10932 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 10938 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 10944 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 10955 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 287, column 9)
              _tpe =
                  ({-# LINE 287 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ mkTypeExtraNN $ ScalarType "interval"
                   {-# LINE 10961 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Interval _annIannotatedTree value_ field_ prec_
                   {-# LINE 10967 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Interval _annIoriginalTree value_ field_ prec_
                   {-# LINE 10973 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 10979 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 10985 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 10991 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 10997 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Extract :: T_Annotation ->
                          ExtractField ->
                          T_ScalarExpr ->
                          T_ScalarExpr
_sem_ScalarExpr_Extract ann_ field_ e_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _eOodbcFunction :: Bool
              _eOexpectedType :: (Maybe TypeExtra)
              _eOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _eOassignmentCastContext :: Bool
              _eOcat :: Catalog
              _eOdownEnv :: Environment
              _eOflags :: TypeCheckingFlags
              _eOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _eIannotatedTree :: ScalarExpr
              _eIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _eIoriginalTree :: ScalarExpr
              _eIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 11056 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 11062 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 11068 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 11074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 11085 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 177, column 15)
              _eOodbcFunction =
                  ({-# LINE 177 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11091 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 289, column 9)
              _tpe =
                  ({-# LINE 289 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   x <- maybe (Left []) Right _eIupType
                   if (teType x) `elem` [typeDate,typeTimestamp]
                     then Right $ TypeExtra typeInt Nothing Nothing $ teNullable x
                     else Left [NoMatchingOperator "extract" [teType x]]
                   {-# LINE 11101 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 295, column 9)
              _eOexpectedType =
                  ({-# LINE 295 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   x <- _eIupType
                   either (const Nothing)
                          (Just . TypeExtra (teType x) Nothing Nothing . teNullable)
                          _tpe
                   {-# LINE 11111 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 301, column 9)
              _eOexpectedCast =
                  ({-# LINE 301 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Extract _annIannotatedTree field_ _eIannotatedTree
                   {-# LINE 11123 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Extract _annIoriginalTree field_ _eIoriginalTree
                   {-# LINE 11129 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 11135 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 11141 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11147 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11153 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _eOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 11159 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _eOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11165 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _eOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 11171 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _eOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11177 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _eOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 11183 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _eIannotatedTree,_eIcolExprs,_eIoriginalTree,_eIupType) =
                  e_ _eOassignmentCastContext _eOcat _eOdownEnv _eOexpectedCast _eOexpectedType _eOflags _eOimCast _eOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_PositionalArg :: T_Annotation ->
                                Integer ->
                                T_ScalarExpr
_sem_ScalarExpr_PositionalArg ann_ p_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 11231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 11237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 11243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 11249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 11260 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 741, column 9)
              _tpe =
                  ({-# LINE 741 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 11266 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PositionalArg _annIannotatedTree p_
                   {-# LINE 11272 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PositionalArg _annIoriginalTree p_
                   {-# LINE 11278 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 11284 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 11290 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11296 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11302 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Placeholder :: T_Annotation ->
                              T_ScalarExpr
_sem_ScalarExpr_Placeholder ann_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 11347 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 11353 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 11359 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 11365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 11376 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 303, column 10)
              _tpe =
                  ({-# LINE 303 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ mkTypeExtraNN UnknownType
                   {-# LINE 11382 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Placeholder _annIannotatedTree
                   {-# LINE 11388 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Placeholder _annIoriginalTree
                   {-# LINE 11394 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 11400 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 11406 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11412 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11418 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Cast :: T_Annotation ->
                       T_ScalarExpr ->
                       T_TypeName ->
                       T_ScalarExpr
_sem_ScalarExpr_Cast ann_ expr_ tn_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _exprOassignmentCastContext :: Bool
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckingFlags
              _tnOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              _tnIannotatedTree :: TypeName
              _tnInamedType :: (Maybe TypeExtra)
              _tnIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 11483 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 11489 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 11495 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 11501 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 11512 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 178, column 12)
              _exprOodbcFunction =
                  ({-# LINE 178 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11518 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 277, column 10)
              _tpe =
                  ({-# LINE 277 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   let nullability = fromMaybe False $ teNullable <$> _exprIupType
                       setNullability te = te{teNullable = nullability}
                   in maybe (Left []) (Right . setNullability) _tnInamedType
                   {-# LINE 11526 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 281, column 10)
              _exprOexpectedType =
                  ({-# LINE 281 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 11532 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 282, column 10)
              _exprOexpectedCast =
                  ({-# LINE 282 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Cast _annIannotatedTree _exprIannotatedTree _tnIannotatedTree
                   {-# LINE 11544 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Cast _annIoriginalTree _exprIoriginalTree _tnIoriginalTree
                   {-# LINE 11550 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 11556 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 11562 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11568 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 11580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 11592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 11604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 11622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
              ( _tnIannotatedTree,_tnInamedType,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_ImplicitCast :: T_Annotation ->
                               T_ScalarExpr ->
                               TypeExtra ->
                               T_ScalarExpr
_sem_ScalarExpr_ImplicitCast ann_ expr_ te_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _exprOassignmentCastContext :: Bool
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 11685 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 11691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 11697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 11703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 11714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 179, column 20)
              _exprOodbcFunction =
                  ({-# LINE 179 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 11720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 284, column 9)
              _tpe =
                  ({-# LINE 284 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right te_
                   {-# LINE 11726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 285, column 9)
              _exprOexpectedType =
                  ({-# LINE 285 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 11732 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ImplicitCast _annIannotatedTree _exprIannotatedTree te_
                   {-# LINE 11738 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ImplicitCast _annIoriginalTree _exprIoriginalTree te_
                   {-# LINE 11744 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 11750 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 11756 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11762 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11768 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 11774 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11780 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 11786 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOexpectedCast =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 11792 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11798 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 11804 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Star :: T_Annotation ->
                       T_ScalarExpr
_sem_ScalarExpr_Star ann_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 11852 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 11858 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 11864 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 11870 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 11881 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 720, column 9)
              _tpe =
                  ({-# LINE 720 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _originalTree of
                     Star _ ->
                       E.envExpandStar Nothing _lhsIdownEnv
                       >>= _starCS
                     QStar _ q -> do
                       E.envExpandStar (Just q) _lhsIdownEnv
                       >>= _starCS
                     _ -> Left [InternalError "wrong ctor in sem rule for star, qstar in scalarexprs.ag"]
                   {-# LINE 11894 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 729, column 9)
              _starCS =
                  ({-# LINE 729 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right . mkTypeExtraNN . CompositeType . map (\((_q,n),t) -> (n,t))
                   {-# LINE 11900 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Star _annIannotatedTree
                   {-# LINE 11906 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Star _annIoriginalTree
                   {-# LINE 11912 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 11918 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 11924 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 11930 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 11936 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_QStar :: T_Annotation ->
                        NameComponent ->
                        T_ScalarExpr
_sem_ScalarExpr_QStar ann_ q_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 11983 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 11989 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 11995 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 12001 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 12012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 720, column 9)
              _tpe =
                  ({-# LINE 720 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _originalTree of
                     Star _ ->
                       E.envExpandStar Nothing _lhsIdownEnv
                       >>= _starCS
                     QStar _ q -> do
                       E.envExpandStar (Just q) _lhsIdownEnv
                       >>= _starCS
                     _ -> Left [InternalError "wrong ctor in sem rule for star, qstar in scalarexprs.ag"]
                   {-# LINE 12025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 729, column 9)
              _starCS =
                  ({-# LINE 729 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right . mkTypeExtraNN . CompositeType . map (\((_q,n),t) -> (n,t))
                   {-# LINE 12031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   QStar _annIannotatedTree q_
                   {-# LINE 12037 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   QStar _annIoriginalTree q_
                   {-# LINE 12043 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 12049 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 12055 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12061 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Identifier :: T_Annotation ->
                             T_Name ->
                             T_ScalarExpr
_sem_ScalarExpr_Identifier ann_ i_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _iOtpe :: (Either [TypeError] TypeExtra)
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _iOcat :: Catalog
              _iOflags :: TypeCheckingFlags
              _iOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _iIannotatedTree :: Name
              _iIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 12119 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 12125 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 12131 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 12137 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 12148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 328, column 10)
              _elkp =
                  ({-# LINE 328 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   E.envLookupIdentifier (nameComponents _iIoriginalTree) _lhsIdownEnv
                   {-# LINE 12154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 329, column 10)
              _tpe =
                  ({-# LINE 329 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _elkp
                   {-# LINE 12160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 331, column 10)
              _lhsOannotatedTree =
                  ({-# LINE 331 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _annotatedTree
                   {-# LINE 12166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 332, column 10)
              _annotatedTree =
                  ({-# LINE 332 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   let t = Identifier _annIannotatedTree _iIannotatedTree
                   in fromMaybe t $ do
                       case tcfAddQualifiers _lhsIflags of
                         False -> Nothing
                         True -> do
                                ((q,i),_) <- either (const Nothing) Just _elkp
                                if q /= ""
                                  then
                                       return $ Identifier _annIannotatedTree
                                                  (Name emptyAnnotation [Nmc $ T.unpack q, Nmc $ T.unpack i])
                                  else return t
                   {-# LINE 12182 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 352, column 10)
              _iOtpe =
                  ({-# LINE 352 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 12188 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Identifier _annIoriginalTree _iIoriginalTree
                   {-# LINE 12194 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 12200 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12206 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12212 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _iOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12218 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _iOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12224 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _iOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12230 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _iIannotatedTree,_iIoriginalTree) =
                  i_ _iOcat _iOflags _iOimCast _iOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Case :: T_Annotation ->
                       T_CaseScalarExprListScalarExprPairList ->
                       T_MaybeScalarExpr ->
                       T_ScalarExpr
_sem_ScalarExpr_Case ann_ cases_ els_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _casesOwhenExpectedType :: (Maybe TypeExtra)
              _casesOthenExpectedType :: (Maybe TypeExtra)
              _elsOexpectedType :: (Maybe TypeExtra)
              _elsOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _casesOcat :: Catalog
              _casesOdownEnv :: Environment
              _casesOflags :: TypeCheckingFlags
              _casesOimCast :: (Maybe TypeExtra)
              _elsOassignmentCastContext :: Bool
              _elsOcat :: Catalog
              _elsOdownEnv :: Environment
              _elsOflags :: TypeCheckingFlags
              _elsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _casesIannotatedTree :: CaseScalarExprListScalarExprPairList
              _casesIoriginalTree :: CaseScalarExprListScalarExprPairList
              _casesIthenTypes :: ([Maybe TypeExtra])
              _casesIupTypes :: ([Maybe TypeExtra])
              _casesIwhenTypes :: ([[Maybe TypeExtra]])
              _elsIannotatedTree :: MaybeScalarExpr
              _elsIoriginalTree :: MaybeScalarExpr
              _elsIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 12300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 12306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 12312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 12318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 12329 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 568, column 9)
              _whenTypes =
                  ({-# LINE 568 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _casesIwhenTypes
                   {-# LINE 12335 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 569, column 9)
              _thenTypes =
                  ({-# LINE 569 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _casesIthenTypes ++ maybe [] ((:[]) . Just) _elsIupType
                   {-# LINE 12341 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 571, column 9)
              _tpe =
                  ({-# LINE 571 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   wt <- mapM (maybe (Left []) Right) $ concat _whenTypes
                   when (any ((/= typeBool) . teType) wt)
                       $ Left [WrongTypes typeBool $ map teType wt]
                   tt <- mapM (maybe (Left []) Right) _thenTypes
                   tse <- resolveResultSetTypeExtra _lhsIcat tt
                   return $ if isNothing _elsIoriginalTree
                            then tse{teNullable=True}
                            else tse
                   {-# LINE 12355 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 582, column 9)
              _casesOwhenExpectedType =
                  ({-# LINE 582 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   ws <- sequence $ concat _whenTypes
                   w <- either (const Nothing) Just $ resolveResultSetTypeExtra _lhsIcat ws
                   Just $ TypeExtra typeBool Nothing Nothing $ teNullable w
                   {-# LINE 12364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 587, column 9)
              _casesOthenExpectedType =
                  ({-# LINE 587 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 12370 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 588, column 9)
              _elsOexpectedType =
                  ({-# LINE 588 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 12376 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 589, column 9)
              _elsOexpectedCast =
                  ({-# LINE 589 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   True
                   {-# LINE 12382 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Case _annIannotatedTree _casesIannotatedTree _elsIannotatedTree
                   {-# LINE 12388 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Case _annIoriginalTree _casesIoriginalTree _elsIoriginalTree
                   {-# LINE 12394 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 12400 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 12406 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12412 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12418 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12424 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOdownEnv =
                  ({-# LINE 563 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12430 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12436 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12442 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 12448 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12454 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12460 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12466 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12472 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _casesIannotatedTree,_casesIoriginalTree,_casesIthenTypes,_casesIupTypes,_casesIwhenTypes) =
                  cases_ _casesOcat _casesOdownEnv _casesOflags _casesOimCast _casesOthenExpectedType _casesOwhenExpectedType
              ( _elsIannotatedTree,_elsIoriginalTree,_elsIupType) =
                  els_ _elsOassignmentCastContext _elsOcat _elsOdownEnv _elsOexpectedCast _elsOexpectedType _elsOflags _elsOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_CaseSimple :: T_Annotation ->
                             T_ScalarExpr ->
                             T_CaseScalarExprListScalarExprPairList ->
                             T_MaybeScalarExpr ->
                             T_ScalarExpr
_sem_ScalarExpr_CaseSimple ann_ value_ cases_ els_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _valueOodbcFunction :: Bool
              _casesOwhenExpectedType :: (Maybe TypeExtra)
              _valueOexpectedType :: (Maybe TypeExtra)
              _valueOexpectedCast :: Bool
              _casesOthenExpectedType :: (Maybe TypeExtra)
              _elsOexpectedType :: (Maybe TypeExtra)
              _elsOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _valueOassignmentCastContext :: Bool
              _valueOcat :: Catalog
              _valueOdownEnv :: Environment
              _valueOflags :: TypeCheckingFlags
              _valueOimCast :: (Maybe TypeExtra)
              _casesOcat :: Catalog
              _casesOdownEnv :: Environment
              _casesOflags :: TypeCheckingFlags
              _casesOimCast :: (Maybe TypeExtra)
              _elsOassignmentCastContext :: Bool
              _elsOcat :: Catalog
              _elsOdownEnv :: Environment
              _elsOflags :: TypeCheckingFlags
              _elsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _valueIannotatedTree :: ScalarExpr
              _valueIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _valueIoriginalTree :: ScalarExpr
              _valueIupType :: (Maybe TypeExtra)
              _casesIannotatedTree :: CaseScalarExprListScalarExprPairList
              _casesIoriginalTree :: CaseScalarExprListScalarExprPairList
              _casesIthenTypes :: ([Maybe TypeExtra])
              _casesIupTypes :: ([Maybe TypeExtra])
              _casesIwhenTypes :: ([[Maybe TypeExtra]])
              _elsIannotatedTree :: MaybeScalarExpr
              _elsIoriginalTree :: MaybeScalarExpr
              _elsIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 12557 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 12563 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 12569 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 12575 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 12586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 180, column 18)
              _valueOodbcFunction =
                  ({-# LINE 180 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 12592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 568, column 9)
              _whenTypes =
                  ({-# LINE 568 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _casesIwhenTypes
                   {-# LINE 12598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 569, column 9)
              _thenTypes =
                  ({-# LINE 569 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _casesIthenTypes ++ maybe [] ((:[]) . Just) _elsIupType
                   {-# LINE 12604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 591, column 9)
              _whent =
                  ({-# LINE 591 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   wt <- mapM (maybe (Left []) Right) $ concat _whenTypes
                   vt <- maybe (Left []) Right _valueIupType
                   resolveResultSetTypeExtra _lhsIcat (vt : wt)
                   {-# LINE 12613 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 596, column 9)
              _tpe =
                  ({-# LINE 596 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   _ <- _whent
                   tt <- mapM (maybe (Left []) Right) _thenTypes
                   resolveResultSetTypeExtra _lhsIcat tt
                   {-# LINE 12622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 601, column 9)
              _casesOwhenExpectedType =
                  ({-# LINE 601 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _whent
                   {-# LINE 12628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 602, column 9)
              _valueOexpectedType =
                  ({-# LINE 602 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _whent
                   {-# LINE 12634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 603, column 9)
              _valueOexpectedCast =
                  ({-# LINE 603 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 12640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 604, column 9)
              _casesOthenExpectedType =
                  ({-# LINE 604 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 12646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 605, column 9)
              _elsOexpectedType =
                  ({-# LINE 605 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 12652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 606, column 9)
              _elsOexpectedCast =
                  ({-# LINE 606 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   True
                   {-# LINE 12658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseSimple _annIannotatedTree _valueIannotatedTree _casesIannotatedTree _elsIannotatedTree
                   {-# LINE 12664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseSimple _annIoriginalTree _valueIoriginalTree _casesIoriginalTree _elsIoriginalTree
                   {-# LINE 12670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 12676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 12682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 12700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12718 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12730 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOdownEnv =
                  ({-# LINE 563 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12736 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12742 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12748 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 12754 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12760 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 12766 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12772 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12778 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _valueIannotatedTree,_valueIcolExprs,_valueIoriginalTree,_valueIupType) =
                  value_ _valueOassignmentCastContext _valueOcat _valueOdownEnv _valueOexpectedCast _valueOexpectedType _valueOflags _valueOimCast _valueOodbcFunction
              ( _casesIannotatedTree,_casesIoriginalTree,_casesIthenTypes,_casesIupTypes,_casesIwhenTypes) =
                  cases_ _casesOcat _casesOdownEnv _casesOflags _casesOimCast _casesOthenExpectedType _casesOwhenExpectedType
              ( _elsIannotatedTree,_elsIoriginalTree,_elsIupType) =
                  els_ _elsOassignmentCastContext _elsOcat _elsOdownEnv _elsOexpectedCast _elsOexpectedType _elsOflags _elsOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Exists :: T_Annotation ->
                         T_QueryExpr ->
                         T_ScalarExpr
_sem_ScalarExpr_Exists ann_ sel_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _selOouterDownEnv :: (Maybe Environment)
              _selOexpectedType :: (Maybe [TypeExtra])
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _selOassignmentCastContext :: Bool
              _selOcat :: Catalog
              _selOflags :: TypeCheckingFlags
              _selOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selIannotatedTree :: QueryExpr
              _selIoriginalTree :: QueryExpr
              _selIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 12839 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 12845 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 12851 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 12857 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 12868 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 635, column 9)
              _tpe =
                  ({-# LINE 635 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Right $ mkTypeExtraNN typeBool
                   {-# LINE 12874 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 657, column 9)
              _selOouterDownEnv =
                  ({-# LINE 657 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Just _lhsIdownEnv
                   {-# LINE 12880 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 659, column 9)
              _selOexpectedType =
                  ({-# LINE 659 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   liftM (map snd) _selIupType
                   {-# LINE 12886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Exists _annIannotatedTree _selIannotatedTree
                   {-# LINE 12892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Exists _annIoriginalTree _selIoriginalTree
                   {-# LINE 12898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 12904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 12910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 12928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 12934 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 12940 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 12946 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOassignmentCastContext _selOcat _selOexpectedType _selOflags _selOimCast _selOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_App :: T_Annotation ->
                      T_Name ->
                      T_ScalarExprList ->
                      T_ScalarExpr
_sem_ScalarExpr_App ann_ funName_ args_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _funNameOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _argsOexpectedTypes :: ([TypeExtra])
              _ttpe :: (Either [TypeError] ([TypeExtra],TypeExtra))
              _argsOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _funNameOcat :: Catalog
              _funNameOflags :: TypeCheckingFlags
              _funNameOimCast :: (Maybe TypeExtra)
              _argsOassignmentCastContext :: Bool
              _argsOcat :: Catalog
              _argsOdownEnv :: Environment
              _argsOflags :: TypeCheckingFlags
              _argsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _funNameIannotatedTree :: Name
              _funNameIoriginalTree :: Name
              _argsIannotatedTree :: ScalarExprList
              _argsIoriginalTree :: ScalarExprList
              _argsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 13013 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 13019 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 13031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 13042 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 214, column 9)
              _funNameOtpe =
                  ({-# LINE 214 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 13048 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 367, column 10)
              _tpe =
                  ({-# LINE 367 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
                   {-# LINE 13054 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 369, column 10)
              _argsOexpectedTypes =
                  ({-# LINE 369 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const []) id $ fmap fst _ttpe
                   {-# LINE 13060 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 383, column 10)
              _funName =
                  ({-# LINE 383 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   let y = if _lhsIodbcFunction
                           then let f [] = []
                                    f [Nmc x] = [Nmc $ "!odbc-" ++ x]
                                    f [QNmc x] = [QNmc $ "!odbc-" ++ x]
                                    f [x] = [x]
                                    f (x:xs) = x:f xs
                                in (\(Name a nms) -> Name a (f nms)) _funNameIoriginalTree
                           else _funNameIoriginalTree
                   in                    y
                   {-# LINE 13074 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 406, column 10)
              _ttpe =
                  ({-# LINE 406 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _originalTree of
                     (App _ (Name _ [Nmc "count"]) [Star _]) ->
                         tcAppLike (tcfDialect _lhsIflags)
                                   _lhsIcat _funName     _argsIoriginalTree
                                   [Just $ mkTypeExtraNN UnknownType]
                     (App _ (Name _ [Nmc n]) [_,Identifier _ (Name _ [Nmc tyi])])
                         | _lhsIodbcFunction && map toLower n == "convert" -> do
                         (ts,_r) <- tcAppLike (tcfDialect _lhsIflags)
                                   _lhsIcat _funName     _argsIoriginalTree
                                   [Just $ mkTypeExtraNN UnknownType, Just $ mkTypeExtraNN typeInt]
                         r' <- maybe (Left [UnrecognisedIdentifier $ T.pack tyi]) (Right . mkTypeExtra)
                                  $ lookup (map toLower tyi) odbcConvertTypes
                         Right (ts, r')
                     _ -> tcAppLike (tcfDialect _lhsIflags)
                                    _lhsIcat _funName     _argsIoriginalTree _argsIupTypes
                   {-# LINE 13094 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 454, column 9)
              _argsOexpectedCast =
                  ({-# LINE 454 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   App _annIannotatedTree _funNameIannotatedTree _argsIannotatedTree
                   {-# LINE 13106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   App _annIoriginalTree _funNameIoriginalTree _argsIoriginalTree
                   {-# LINE 13112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 13118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 13124 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13130 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13136 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _funNameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13142 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _funNameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13148 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _funNameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 13160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOdownEnv =
                  ({-# LINE 195 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _funNameIannotatedTree,_funNameIoriginalTree) =
                  funName_ _funNameOcat _funNameOflags _funNameOimCast _funNameOtpe
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOassignmentCastContext _argsOcat _argsOdownEnv _argsOexpectedCast _argsOexpectedTypes _argsOflags _argsOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_PrefixOp :: T_Annotation ->
                           T_Name ->
                           T_ScalarExpr ->
                           T_ScalarExpr
_sem_ScalarExpr_PrefixOp ann_ opName_ arg_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _argOodbcFunction :: Bool
              _opNameOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _ttpe :: (Either [TypeError] ([TypeExtra],TypeExtra))
              _argOexpectedType :: (Maybe TypeExtra)
              _argOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _opNameOcat :: Catalog
              _opNameOflags :: TypeCheckingFlags
              _opNameOimCast :: (Maybe TypeExtra)
              _argOassignmentCastContext :: Bool
              _argOcat :: Catalog
              _argOdownEnv :: Environment
              _argOflags :: TypeCheckingFlags
              _argOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _opNameIannotatedTree :: Name
              _opNameIoriginalTree :: Name
              _argIannotatedTree :: ScalarExpr
              _argIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _argIoriginalTree :: ScalarExpr
              _argIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 13255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 13261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 13273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 13284 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 181, column 26)
              _argOodbcFunction =
                  ({-# LINE 181 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13290 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 216, column 9)
              _opNameOtpe =
                  ({-# LINE 216 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 13296 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 367, column 10)
              _tpe =
                  ({-# LINE 367 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
                   {-# LINE 13302 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 433, column 10)
              _ttpe =
                  ({-# LINE 433 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   tcAppLike (tcfDialect _lhsIflags) _lhsIcat _opNameIoriginalTree [_argIoriginalTree] [_argIupType]
                   {-# LINE 13308 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 434, column 10)
              _argOexpectedType =
                  ({-# LINE 434 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _ttpe     of
                     Right ([t],_) -> Just t
                     _ -> Nothing
                   {-# LINE 13316 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 456, column 9)
              _argOexpectedCast =
                  ({-# LINE 456 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13322 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrefixOp _annIannotatedTree _opNameIannotatedTree _argIannotatedTree
                   {-# LINE 13328 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrefixOp _annIoriginalTree _opNameIoriginalTree _argIoriginalTree
                   {-# LINE 13334 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 13340 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 13346 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13370 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13376 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 13382 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13388 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13394 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13400 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13406 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _opNameIannotatedTree,_opNameIoriginalTree) =
                  opName_ _opNameOcat _opNameOflags _opNameOimCast _opNameOtpe
              ( _argIannotatedTree,_argIcolExprs,_argIoriginalTree,_argIupType) =
                  arg_ _argOassignmentCastContext _argOcat _argOdownEnv _argOexpectedCast _argOexpectedType _argOflags _argOimCast _argOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_PostfixOp :: T_Annotation ->
                            T_Name ->
                            T_ScalarExpr ->
                            T_ScalarExpr
_sem_ScalarExpr_PostfixOp ann_ opName_ arg_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _argOodbcFunction :: Bool
              _opNameOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _ttpe :: (Either [TypeError] ([TypeExtra],TypeExtra))
              _argOexpectedType :: (Maybe TypeExtra)
              _argOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _opNameOcat :: Catalog
              _opNameOflags :: TypeCheckingFlags
              _opNameOimCast :: (Maybe TypeExtra)
              _argOassignmentCastContext :: Bool
              _argOcat :: Catalog
              _argOdownEnv :: Environment
              _argOflags :: TypeCheckingFlags
              _argOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _opNameIannotatedTree :: Name
              _opNameIoriginalTree :: Name
              _argIannotatedTree :: ScalarExpr
              _argIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _argIoriginalTree :: ScalarExpr
              _argIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 13477 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 13483 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13489 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 13495 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 13506 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 181, column 26)
              _argOodbcFunction =
                  ({-# LINE 181 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13512 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 216, column 9)
              _opNameOtpe =
                  ({-# LINE 216 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 13518 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 367, column 10)
              _tpe =
                  ({-# LINE 367 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
                   {-# LINE 13524 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 433, column 10)
              _ttpe =
                  ({-# LINE 433 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   tcAppLike (tcfDialect _lhsIflags) _lhsIcat _opNameIoriginalTree [_argIoriginalTree] [_argIupType]
                   {-# LINE 13530 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 434, column 10)
              _argOexpectedType =
                  ({-# LINE 434 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _ttpe     of
                     Right ([t],_) -> Just t
                     _ -> Nothing
                   {-# LINE 13538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 456, column 9)
              _argOexpectedCast =
                  ({-# LINE 456 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13544 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PostfixOp _annIannotatedTree _opNameIannotatedTree _argIannotatedTree
                   {-# LINE 13550 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PostfixOp _annIoriginalTree _opNameIoriginalTree _argIoriginalTree
                   {-# LINE 13556 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 13562 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 13568 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 13604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _opNameIannotatedTree,_opNameIoriginalTree) =
                  opName_ _opNameOcat _opNameOflags _opNameOimCast _opNameOtpe
              ( _argIannotatedTree,_argIcolExprs,_argIoriginalTree,_argIupType) =
                  arg_ _argOassignmentCastContext _argOcat _argOdownEnv _argOexpectedCast _argOexpectedType _argOflags _argOimCast _argOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_BinaryOp :: T_Annotation ->
                           T_Name ->
                           T_ScalarExpr ->
                           T_ScalarExpr ->
                           T_ScalarExpr
_sem_ScalarExpr_BinaryOp ann_ opName_ arg0_ arg1_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _arg0OodbcFunction :: Bool
              _arg1OodbcFunction :: Bool
              _opNameOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _ttpe :: (Either [TypeError] ([TypeExtra],TypeExtra))
              _arg0OexpectedType :: (Maybe TypeExtra)
              _arg1OexpectedType :: (Maybe TypeExtra)
              _arg0OexpectedCast :: Bool
              _arg1OexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _opNameOcat :: Catalog
              _opNameOflags :: TypeCheckingFlags
              _opNameOimCast :: (Maybe TypeExtra)
              _arg0OassignmentCastContext :: Bool
              _arg0Ocat :: Catalog
              _arg0OdownEnv :: Environment
              _arg0Oflags :: TypeCheckingFlags
              _arg0OimCast :: (Maybe TypeExtra)
              _arg1OassignmentCastContext :: Bool
              _arg1Ocat :: Catalog
              _arg1OdownEnv :: Environment
              _arg1Oflags :: TypeCheckingFlags
              _arg1OimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _opNameIannotatedTree :: Name
              _opNameIoriginalTree :: Name
              _arg0IannotatedTree :: ScalarExpr
              _arg0IcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _arg0IoriginalTree :: ScalarExpr
              _arg0IupType :: (Maybe TypeExtra)
              _arg1IannotatedTree :: ScalarExpr
              _arg1IcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _arg1IoriginalTree :: ScalarExpr
              _arg1IupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 13712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 13718 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 13730 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 13741 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 182, column 16)
              _arg0OodbcFunction =
                  ({-# LINE 182 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13747 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 183, column 16)
              _arg1OodbcFunction =
                  ({-# LINE 183 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13753 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 216, column 9)
              _opNameOtpe =
                  ({-# LINE 216 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 13759 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 367, column 10)
              _tpe =
                  ({-# LINE 367 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
                   {-# LINE 13765 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 425, column 10)
              _ttpe =
                  ({-# LINE 425 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   tcAppLike (tcfDialect _lhsIflags)
                             _lhsIcat _opNameIoriginalTree [_arg0IoriginalTree,_arg1IoriginalTree]
                             [_arg0IupType,_arg1IupType]
                   {-# LINE 13773 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 428, column 10)
              (_arg0OexpectedType,_arg1OexpectedType) =
                  ({-# LINE 428 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _ttpe     of
                     Right ([t0,t1],_) -> (Just t0,Just t1)
                     _ -> (Nothing,Nothing)
                   {-# LINE 13781 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 458, column 9)
              _arg0OexpectedCast =
                  ({-# LINE 458 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13787 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 459, column 9)
              _arg1OexpectedCast =
                  ({-# LINE 459 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 13793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   BinaryOp _annIannotatedTree _opNameIannotatedTree _arg0IannotatedTree _arg1IannotatedTree
                   {-# LINE 13799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   BinaryOp _annIoriginalTree _opNameIoriginalTree _arg0IoriginalTree _arg1IoriginalTree
                   {-# LINE 13805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 13811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 13817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg0OassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 13853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg0Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg0OdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg0Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg0OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13877 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg1OassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 13883 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg1Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 13889 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg1OdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 13895 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg1Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 13901 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _arg1OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 13907 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _opNameIannotatedTree,_opNameIoriginalTree) =
                  opName_ _opNameOcat _opNameOflags _opNameOimCast _opNameOtpe
              ( _arg0IannotatedTree,_arg0IcolExprs,_arg0IoriginalTree,_arg0IupType) =
                  arg0_ _arg0OassignmentCastContext _arg0Ocat _arg0OdownEnv _arg0OexpectedCast _arg0OexpectedType _arg0Oflags _arg0OimCast _arg0OodbcFunction
              ( _arg1IannotatedTree,_arg1IcolExprs,_arg1IoriginalTree,_arg1IupType) =
                  arg1_ _arg1OassignmentCastContext _arg1Ocat _arg1OdownEnv _arg1OexpectedCast _arg1OexpectedType _arg1Oflags _arg1OimCast _arg1OodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_SpecialOp :: T_Annotation ->
                            T_Name ->
                            T_ScalarExprList ->
                            T_ScalarExpr
_sem_ScalarExpr_SpecialOp ann_ opName_ args_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _opNameOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _ttpe :: (Either [TypeError] ([TypeExtra],TypeExtra))
              _argsOexpectedTypes :: ([TypeExtra])
              _argsOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _opNameOcat :: Catalog
              _opNameOflags :: TypeCheckingFlags
              _opNameOimCast :: (Maybe TypeExtra)
              _argsOassignmentCastContext :: Bool
              _argsOcat :: Catalog
              _argsOdownEnv :: Environment
              _argsOflags :: TypeCheckingFlags
              _argsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _opNameIannotatedTree :: Name
              _opNameIoriginalTree :: Name
              _argsIannotatedTree :: ScalarExprList
              _argsIoriginalTree :: ScalarExprList
              _argsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 13978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 13984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 13990 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 13996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 14007 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 216, column 9)
              _opNameOtpe =
                  ({-# LINE 216 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 14013 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 367, column 10)
              _tpe =
                  ({-# LINE 367 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   fmap snd _ttpe
                   {-# LINE 14019 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 439, column 10)
              _ttpe =
                  ({-# LINE 439 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   tcAppLike (tcfDialect _lhsIflags) _lhsIcat _opNameIoriginalTree _argsIoriginalTree _argsIupTypes
                   {-# LINE 14025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 440, column 10)
              _argsOexpectedTypes =
                  ({-# LINE 440 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const []) id $ fmap fst _ttpe
                   {-# LINE 14031 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 454, column 9)
              _argsOexpectedCast =
                  ({-# LINE 454 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 14037 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SpecialOp _annIannotatedTree _opNameIannotatedTree _argsIannotatedTree
                   {-# LINE 14043 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SpecialOp _annIoriginalTree _opNameIoriginalTree _argsIoriginalTree
                   {-# LINE 14049 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 14055 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 14061 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14073 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14079 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14085 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _opNameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14091 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 14097 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14103 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOdownEnv =
                  ({-# LINE 195 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 14109 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14115 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _opNameIannotatedTree,_opNameIoriginalTree) =
                  opName_ _opNameOcat _opNameOflags _opNameOimCast _opNameOtpe
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOassignmentCastContext _argsOcat _argsOdownEnv _argsOexpectedCast _argsOexpectedTypes _argsOflags _argsOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_AggregateApp :: T_Annotation ->
                               Distinct ->
                               T_ScalarExpr ->
                               T_ScalarExprDirectionPairList ->
                               T_ScalarExpr
_sem_ScalarExpr_AggregateApp ann_ aggDistinct_ fn_ orderBy_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _fnOodbcFunction :: Bool
              _fnOexpectedCast :: Bool
              _fnOexpectedType :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _fnOassignmentCastContext :: Bool
              _fnOcat :: Catalog
              _fnOdownEnv :: Environment
              _fnOflags :: TypeCheckingFlags
              _fnOimCast :: (Maybe TypeExtra)
              _orderByOcat :: Catalog
              _orderByOdownEnv :: Environment
              _orderByOflags :: TypeCheckingFlags
              _orderByOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _fnIannotatedTree :: ScalarExpr
              _fnIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _fnIoriginalTree :: ScalarExpr
              _fnIupType :: (Maybe TypeExtra)
              _orderByIannotatedTree :: ScalarExprDirectionPairList
              _orderByIoriginalTree :: ScalarExprDirectionPairList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 14191 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 14197 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 14203 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 14209 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 14220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 184, column 20)
              _fnOodbcFunction =
                  ({-# LINE 184 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 14226 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 442, column 10)
              _tpe =
                  ({-# LINE 442 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _fnIoriginalTree of
                     (App _ fnm@(Name _ [Nmc "count"]) [Star _]) ->
                          fmap snd $ tcAppLike (tcfDialect _lhsIflags) _lhsIcat fnm [] [Just $ mkTypeExtraNN UnknownType]
                     _ -> maybe (Left []) Right _fnIupType
                   {-# LINE 14235 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 461, column 9)
              _fnOexpectedCast =
                  ({-# LINE 461 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 14241 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 757, column 28)
              _fnOexpectedType =
                  ({-# LINE 757 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 14247 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AggregateApp _annIannotatedTree aggDistinct_ _fnIannotatedTree _orderByIannotatedTree
                   {-# LINE 14253 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AggregateApp _annIoriginalTree aggDistinct_ _fnIoriginalTree _orderByIoriginalTree
                   {-# LINE 14259 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 14265 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 14271 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14277 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14283 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 14289 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14295 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 14301 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14307 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14319 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOdownEnv =
                  ({-# LINE 215 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 14325 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14331 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14337 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _fnIannotatedTree,_fnIcolExprs,_fnIoriginalTree,_fnIupType) =
                  fn_ _fnOassignmentCastContext _fnOcat _fnOdownEnv _fnOexpectedCast _fnOexpectedType _fnOflags _fnOimCast _fnOodbcFunction
              ( _orderByIannotatedTree,_orderByIoriginalTree) =
                  orderBy_ _orderByOcat _orderByOdownEnv _orderByOflags _orderByOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_WindowApp :: T_Annotation ->
                            T_ScalarExpr ->
                            T_ScalarExprList ->
                            T_ScalarExprDirectionPairList ->
                            (Maybe FrameClause) ->
                            T_ScalarExpr
_sem_ScalarExpr_WindowApp ann_ fn_ partitionBy_ orderBy_ frm_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _fnOodbcFunction :: Bool
              _fnOexpectedCast :: Bool
              _partitionByOexpectedCast :: Bool
              _fnOexpectedType :: (Maybe TypeExtra)
              _partitionByOexpectedTypes :: ([TypeExtra])
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _fnOassignmentCastContext :: Bool
              _fnOcat :: Catalog
              _fnOdownEnv :: Environment
              _fnOflags :: TypeCheckingFlags
              _fnOimCast :: (Maybe TypeExtra)
              _partitionByOassignmentCastContext :: Bool
              _partitionByOcat :: Catalog
              _partitionByOdownEnv :: Environment
              _partitionByOflags :: TypeCheckingFlags
              _partitionByOimCast :: (Maybe TypeExtra)
              _orderByOcat :: Catalog
              _orderByOdownEnv :: Environment
              _orderByOflags :: TypeCheckingFlags
              _orderByOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _fnIannotatedTree :: ScalarExpr
              _fnIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _fnIoriginalTree :: ScalarExpr
              _fnIupType :: (Maybe TypeExtra)
              _partitionByIannotatedTree :: ScalarExprList
              _partitionByIoriginalTree :: ScalarExprList
              _partitionByIupTypes :: ([Maybe TypeExtra])
              _orderByIannotatedTree :: ScalarExprDirectionPairList
              _orderByIoriginalTree :: ScalarExprDirectionPairList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 14418 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 14424 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 14430 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 14436 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 14447 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 185, column 17)
              _fnOodbcFunction =
                  ({-# LINE 185 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 14453 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 448, column 10)
              _tpe =
                  ({-# LINE 448 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right _fnIupType
                   {-# LINE 14459 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 461, column 9)
              _fnOexpectedCast =
                  ({-# LINE 461 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 14465 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 464, column 9)
              _partitionByOexpectedCast =
                  ({-# LINE 464 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 14471 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 757, column 28)
              _fnOexpectedType =
                  ({-# LINE 757 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 14477 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 779, column 15)
              _partitionByOexpectedTypes =
                  ({-# LINE 779 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 14483 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WindowApp _annIannotatedTree _fnIannotatedTree _partitionByIannotatedTree _orderByIannotatedTree frm_
                   {-# LINE 14489 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WindowApp _annIoriginalTree _fnIoriginalTree _partitionByIoriginalTree _orderByIoriginalTree frm_
                   {-# LINE 14495 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 14501 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 14507 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14513 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14519 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 14525 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14531 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 14537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionByOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 14555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionByOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionByOdownEnv =
                  ({-# LINE 195 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 14567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionByOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionByOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOdownEnv =
                  ({-# LINE 215 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 14591 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _orderByOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _fnIannotatedTree,_fnIcolExprs,_fnIoriginalTree,_fnIupType) =
                  fn_ _fnOassignmentCastContext _fnOcat _fnOdownEnv _fnOexpectedCast _fnOexpectedType _fnOflags _fnOimCast _fnOodbcFunction
              ( _partitionByIannotatedTree,_partitionByIoriginalTree,_partitionByIupTypes) =
                  partitionBy_ _partitionByOassignmentCastContext _partitionByOcat _partitionByOdownEnv _partitionByOexpectedCast _partitionByOexpectedTypes _partitionByOflags _partitionByOimCast
              ( _orderByIannotatedTree,_orderByIoriginalTree) =
                  orderBy_ _orderByOcat _orderByOdownEnv _orderByOflags _orderByOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_InPredicate :: T_Annotation ->
                              T_ScalarExpr ->
                              Bool ->
                              T_InList ->
                              T_ScalarExpr
_sem_ScalarExpr_InPredicate ann_ expr_ i_ list_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _rt :: (Either [TypeError] TypeExtra)
              _listOexpectedType :: (Maybe TypeExtra)
              _exprOexpectedType :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _exprOassignmentCastContext :: Bool
              _exprOcat :: Catalog
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _listOcat :: Catalog
              _listOdownEnv :: Environment
              _listOexpectedCast :: Bool
              _listOflags :: TypeCheckingFlags
              _listOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              _listIannotatedTree :: InList
              _listIlistType :: (Either [TypeError] TypeExtra)
              _listIoriginalTree :: InList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 14679 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 14685 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 14691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 14697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 14708 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 186, column 19)
              _exprOodbcFunction =
                  ({-# LINE 186 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 14714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 676, column 9)
              _rt =
                  ({-# LINE 676 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   lt <- _listIlistType
                   expt <- maybe (Left []) Right _exprIupType
                   resolveResultSetTypeExtra _lhsIcat [expt, lt]
                   {-# LINE 14723 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 680, column 9)
              _tpe =
                  ({-# LINE 680 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   r <- _rt
                   return $ TypeExtra typeBool Nothing Nothing $ teNullable r
                   {-# LINE 14731 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 683, column 9)
              _listOexpectedType =
                  ({-# LINE 683 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _rt
                   {-# LINE 14737 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 684, column 9)
              _exprOexpectedType =
                  ({-# LINE 684 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _rt
                   {-# LINE 14743 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InPredicate _annIannotatedTree _exprIannotatedTree i_ _listIannotatedTree
                   {-# LINE 14749 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   InPredicate _annIoriginalTree _exprIoriginalTree i_ _listIoriginalTree
                   {-# LINE 14755 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 14761 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 14767 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14773 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14779 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 14785 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14791 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 14797 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOexpectedCast =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 14803 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14809 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14815 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _listOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14821 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _listOdownEnv =
                  ({-# LINE 215 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 14827 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _listOexpectedCast =
                  ({-# LINE 669 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 14833 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _listOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14839 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _listOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 14845 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
              ( _listIannotatedTree,_listIlistType,_listIoriginalTree) =
                  list_ _listOcat _listOdownEnv _listOexpectedCast _listOexpectedType _listOflags _listOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_LiftApp :: T_Annotation ->
                          T_Name ->
                          LiftFlavour ->
                          T_ScalarExprList ->
                          T_ScalarExpr
_sem_ScalarExpr_LiftApp ann_ oper_ flav_ args_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _argsOexpectedCast :: Bool
              _argsOexpectedTypes :: ([TypeExtra])
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _operOcat :: Catalog
              _operOflags :: TypeCheckingFlags
              _operOimCast :: (Maybe TypeExtra)
              _operOtpe :: (Either [TypeError] TypeExtra)
              _argsOassignmentCastContext :: Bool
              _argsOcat :: Catalog
              _argsOdownEnv :: Environment
              _argsOflags :: TypeCheckingFlags
              _argsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _operIannotatedTree :: Name
              _operIoriginalTree :: Name
              _argsIannotatedTree :: ScalarExprList
              _argsIoriginalTree :: ScalarExprList
              _argsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 14913 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 14919 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 14925 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 14931 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 14942 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 454, column 9)
              _argsOexpectedCast =
                  ({-# LINE 454 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 14948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 741, column 9)
              _tpe =
                  ({-# LINE 741 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 14954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 776, column 13)
              _argsOexpectedTypes =
                  ({-# LINE 776 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 14960 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   LiftApp _annIannotatedTree _operIannotatedTree flav_ _argsIannotatedTree
                   {-# LINE 14966 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   LiftApp _annIoriginalTree _operIoriginalTree flav_ _argsIoriginalTree
                   {-# LINE 14972 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 14978 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 14984 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 14990 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 14996 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15002 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15008 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15014 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (from local)
              _operOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   _tpe
                   {-# LINE 15020 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 15026 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15032 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOdownEnv =
                  ({-# LINE 195 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 15038 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15044 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15050 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _operIannotatedTree,_operIoriginalTree) =
                  oper_ _operOcat _operOflags _operOimCast _operOtpe
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOassignmentCastContext _argsOcat _argsOdownEnv _argsOexpectedCast _argsOexpectedTypes _argsOflags _argsOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_ScalarSubQuery :: T_Annotation ->
                                 T_QueryExpr ->
                                 T_ScalarExpr
_sem_ScalarExpr_ScalarSubQuery ann_ sel_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _selOouterDownEnv :: (Maybe Environment)
              _selOexpectedType :: (Maybe [TypeExtra])
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _selOassignmentCastContext :: Bool
              _selOcat :: Catalog
              _selOflags :: TypeCheckingFlags
              _selOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selIannotatedTree :: QueryExpr
              _selIoriginalTree :: QueryExpr
              _selIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 15109 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 15115 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 15121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 15127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 15138 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 645, column 9)
              _tpe =
                  ({-# LINE 645 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   do
                   selType <- maybe (Left []) Right _selIupType
                   case length selType of
                     0 -> Left [InternalError "no columns in scalar subquery?"]
                     1 -> Right $ snd $ head selType
                     _ -> Right $ mkTypeExtra $ AnonymousCompositeType
                             $ map (teType . snd) selType
                   {-# LINE 15150 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 655, column 9)
              _selOouterDownEnv =
                  ({-# LINE 655 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Just _lhsIdownEnv
                   {-# LINE 15156 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 659, column 9)
              _selOexpectedType =
                  ({-# LINE 659 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   liftM (map snd) _selIupType
                   {-# LINE 15162 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ScalarSubQuery _annIannotatedTree _selIannotatedTree
                   {-# LINE 15168 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ScalarSubQuery _annIoriginalTree _selIoriginalTree
                   {-# LINE 15174 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15180 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15186 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15192 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15198 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 15204 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15210 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15216 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15222 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOassignmentCastContext _selOcat _selOexpectedType _selOflags _selOimCast _selOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_AntiScalarExpr :: String ->
                                 T_ScalarExpr
_sem_ScalarExpr_AntiScalarExpr string_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _lhsOupType :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 232, column 21)
              _lhsOcolExprs =
                  ({-# LINE 232 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   [(Nmc "?anti?",Nothing,_originalTree)]
                   {-# LINE 15248 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 108, column 9)
              _lhsOupType =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 15254 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 741, column 9)
              _tpe =
                  ({-# LINE 741 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Left []
                   {-# LINE 15260 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiScalarExpr string_
                   {-# LINE 15266 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiScalarExpr string_
                   {-# LINE 15272 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15278 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15284 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_Parens :: T_Annotation ->
                         T_ScalarExpr ->
                         T_ScalarExpr
_sem_ScalarExpr_Parens ann_ ex_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _exOodbcFunction :: Bool
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _exOassignmentCastContext :: Bool
              _exOcat :: Catalog
              _exOdownEnv :: Environment
              _exOexpectedCast :: Bool
              _exOexpectedType :: (Maybe TypeExtra)
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: ScalarExpr
              _exIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr
              _exIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 15340 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 15346 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 15352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 15358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 15369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 187, column 14)
              _exOodbcFunction =
                  ({-# LINE 187 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 15375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 622, column 5)
              _tpe =
                  ({-# LINE 622 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   maybe (Left []) Right _exIupType
                   {-# LINE 15381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Parens _annIannotatedTree _exIannotatedTree
                   {-# LINE 15387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Parens _annIoriginalTree _exIoriginalTree
                   {-# LINE 15393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15405 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15411 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15417 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 15423 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15429 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 15435 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOexpectedCast =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 15441 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOexpectedType =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 15447 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15453 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15459 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOdownEnv _exOexpectedCast _exOexpectedType _exOflags _exOimCast _exOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_OdbcLiteral :: T_Annotation ->
                              OdbcLiteralType ->
                              String ->
                              T_ScalarExpr
_sem_ScalarExpr_OdbcLiteral ann_ olt_ val_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 15508 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 15514 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 15520 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 15526 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 15537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 309, column 10)
              _tpe =
                  ({-# LINE 309 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case olt_ of
                     OLDate -> Right $ mkTypeExtra typeDate
                     OLTime -> Right $ mkTypeExtra $ ScalarType "time"
                     OLTimestamp -> Right $ mkTypeExtra typeTimestamp
                   {-# LINE 15546 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   OdbcLiteral _annIannotatedTree olt_ val_
                   {-# LINE 15552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   OdbcLiteral _annIoriginalTree olt_ val_
                   {-# LINE 15558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15582 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExpr_OdbcFunc :: T_Annotation ->
                           T_ScalarExpr ->
                           T_ScalarExpr
_sem_ScalarExpr_OdbcFunc ann_ ex_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast
       _lhsIodbcFunction ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe TypeExtra)
              _annOimCast :: (Maybe TypeExtra)
              _exOodbcFunction :: Bool
              _exOcat :: Catalog
              _lhsOannotatedTree :: ScalarExpr
              _lhsOoriginalTree :: ScalarExpr
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _exOassignmentCastContext :: Bool
              _exOdownEnv :: Environment
              _exOexpectedCast :: Bool
              _exOexpectedType :: (Maybe TypeExtra)
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: ScalarExpr
              _exIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr
              _exIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 42, column 7)
              _lhsOcolExprs =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   let a = _annIoriginalTree
                       doStar is =
                         map (\((q,n),t) ->
                           let a' = a {anType = Just t}
                           in (Nmc $ T.unpack n, Just t,
                               Identifier a' $ Name a'
                                             $ [Nmc q' | let q' = T.unpack q, not $ null q']
                                               ++ [Nmc $ T.unpack n])
                           ) is
                   in case _originalTree of
                       Star _ | Right is <- E.envExpandStar Nothing _lhsIdownEnv ->
                          doStar is
                       QStar _ q | Right is <- E.envExpandStar (Just q) _lhsIdownEnv ->
                          doStar is
                       _ ->
                              [(columnName _originalTree,_upType,_annotatedTree)]
                   {-# LINE 15640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 43, column 9)
              _annOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _tpe
                   {-# LINE 15646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 44, column 9)
              _upType =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 15652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 45, column 9)
              _lhsOupType =
                  ({-# LINE 45 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _upType
                   {-# LINE 15658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 46, column 9)
              _annOimCast =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _upType     of
                      Nothing -> _lhsIexpectedType
                      Just upType -> do
                          expType <- _lhsIexpectedType
                          guard $ needsImplicitCast _lhsIexpectedCast upType expType
                          return $ implicitCastType _lhsIexpectedCast upType expType
                   {-# LINE 15669 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 188, column 16)
              _exOodbcFunction =
                  ({-# LINE 188 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   True
                   {-# LINE 15675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 315, column 10)
              _exOcat =
                  ({-# LINE 315 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   id _lhsIcat
                   {-# LINE 15681 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 316, column 10)
              _tpe =
                  ({-# LINE 316 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _exIoriginalTree of
                     Extract {} -> maybe (Left []) Right _exIupType
                     App {} -> maybe (Left []) Right _exIupType
                     _ -> Left [OdbcFuncBadContent]
                   {-# LINE 15690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   OdbcFunc _annIannotatedTree _exIannotatedTree
                   {-# LINE 15696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   OdbcFunc _annIoriginalTree _exIoriginalTree
                   {-# LINE 15702 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15708 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 15732 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 15738 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOexpectedCast =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 15744 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOexpectedType =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 15750 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15756 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15762 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOdownEnv _exOexpectedCast _exOexpectedType _exOflags _exOimCast _exOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupType)))
-- ScalarExprDirectionPair -------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprDirectionPair 
         originalTree         : ScalarExprDirectionPair 
   alternatives:
      alternative Tuple:
         child x1             : ScalarExpr 
         child x2             : {Direction}
         child x3             : {NullsOrder}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprDirectionPair = ( ScalarExpr,(Direction),(NullsOrder))
-- cata
_sem_ScalarExprDirectionPair :: ScalarExprDirectionPair ->
                               T_ScalarExprDirectionPair
_sem_ScalarExprDirectionPair ( x1,x2,x3) =
    (_sem_ScalarExprDirectionPair_Tuple (_sem_ScalarExpr x1) x2 x3)
-- semantic domain
type T_ScalarExprDirectionPair = Catalog ->
                                 Environment ->
                                 TypeCheckingFlags ->
                                 (Maybe TypeExtra) ->
                                 ( ScalarExprDirectionPair,ScalarExprDirectionPair)
data Inh_ScalarExprDirectionPair = Inh_ScalarExprDirectionPair {_cat_Inh_ScalarExprDirectionPair :: Catalog,_downEnv_Inh_ScalarExprDirectionPair :: Environment,_flags_Inh_ScalarExprDirectionPair :: TypeCheckingFlags,_imCast_Inh_ScalarExprDirectionPair :: (Maybe TypeExtra)}
data Syn_ScalarExprDirectionPair = Syn_ScalarExprDirectionPair {_annotatedTree_Syn_ScalarExprDirectionPair :: ScalarExprDirectionPair,_originalTree_Syn_ScalarExprDirectionPair :: ScalarExprDirectionPair}
_wrap_ScalarExprDirectionPair :: T_ScalarExprDirectionPair ->
                                Inh_ScalarExprDirectionPair ->
                                Syn_ScalarExprDirectionPair
_wrap_ScalarExprDirectionPair sem (Inh_ScalarExprDirectionPair _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprDirectionPair _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprDirectionPair_Tuple :: T_ScalarExpr ->
                                     Direction ->
                                     NullsOrder ->
                                     T_ScalarExprDirectionPair
_sem_ScalarExprDirectionPair_Tuple x1_ x2_ x3_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _x1OexpectedCast :: Bool
              _x1OodbcFunction :: Bool
              _x1OexpectedType :: (Maybe TypeExtra)
              _x1OassignmentCastContext :: Bool
              _lhsOannotatedTree :: ScalarExprDirectionPair
              _lhsOoriginalTree :: ScalarExprDirectionPair
              _x1Ocat :: Catalog
              _x1OdownEnv :: Environment
              _x1Oflags :: TypeCheckingFlags
              _x1OimCast :: (Maybe TypeExtra)
              _x1IannotatedTree :: ScalarExpr
              _x1IcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _x1IoriginalTree :: ScalarExpr
              _x1IupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 92, column 37)
              _x1OexpectedCast =
                  ({-# LINE 92 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 15836 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 158, column 13)
              _x1OodbcFunction =
                  ({-# LINE 158 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 15842 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 762, column 11)
              _x1OexpectedType =
                  ({-# LINE 762 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 15848 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 822, column 37)
              _x1OassignmentCastContext =
                  ({-# LINE 822 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 15854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,x2_,x3_)
                   {-# LINE 15860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,x2_,x3_)
                   {-# LINE 15866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 15884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 15890 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 15896 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 15902 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _x1IannotatedTree,_x1IcolExprs,_x1IoriginalTree,_x1IupType) =
                  x1_ _x1OassignmentCastContext _x1Ocat _x1OdownEnv _x1OexpectedCast _x1OexpectedType _x1Oflags _x1OimCast _x1OodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprDirectionPairList ---------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprDirectionPairList 
         originalTree         : ScalarExprDirectionPairList 
   alternatives:
      alternative Cons:
         child hd             : ScalarExprDirectionPair 
         child tl             : ScalarExprDirectionPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprDirectionPairList = [ScalarExprDirectionPair]
-- cata
_sem_ScalarExprDirectionPairList :: ScalarExprDirectionPairList ->
                                   T_ScalarExprDirectionPairList
_sem_ScalarExprDirectionPairList list =
    (Prelude.foldr _sem_ScalarExprDirectionPairList_Cons _sem_ScalarExprDirectionPairList_Nil (Prelude.map _sem_ScalarExprDirectionPair list))
-- semantic domain
type T_ScalarExprDirectionPairList = Catalog ->
                                     Environment ->
                                     TypeCheckingFlags ->
                                     (Maybe TypeExtra) ->
                                     ( ScalarExprDirectionPairList,ScalarExprDirectionPairList)
data Inh_ScalarExprDirectionPairList = Inh_ScalarExprDirectionPairList {_cat_Inh_ScalarExprDirectionPairList :: Catalog,_downEnv_Inh_ScalarExprDirectionPairList :: Environment,_flags_Inh_ScalarExprDirectionPairList :: TypeCheckingFlags,_imCast_Inh_ScalarExprDirectionPairList :: (Maybe TypeExtra)}
data Syn_ScalarExprDirectionPairList = Syn_ScalarExprDirectionPairList {_annotatedTree_Syn_ScalarExprDirectionPairList :: ScalarExprDirectionPairList,_originalTree_Syn_ScalarExprDirectionPairList :: ScalarExprDirectionPairList}
_wrap_ScalarExprDirectionPairList :: T_ScalarExprDirectionPairList ->
                                    Inh_ScalarExprDirectionPairList ->
                                    Syn_ScalarExprDirectionPairList
_wrap_ScalarExprDirectionPairList sem (Inh_ScalarExprDirectionPairList _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprDirectionPairList _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprDirectionPairList_Cons :: T_ScalarExprDirectionPair ->
                                        T_ScalarExprDirectionPairList ->
                                        T_ScalarExprDirectionPairList
_sem_ScalarExprDirectionPairList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprDirectionPairList
              _lhsOoriginalTree :: ScalarExprDirectionPairList
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ScalarExprDirectionPair
              _hdIoriginalTree :: ScalarExprDirectionPair
              _tlIannotatedTree :: ScalarExprDirectionPairList
              _tlIoriginalTree :: ScalarExprDirectionPairList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 15976 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 15982 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 15988 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 15994 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16000 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOdownEnv =
                  ({-# LINE 215 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 16006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16018 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16024 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 215 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 16030 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16036 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16042 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOdownEnv _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOdownEnv _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_ScalarExprDirectionPairList_Nil :: T_ScalarExprDirectionPairList
_sem_ScalarExprDirectionPairList_Nil =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprDirectionPairList
              _lhsOoriginalTree :: ScalarExprDirectionPairList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 16061 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 16067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16073 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16079 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprList ----------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedTypes        : [TypeExtra]
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprList 
         originalTree         : ScalarExprList 
         upTypes              : [Maybe TypeExtra]
   alternatives:
      alternative Cons:
         child hd             : ScalarExpr 
         child tl             : ScalarExprList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprList = [ScalarExpr]
-- cata
_sem_ScalarExprList :: ScalarExprList ->
                      T_ScalarExprList
_sem_ScalarExprList list =
    (Prelude.foldr _sem_ScalarExprList_Cons _sem_ScalarExprList_Nil (Prelude.map _sem_ScalarExpr list))
-- semantic domain
type T_ScalarExprList = Bool ->
                        Catalog ->
                        Environment ->
                        Bool ->
                        ([TypeExtra]) ->
                        TypeCheckingFlags ->
                        (Maybe TypeExtra) ->
                        ( ScalarExprList,ScalarExprList,([Maybe TypeExtra]))
data Inh_ScalarExprList = Inh_ScalarExprList {_assignmentCastContext_Inh_ScalarExprList :: Bool,_cat_Inh_ScalarExprList :: Catalog,_downEnv_Inh_ScalarExprList :: Environment,_expectedCast_Inh_ScalarExprList :: Bool,_expectedTypes_Inh_ScalarExprList :: ([TypeExtra]),_flags_Inh_ScalarExprList :: TypeCheckingFlags,_imCast_Inh_ScalarExprList :: (Maybe TypeExtra)}
data Syn_ScalarExprList = Syn_ScalarExprList {_annotatedTree_Syn_ScalarExprList :: ScalarExprList,_originalTree_Syn_ScalarExprList :: ScalarExprList,_upTypes_Syn_ScalarExprList :: ([Maybe TypeExtra])}
_wrap_ScalarExprList :: T_ScalarExprList ->
                       Inh_ScalarExprList ->
                       Syn_ScalarExprList
_wrap_ScalarExprList sem (Inh_ScalarExprList _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedTypes _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupTypes) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedTypes _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprList _lhsOannotatedTree _lhsOoriginalTree _lhsOupTypes))
_sem_ScalarExprList_Cons :: T_ScalarExpr ->
                           T_ScalarExprList ->
                           T_ScalarExprList
_sem_ScalarExprList_Cons hd_ tl_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedTypes
       _lhsIflags
       _lhsIimCast ->
         (let _hdOodbcFunction :: Bool
              _lhsOupTypes :: ([Maybe TypeExtra])
              _hdOexpectedType :: (Maybe TypeExtra)
              _tlOexpectedTypes :: ([TypeExtra])
              _hdOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExprList
              _lhsOoriginalTree :: ScalarExprList
              _hdOassignmentCastContext :: Bool
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOassignmentCastContext :: Bool
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOexpectedCast :: Bool
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ScalarExpr
              _hdIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _hdIoriginalTree :: ScalarExpr
              _hdIupType :: (Maybe TypeExtra)
              _tlIannotatedTree :: ScalarExprList
              _tlIoriginalTree :: ScalarExprList
              _tlIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 161, column 12)
              _hdOodbcFunction =
                  ({-# LINE 161 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 16172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 202, column 9)
              _lhsOupTypes =
                  ({-# LINE 202 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _hdIupType : _tlIupTypes
                   {-# LINE 16178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 203, column 9)
              (_hdOexpectedType,_tlOexpectedTypes) =
                  ({-# LINE 203 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   case _lhsIexpectedTypes of
                       (x:xs) -> (Just x,xs)
                       [] -> (Nothing,[])
                   {-# LINE 16186 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 207, column 9)
              _hdOexpectedCast =
                  ({-# LINE 207 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 16192 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 16198 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 16204 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16210 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16216 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 16222 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 16234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 16252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 195 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 16264 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOexpectedCast =
                  ({-# LINE 198 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 16270 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16276 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIcolExprs,_hdIoriginalTree,_hdIupType) =
                  hd_ _hdOassignmentCastContext _hdOcat _hdOdownEnv _hdOexpectedCast _hdOexpectedType _hdOflags _hdOimCast _hdOodbcFunction
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIupTypes) =
                  tl_ _tlOassignmentCastContext _tlOcat _tlOdownEnv _tlOexpectedCast _tlOexpectedTypes _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupTypes)))
_sem_ScalarExprList_Nil :: T_ScalarExprList
_sem_ScalarExprList_Nil =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedTypes
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupTypes :: ([Maybe TypeExtra])
              _lhsOannotatedTree :: ScalarExprList
              _lhsOoriginalTree :: ScalarExprList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 208, column 11)
              _lhsOupTypes =
                  ({-# LINE 208 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   []
                   {-# LINE 16305 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 16311 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 16317 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16323 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16329 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupTypes)))
-- ScalarExprListList ------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe [TypeExtra]
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprListList 
         originalTree         : ScalarExprListList 
         upType               : Either [TypeError] [(Text,TypeExtra)]
   alternatives:
      alternative Cons:
         child hd             : ScalarExprTransposedList 
         child tl             : ScalarExprListList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprListList = [ScalarExprTransposedList]
-- cata
_sem_ScalarExprListList :: ScalarExprListList ->
                          T_ScalarExprListList
_sem_ScalarExprListList list =
    (Prelude.foldr _sem_ScalarExprListList_Cons _sem_ScalarExprListList_Nil (Prelude.map _sem_ScalarExprTransposedList list))
-- semantic domain
type T_ScalarExprListList = Bool ->
                            Catalog ->
                            Environment ->
                            Bool ->
                            (Maybe [TypeExtra]) ->
                            TypeCheckingFlags ->
                            (Maybe TypeExtra) ->
                            ( ScalarExprListList,ScalarExprListList,(Either [TypeError] [(Text,TypeExtra)]))
data Inh_ScalarExprListList = Inh_ScalarExprListList {_assignmentCastContext_Inh_ScalarExprListList :: Bool,_cat_Inh_ScalarExprListList :: Catalog,_downEnv_Inh_ScalarExprListList :: Environment,_expectedCast_Inh_ScalarExprListList :: Bool,_expectedType_Inh_ScalarExprListList :: (Maybe [TypeExtra]),_flags_Inh_ScalarExprListList :: TypeCheckingFlags,_imCast_Inh_ScalarExprListList :: (Maybe TypeExtra)}
data Syn_ScalarExprListList = Syn_ScalarExprListList {_annotatedTree_Syn_ScalarExprListList :: ScalarExprListList,_originalTree_Syn_ScalarExprListList :: ScalarExprListList,_upType_Syn_ScalarExprListList :: (Either [TypeError] [(Text,TypeExtra)])}
_wrap_ScalarExprListList :: T_ScalarExprListList ->
                           Inh_ScalarExprListList ->
                           Syn_ScalarExprListList
_wrap_ScalarExprListList sem (Inh_ScalarExprListList _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprListList _lhsOannotatedTree _lhsOoriginalTree _lhsOupType))
_sem_ScalarExprListList_Cons :: T_ScalarExprTransposedList ->
                               T_ScalarExprListList ->
                               T_ScalarExprListList
_sem_ScalarExprListList_Cons hd_ tl_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupType :: (Either [TypeError] [(Text,TypeExtra)])
              _hdOexpectedCast :: Bool
              _tlOexpectedCast :: Bool
              _lhsOannotatedTree :: ScalarExprListList
              _lhsOoriginalTree :: ScalarExprListList
              _hdOcat :: Catalog
              _hdOexpectedType :: (Maybe [TypeExtra])
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOassignmentCastContext :: Bool
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOexpectedType :: (Maybe [TypeExtra])
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ScalarExprTransposedList
              _hdIoriginalTree :: ScalarExprTransposedList
              _hdIupType :: (Maybe [TypeExtra])
              _tlIannotatedTree :: ScalarExprListList
              _tlIoriginalTree :: ScalarExprListList
              _tlIupType :: (Either [TypeError] [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 191, column 9)
              _lhsOupType =
                  ({-# LINE 191 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   do
                   a <- maybe (Left [InternalError "type error in VALUES clause"]) Right _hdIupType
                   b <- _tlIupType
                   unless (not $ null a) $ Left [InternalError "empty row in VALUES clause"]
                   let a' = map ("",) a
                       itError = Left [IncompatibleUnionTypes (CompositeType a') (CompositeType b)]
                   unless (null b || length a == length b) itError
                   if null b
                     then return $ zip [T.pack ("values%" ++ show k) | k <- [(0::Int)..]] a
                     else
                       do
                       let uts = zipWithM (\te1 (_,te2) -> resolveResultSetTypeExtra _lhsIcat [te1,te2])
                                     a b
                       case uts of
                         Left{} -> itError
                         Right uts' -> return $ zipWith (\(n,_) te -> (n,te)) b uts'
                   {-# LINE 16433 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 209, column 9)
              _hdOexpectedCast =
                  ({-# LINE 209 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 16439 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 210, column 9)
              _tlOexpectedCast =
                  ({-# LINE 210 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 16445 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 16451 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 16457 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16463 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16469 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16475 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOexpectedType =
                  ({-# LINE 169 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 16481 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16487 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16493 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 16499 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16505 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 183 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 16511 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOexpectedType =
                  ({-# LINE 186 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 16517 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16523 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16529 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree,_hdIupType) =
                  hd_ _hdOcat _hdOexpectedCast _hdOexpectedType _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIupType) =
                  tl_ _tlOassignmentCastContext _tlOcat _tlOdownEnv _tlOexpectedCast _tlOexpectedType _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExprListList_Nil :: T_ScalarExprListList
_sem_ScalarExprListList_Nil =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupType :: (Either [TypeError] [(Text,TypeExtra)])
              _lhsOannotatedTree :: ScalarExprListList
              _lhsOoriginalTree :: ScalarExprListList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 211, column 11)
              _lhsOupType =
                  ({-# LINE 211 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Right []
                   {-# LINE 16552 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 16558 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 16564 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16570 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16576 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
-- ScalarExprListStatementListTriple ---------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprListStatementListTriple 
         originalTree         : ScalarExprListStatementListTriple 
   alternatives:
      alternative Tuple:
         child x1             : ScalarExprList 
         child x2             : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprListStatementListTriple = ( ScalarExprList,StatementList)
-- cata
_sem_ScalarExprListStatementListTriple :: ScalarExprListStatementListTriple ->
                                         T_ScalarExprListStatementListTriple
_sem_ScalarExprListStatementListTriple ( x1,x2) =
    (_sem_ScalarExprListStatementListTriple_Tuple (_sem_ScalarExprList x1) (_sem_StatementList x2))
-- semantic domain
type T_ScalarExprListStatementListTriple = Catalog ->
                                           TypeCheckingFlags ->
                                           (Maybe TypeExtra) ->
                                           ( ScalarExprListStatementListTriple,ScalarExprListStatementListTriple)
data Inh_ScalarExprListStatementListTriple = Inh_ScalarExprListStatementListTriple {_cat_Inh_ScalarExprListStatementListTriple :: Catalog,_flags_Inh_ScalarExprListStatementListTriple :: TypeCheckingFlags,_imCast_Inh_ScalarExprListStatementListTriple :: (Maybe TypeExtra)}
data Syn_ScalarExprListStatementListTriple = Syn_ScalarExprListStatementListTriple {_annotatedTree_Syn_ScalarExprListStatementListTriple :: ScalarExprListStatementListTriple,_originalTree_Syn_ScalarExprListStatementListTriple :: ScalarExprListStatementListTriple}
_wrap_ScalarExprListStatementListTriple :: T_ScalarExprListStatementListTriple ->
                                          Inh_ScalarExprListStatementListTriple ->
                                          Syn_ScalarExprListStatementListTriple
_wrap_ScalarExprListStatementListTriple sem (Inh_ScalarExprListStatementListTriple _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprListStatementListTriple _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprListStatementListTriple_Tuple :: T_ScalarExprList ->
                                               T_StatementList ->
                                               T_ScalarExprListStatementListTriple
_sem_ScalarExprListStatementListTriple_Tuple x1_ x2_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _x1OdownEnv :: Environment
              _x1OexpectedCast :: Bool
              _x1OexpectedTypes :: ([TypeExtra])
              _x1OassignmentCastContext :: Bool
              _lhsOannotatedTree :: ScalarExprListStatementListTriple
              _lhsOoriginalTree :: ScalarExprListStatementListTriple
              _x1Ocat :: Catalog
              _x1Oflags :: TypeCheckingFlags
              _x1OimCast :: (Maybe TypeExtra)
              _x2Ocat :: Catalog
              _x2Oflags :: TypeCheckingFlags
              _x2OimCast :: (Maybe TypeExtra)
              _x1IannotatedTree :: ScalarExprList
              _x1IoriginalTree :: ScalarExprList
              _x1IupTypes :: ([Maybe TypeExtra])
              _x2IannotatedTree :: StatementList
              _x2IoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 93, column 47)
              _x1OdownEnv =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 16644 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 94, column 47)
              _x1OexpectedCast =
                  ({-# LINE 94 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 16650 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 95, column 47)
              _x1OexpectedTypes =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   []
                   {-# LINE 16656 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 823, column 47)
              _x1OassignmentCastContext =
                  ({-# LINE 823 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 16662 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,_x2IannotatedTree)
                   {-# LINE 16668 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,_x2IoriginalTree)
                   {-# LINE 16674 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16680 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16686 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16692 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16698 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16704 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16710 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16716 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16722 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _x1IannotatedTree,_x1IoriginalTree,_x1IupTypes) =
                  x1_ _x1OassignmentCastContext _x1Ocat _x1OdownEnv _x1OexpectedCast _x1OexpectedTypes _x1Oflags _x1OimCast
              ( _x2IannotatedTree,_x2IoriginalTree) =
                  x2_ _x2Ocat _x2Oflags _x2OimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprListStatementListTripleList -----------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprListStatementListTripleList 
         originalTree         : ScalarExprListStatementListTripleList 
   alternatives:
      alternative Cons:
         child hd             : ScalarExprListStatementListTriple 
         child tl             : ScalarExprListStatementListTripleList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprListStatementListTripleList = [ScalarExprListStatementListTriple]
-- cata
_sem_ScalarExprListStatementListTripleList :: ScalarExprListStatementListTripleList ->
                                             T_ScalarExprListStatementListTripleList
_sem_ScalarExprListStatementListTripleList list =
    (Prelude.foldr _sem_ScalarExprListStatementListTripleList_Cons _sem_ScalarExprListStatementListTripleList_Nil (Prelude.map _sem_ScalarExprListStatementListTriple list))
-- semantic domain
type T_ScalarExprListStatementListTripleList = Catalog ->
                                               TypeCheckingFlags ->
                                               (Maybe TypeExtra) ->
                                               ( ScalarExprListStatementListTripleList,ScalarExprListStatementListTripleList)
data Inh_ScalarExprListStatementListTripleList = Inh_ScalarExprListStatementListTripleList {_cat_Inh_ScalarExprListStatementListTripleList :: Catalog,_flags_Inh_ScalarExprListStatementListTripleList :: TypeCheckingFlags,_imCast_Inh_ScalarExprListStatementListTripleList :: (Maybe TypeExtra)}
data Syn_ScalarExprListStatementListTripleList = Syn_ScalarExprListStatementListTripleList {_annotatedTree_Syn_ScalarExprListStatementListTripleList :: ScalarExprListStatementListTripleList,_originalTree_Syn_ScalarExprListStatementListTripleList :: ScalarExprListStatementListTripleList}
_wrap_ScalarExprListStatementListTripleList :: T_ScalarExprListStatementListTripleList ->
                                              Inh_ScalarExprListStatementListTripleList ->
                                              Syn_ScalarExprListStatementListTripleList
_wrap_ScalarExprListStatementListTripleList sem (Inh_ScalarExprListStatementListTripleList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprListStatementListTripleList _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprListStatementListTripleList_Cons :: T_ScalarExprListStatementListTriple ->
                                                  T_ScalarExprListStatementListTripleList ->
                                                  T_ScalarExprListStatementListTripleList
_sem_ScalarExprListStatementListTripleList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprListStatementListTripleList
              _lhsOoriginalTree :: ScalarExprListStatementListTripleList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ScalarExprListStatementListTriple
              _hdIoriginalTree :: ScalarExprListStatementListTriple
              _tlIannotatedTree :: ScalarExprListStatementListTripleList
              _tlIoriginalTree :: ScalarExprListStatementListTripleList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 16793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 16799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 16835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 16841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 16847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_ScalarExprListStatementListTripleList_Nil :: T_ScalarExprListStatementListTripleList
_sem_ScalarExprListStatementListTripleList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprListStatementListTripleList
              _lhsOoriginalTree :: ScalarExprListStatementListTripleList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 16865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 16871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16877 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 16883 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprRoot ----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         downEnv              : Environment
         flags                : TypeCheckingFlags
      synthesized attributes:
         annotatedTree        : ScalarExprRoot 
         originalTree         : ScalarExprRoot 
   alternatives:
      alternative ScalarExprRoot:
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data ScalarExprRoot = ScalarExprRoot (ScalarExpr)
                    deriving ( Show)
-- cata
_sem_ScalarExprRoot :: ScalarExprRoot ->
                      T_ScalarExprRoot
_sem_ScalarExprRoot (ScalarExprRoot _expr) =
    (_sem_ScalarExprRoot_ScalarExprRoot (_sem_ScalarExpr _expr))
-- semantic domain
type T_ScalarExprRoot = Catalog ->
                        Environment ->
                        TypeCheckingFlags ->
                        ( ScalarExprRoot,ScalarExprRoot)
data Inh_ScalarExprRoot = Inh_ScalarExprRoot {_cat_Inh_ScalarExprRoot :: Catalog,_downEnv_Inh_ScalarExprRoot :: Environment,_flags_Inh_ScalarExprRoot :: TypeCheckingFlags}
data Syn_ScalarExprRoot = Syn_ScalarExprRoot {_annotatedTree_Syn_ScalarExprRoot :: ScalarExprRoot,_originalTree_Syn_ScalarExprRoot :: ScalarExprRoot}
_wrap_ScalarExprRoot :: T_ScalarExprRoot ->
                       Inh_ScalarExprRoot ->
                       Syn_ScalarExprRoot
_wrap_ScalarExprRoot sem (Inh_ScalarExprRoot _lhsIcat _lhsIdownEnv _lhsIflags) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIdownEnv _lhsIflags
     in  (Syn_ScalarExprRoot _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprRoot_ScalarExprRoot :: T_ScalarExpr ->
                                     T_ScalarExprRoot
_sem_ScalarExprRoot_ScalarExprRoot expr_ =
    (\ _lhsIcat
       _lhsIdownEnv
       _lhsIflags ->
         (let _exprOexpectedCast :: Bool
              _exprOodbcFunction :: Bool
              _exprOdownEnv :: Environment
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOassignmentCastContext :: Bool
              _exprOimCast :: (Maybe TypeExtra)
              _lhsOannotatedTree :: ScalarExprRoot
              _lhsOoriginalTree :: ScalarExprRoot
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckingFlags
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 96, column 37)
              _exprOexpectedCast =
                  ({-# LINE 96 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 16947 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 164, column 22)
              _exprOodbcFunction =
                  ({-# LINE 164 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 16953 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 242, column 9)
              _exprOdownEnv =
                  ({-# LINE 242 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 16959 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 747, column 20)
              _exprOexpectedType =
                  ({-# LINE 747 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   Nothing
                   {-# LINE 16965 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 824, column 37)
              _exprOassignmentCastContext =
                  ({-# LINE 824 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 16971 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag"(line 139, column 8)
              _exprOimCast =
                  ({-# LINE 139 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Nothing
                   {-# LINE 16977 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ScalarExprRoot _exprIannotatedTree
                   {-# LINE 16983 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ScalarExprRoot _exprIoriginalTree
                   {-# LINE 16989 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 16995 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17001 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17007 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17013 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprStatementListPair ---------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprStatementListPair 
         originalTree         : ScalarExprStatementListPair 
   alternatives:
      alternative Tuple:
         child x1             : ScalarExpr 
         child x2             : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprStatementListPair = ( ScalarExpr,StatementList)
-- cata
_sem_ScalarExprStatementListPair :: ScalarExprStatementListPair ->
                                   T_ScalarExprStatementListPair
_sem_ScalarExprStatementListPair ( x1,x2) =
    (_sem_ScalarExprStatementListPair_Tuple (_sem_ScalarExpr x1) (_sem_StatementList x2))
-- semantic domain
type T_ScalarExprStatementListPair = Catalog ->
                                     TypeCheckingFlags ->
                                     (Maybe TypeExtra) ->
                                     ( ScalarExprStatementListPair,ScalarExprStatementListPair)
data Inh_ScalarExprStatementListPair = Inh_ScalarExprStatementListPair {_cat_Inh_ScalarExprStatementListPair :: Catalog,_flags_Inh_ScalarExprStatementListPair :: TypeCheckingFlags,_imCast_Inh_ScalarExprStatementListPair :: (Maybe TypeExtra)}
data Syn_ScalarExprStatementListPair = Syn_ScalarExprStatementListPair {_annotatedTree_Syn_ScalarExprStatementListPair :: ScalarExprStatementListPair,_originalTree_Syn_ScalarExprStatementListPair :: ScalarExprStatementListPair}
_wrap_ScalarExprStatementListPair :: T_ScalarExprStatementListPair ->
                                    Inh_ScalarExprStatementListPair ->
                                    Syn_ScalarExprStatementListPair
_wrap_ScalarExprStatementListPair sem (Inh_ScalarExprStatementListPair _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprStatementListPair _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprStatementListPair_Tuple :: T_ScalarExpr ->
                                         T_StatementList ->
                                         T_ScalarExprStatementListPair
_sem_ScalarExprStatementListPair_Tuple x1_ x2_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _x1OdownEnv :: Environment
              _x1OexpectedCast :: Bool
              _x1OexpectedType :: (Maybe TypeExtra)
              _x1OodbcFunction :: Bool
              _x1OassignmentCastContext :: Bool
              _lhsOannotatedTree :: ScalarExprStatementListPair
              _lhsOoriginalTree :: ScalarExprStatementListPair
              _x1Ocat :: Catalog
              _x1Oflags :: TypeCheckingFlags
              _x1OimCast :: (Maybe TypeExtra)
              _x2Ocat :: Catalog
              _x2Oflags :: TypeCheckingFlags
              _x2OimCast :: (Maybe TypeExtra)
              _x1IannotatedTree :: ScalarExpr
              _x1IcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _x1IoriginalTree :: ScalarExpr
              _x1IupType :: (Maybe TypeExtra)
              _x2IannotatedTree :: StatementList
              _x2IoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 97, column 41)
              _x1OdownEnv =
                  ({-# LINE 97 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 17085 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 98, column 41)
              _x1OexpectedCast =
                  ({-# LINE 98 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 17091 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 99, column 41)
              _x1OexpectedType =
                  ({-# LINE 99 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 17097 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 100, column 41)
              _x1OodbcFunction =
                  ({-# LINE 100 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 17103 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 825, column 41)
              _x1OassignmentCastContext =
                  ({-# LINE 825 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 17109 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IannotatedTree,_x2IannotatedTree)
                   {-# LINE 17115 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (_x1IoriginalTree,_x2IoriginalTree)
                   {-# LINE 17121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 17127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17145 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x1OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17151 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _x2OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _x1IannotatedTree,_x1IcolExprs,_x1IoriginalTree,_x1IupType) =
                  x1_ _x1OassignmentCastContext _x1Ocat _x1OdownEnv _x1OexpectedCast _x1OexpectedType _x1Oflags _x1OimCast _x1OodbcFunction
              ( _x2IannotatedTree,_x2IoriginalTree) =
                  x2_ _x2Ocat _x2Oflags _x2OimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprStatementListPairList -----------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprStatementListPairList 
         originalTree         : ScalarExprStatementListPairList 
   alternatives:
      alternative Cons:
         child hd             : ScalarExprStatementListPair 
         child tl             : ScalarExprStatementListPairList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprStatementListPairList = [ScalarExprStatementListPair]
-- cata
_sem_ScalarExprStatementListPairList :: ScalarExprStatementListPairList ->
                                       T_ScalarExprStatementListPairList
_sem_ScalarExprStatementListPairList list =
    (Prelude.foldr _sem_ScalarExprStatementListPairList_Cons _sem_ScalarExprStatementListPairList_Nil (Prelude.map _sem_ScalarExprStatementListPair list))
-- semantic domain
type T_ScalarExprStatementListPairList = Catalog ->
                                         TypeCheckingFlags ->
                                         (Maybe TypeExtra) ->
                                         ( ScalarExprStatementListPairList,ScalarExprStatementListPairList)
data Inh_ScalarExprStatementListPairList = Inh_ScalarExprStatementListPairList {_cat_Inh_ScalarExprStatementListPairList :: Catalog,_flags_Inh_ScalarExprStatementListPairList :: TypeCheckingFlags,_imCast_Inh_ScalarExprStatementListPairList :: (Maybe TypeExtra)}
data Syn_ScalarExprStatementListPairList = Syn_ScalarExprStatementListPairList {_annotatedTree_Syn_ScalarExprStatementListPairList :: ScalarExprStatementListPairList,_originalTree_Syn_ScalarExprStatementListPairList :: ScalarExprStatementListPairList}
_wrap_ScalarExprStatementListPairList :: T_ScalarExprStatementListPairList ->
                                        Inh_ScalarExprStatementListPairList ->
                                        Syn_ScalarExprStatementListPairList
_wrap_ScalarExprStatementListPairList sem (Inh_ScalarExprStatementListPairList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprStatementListPairList _lhsOannotatedTree _lhsOoriginalTree))
_sem_ScalarExprStatementListPairList_Cons :: T_ScalarExprStatementListPair ->
                                            T_ScalarExprStatementListPairList ->
                                            T_ScalarExprStatementListPairList
_sem_ScalarExprStatementListPairList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprStatementListPairList
              _lhsOoriginalTree :: ScalarExprStatementListPairList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ScalarExprStatementListPair
              _hdIoriginalTree :: ScalarExprStatementListPair
              _tlIannotatedTree :: ScalarExprStatementListPairList
              _tlIoriginalTree :: ScalarExprStatementListPairList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 17240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 17246 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 17252 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17258 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17264 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17270 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17276 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17288 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17294 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_ScalarExprStatementListPairList_Nil :: T_ScalarExprStatementListPairList
_sem_ScalarExprStatementListPairList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: ScalarExprStatementListPairList
              _lhsOoriginalTree :: ScalarExprStatementListPairList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 17312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 17318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 17324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- ScalarExprTransposedList ------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         expectedCast         : Bool
         expectedType         : Maybe [TypeExtra]
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : ScalarExprTransposedList 
         originalTree         : ScalarExprTransposedList 
         upType               : Maybe [TypeExtra]
   alternatives:
      alternative Cons:
         child hd             : ScalarExpr 
         child tl             : ScalarExprTransposedList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type ScalarExprTransposedList = [ScalarExpr]
-- cata
_sem_ScalarExprTransposedList :: ScalarExprTransposedList ->
                                T_ScalarExprTransposedList
_sem_ScalarExprTransposedList list =
    (Prelude.foldr _sem_ScalarExprTransposedList_Cons _sem_ScalarExprTransposedList_Nil (Prelude.map _sem_ScalarExpr list))
-- semantic domain
type T_ScalarExprTransposedList = Catalog ->
                                  Bool ->
                                  (Maybe [TypeExtra]) ->
                                  TypeCheckingFlags ->
                                  (Maybe TypeExtra) ->
                                  ( ScalarExprTransposedList,ScalarExprTransposedList,(Maybe [TypeExtra]))
data Inh_ScalarExprTransposedList = Inh_ScalarExprTransposedList {_cat_Inh_ScalarExprTransposedList :: Catalog,_expectedCast_Inh_ScalarExprTransposedList :: Bool,_expectedType_Inh_ScalarExprTransposedList :: (Maybe [TypeExtra]),_flags_Inh_ScalarExprTransposedList :: TypeCheckingFlags,_imCast_Inh_ScalarExprTransposedList :: (Maybe TypeExtra)}
data Syn_ScalarExprTransposedList = Syn_ScalarExprTransposedList {_annotatedTree_Syn_ScalarExprTransposedList :: ScalarExprTransposedList,_originalTree_Syn_ScalarExprTransposedList :: ScalarExprTransposedList,_upType_Syn_ScalarExprTransposedList :: (Maybe [TypeExtra])}
_wrap_ScalarExprTransposedList :: T_ScalarExprTransposedList ->
                                 Inh_ScalarExprTransposedList ->
                                 Syn_ScalarExprTransposedList
_wrap_ScalarExprTransposedList sem (Inh_ScalarExprTransposedList _lhsIcat _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType) = sem _lhsIcat _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_ScalarExprTransposedList _lhsOannotatedTree _lhsOoriginalTree _lhsOupType))
_sem_ScalarExprTransposedList_Cons :: T_ScalarExpr ->
                                     T_ScalarExprTransposedList ->
                                     T_ScalarExprTransposedList
_sem_ScalarExprTransposedList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _hdOdownEnv :: Environment
              _lhsOupType :: (Maybe [TypeExtra])
              _hdOexpectedType :: (Maybe TypeExtra)
              _tlOexpectedType :: (Maybe [TypeExtra])
              _hdOexpectedCast :: Bool
              _tlOexpectedCast :: Bool
              _hdOodbcFunction :: Bool
              _hdOassignmentCastContext :: Bool
              _lhsOannotatedTree :: ScalarExprTransposedList
              _lhsOoriginalTree :: ScalarExprTransposedList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: ScalarExpr
              _hdIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _hdIoriginalTree :: ScalarExpr
              _hdIupType :: (Maybe TypeExtra)
              _tlIannotatedTree :: ScalarExprTransposedList
              _tlIoriginalTree :: ScalarExprTransposedList
              _tlIupType :: (Maybe [TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 101, column 37)
              _hdOdownEnv =
                  ({-# LINE 101 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 17415 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 174, column 9)
              _lhsOupType =
                  ({-# LINE 174 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM2 (:) _hdIupType _tlIupType
                   {-# LINE 17421 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 175, column 9)
              _hdOexpectedType =
                  ({-# LINE 175 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM fst $ splitTypeExtraList _lhsIexpectedType
                   {-# LINE 17427 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 176, column 9)
              _tlOexpectedType =
                  ({-# LINE 176 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM snd $ splitTypeExtraList _lhsIexpectedType
                   {-# LINE 17433 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 177, column 9)
              _hdOexpectedCast =
                  ({-# LINE 177 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 17439 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 178, column 9)
              _tlOexpectedCast =
                  ({-# LINE 178 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 17445 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 168, column 12)
              _hdOodbcFunction =
                  ({-# LINE 168 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 17451 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 826, column 37)
              _hdOassignmentCastContext =
                  ({-# LINE 826 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 17457 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 17463 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 17469 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 17475 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17481 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17487 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17493 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17499 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17505 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17511 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17517 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIcolExprs,_hdIoriginalTree,_hdIupType) =
                  hd_ _hdOassignmentCastContext _hdOcat _hdOdownEnv _hdOexpectedCast _hdOexpectedType _hdOflags _hdOimCast _hdOodbcFunction
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIupType) =
                  tl_ _tlOcat _tlOexpectedCast _tlOexpectedType _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
_sem_ScalarExprTransposedList_Nil :: T_ScalarExprTransposedList
_sem_ScalarExprTransposedList_Nil =
    (\ _lhsIcat
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupType :: (Maybe [TypeExtra])
              _lhsOannotatedTree :: ScalarExprTransposedList
              _lhsOoriginalTree :: ScalarExprTransposedList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 180, column 9)
              _lhsOupType =
                  ({-# LINE 180 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Just []
                   {-# LINE 17538 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 17544 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 17550 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 17556 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17562 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupType)))
-- SelectItem --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe TypeExtra
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : SelectItem 
         colExprs             : [(NameComponent,Maybe TypeExtra,ScalarExpr)]
         originalTree         : SelectItem 
   alternatives:
      alternative SelExp:
         child ann            : Annotation 
         child ex             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative SelectItem:
         child ann            : Annotation 
         child ex             : ScalarExpr 
         child name           : {NameComponent}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data SelectItem = SelExp (Annotation) (ScalarExpr)
                | SelectItem (Annotation) (ScalarExpr) (NameComponent)
                deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_SelectItem :: SelectItem ->
                  T_SelectItem
_sem_SelectItem (SelExp _ann _ex) =
    (_sem_SelectItem_SelExp (_sem_Annotation _ann) (_sem_ScalarExpr _ex))
_sem_SelectItem (SelectItem _ann _ex _name) =
    (_sem_SelectItem_SelectItem (_sem_Annotation _ann) (_sem_ScalarExpr _ex) _name)
-- semantic domain
type T_SelectItem = Bool ->
                    Catalog ->
                    Environment ->
                    Bool ->
                    (Maybe TypeExtra) ->
                    TypeCheckingFlags ->
                    (Maybe TypeExtra) ->
                    ( SelectItem,([(NameComponent,Maybe TypeExtra,ScalarExpr)]),SelectItem)
data Inh_SelectItem = Inh_SelectItem {_assignmentCastContext_Inh_SelectItem :: Bool,_cat_Inh_SelectItem :: Catalog,_downEnv_Inh_SelectItem :: Environment,_expectedCast_Inh_SelectItem :: Bool,_expectedType_Inh_SelectItem :: (Maybe TypeExtra),_flags_Inh_SelectItem :: TypeCheckingFlags,_imCast_Inh_SelectItem :: (Maybe TypeExtra)}
data Syn_SelectItem = Syn_SelectItem {_annotatedTree_Syn_SelectItem :: SelectItem,_colExprs_Syn_SelectItem :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)]),_originalTree_Syn_SelectItem :: SelectItem}
_wrap_SelectItem :: T_SelectItem ->
                   Inh_SelectItem ->
                   Syn_SelectItem
_wrap_SelectItem sem (Inh_SelectItem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_SelectItem _lhsOannotatedTree _lhsOcolExprs _lhsOoriginalTree))
_sem_SelectItem_SelExp :: T_Annotation ->
                         T_ScalarExpr ->
                         T_SelectItem
_sem_SelectItem_SelExp ann_ ex_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SelectItem
              _annOtpe :: (Either [TypeError] TypeExtra)
              _exOexpectedType :: (Maybe TypeExtra)
              _exOexpectedCast :: Bool
              _exOodbcFunction :: Bool
              _lhsOoriginalTree :: SelectItem
              _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _exOassignmentCastContext :: Bool
              _exOcat :: Catalog
              _exOdownEnv :: Environment
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: ScalarExpr
              _exIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr
              _exIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 117, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   if tcfAddSelectItemAliases _lhsIflags
                   then case _exIcolExprs of
                          [(n,_,_)] -> SelectItem _annIannotatedTree _exIannotatedTree n
                          _ ->
                               _annotatedTree
                   else _annotatedTree
                   {-# LINE 17663 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 208, column 7)
              _annOtpe =
                  ({-# LINE 208 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   Left []
                   {-# LINE 17669 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 209, column 7)
              _exOexpectedType =
                  ({-# LINE 209 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 17675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 210, column 7)
              _exOexpectedCast =
                  ({-# LINE 210 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 17681 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 171, column 25)
              _exOodbcFunction =
                  ({-# LINE 171 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 17687 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelExp _annIannotatedTree _exIannotatedTree
                   {-# LINE 17693 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelExp _annIoriginalTree _exIoriginalTree
                   {-# LINE 17699 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17705 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOcolExprs =
                  ({-# LINE 150 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _exIcolExprs
                   {-# LINE 17711 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17717 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17723 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17729 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 17735 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17741 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 17747 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17753 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17759 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOdownEnv _exOexpectedCast _exOexpectedType _exOflags _exOimCast _exOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree)))
_sem_SelectItem_SelectItem :: T_Annotation ->
                             T_ScalarExpr ->
                             NameComponent ->
                             T_SelectItem
_sem_SelectItem_SelectItem ann_ ex_ name_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _annOtpe :: (Either [TypeError] TypeExtra)
              _exOexpectedType :: (Maybe TypeExtra)
              _exOexpectedCast :: Bool
              _exOodbcFunction :: Bool
              _lhsOannotatedTree :: SelectItem
              _lhsOoriginalTree :: SelectItem
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _exOassignmentCastContext :: Bool
              _exOcat :: Catalog
              _exOdownEnv :: Environment
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: ScalarExpr
              _exIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr
              _exIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 112, column 7)
              _lhsOcolExprs =
                  ({-# LINE 112 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   case _exIcolExprs of
                     [(_,t,e)] -> [(name_, t,e)]
                     x -> x
                   {-# LINE 17805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 208, column 7)
              _annOtpe =
                  ({-# LINE 208 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   Left []
                   {-# LINE 17811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 209, column 7)
              _exOexpectedType =
                  ({-# LINE 209 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 17817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 210, column 7)
              _exOexpectedCast =
                  ({-# LINE 210 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 17823 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 171, column 25)
              _exOodbcFunction =
                  ({-# LINE 171 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 17829 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelectItem _annIannotatedTree _exIannotatedTree name_
                   {-# LINE 17835 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelectItem _annIoriginalTree _exIoriginalTree name_
                   {-# LINE 17841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 17847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 17853 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17859 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17865 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 17877 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 17883 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOdownEnv =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 17889 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 17895 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 17901 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOdownEnv _exOexpectedCast _exOexpectedType _exOflags _exOimCast _exOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree)))
-- SelectItemList ----------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe [TypeExtra]
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : SelectItemList 
         colExprs             : [(NameComponent,Maybe TypeExtra,ScalarExpr)]
         originalTree         : SelectItemList 
         upEnv                : Environment
         upType               : Maybe [(Text,TypeExtra)]
   alternatives:
      alternative Cons:
         child hd             : SelectItem 
         child tl             : SelectItemList 
         visit 0:
            local colExprs    : _
            local upType      : _
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local upType      : _
            local annotatedTree : _
            local originalTree : _
-}
type SelectItemList = [SelectItem]
-- cata
_sem_SelectItemList :: SelectItemList ->
                      T_SelectItemList
_sem_SelectItemList list =
    (Prelude.foldr _sem_SelectItemList_Cons _sem_SelectItemList_Nil (Prelude.map _sem_SelectItem list))
-- semantic domain
type T_SelectItemList = Bool ->
                        Catalog ->
                        Environment ->
                        Bool ->
                        (Maybe [TypeExtra]) ->
                        TypeCheckingFlags ->
                        (Maybe TypeExtra) ->
                        ( SelectItemList,([(NameComponent,Maybe TypeExtra,ScalarExpr)]),SelectItemList,Environment,(Maybe [(Text,TypeExtra)]))
data Inh_SelectItemList = Inh_SelectItemList {_assignmentCastContext_Inh_SelectItemList :: Bool,_cat_Inh_SelectItemList :: Catalog,_downEnv_Inh_SelectItemList :: Environment,_expectedCast_Inh_SelectItemList :: Bool,_expectedType_Inh_SelectItemList :: (Maybe [TypeExtra]),_flags_Inh_SelectItemList :: TypeCheckingFlags,_imCast_Inh_SelectItemList :: (Maybe TypeExtra)}
data Syn_SelectItemList = Syn_SelectItemList {_annotatedTree_Syn_SelectItemList :: SelectItemList,_colExprs_Syn_SelectItemList :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)]),_originalTree_Syn_SelectItemList :: SelectItemList,_upEnv_Syn_SelectItemList :: Environment,_upType_Syn_SelectItemList :: (Maybe [(Text,TypeExtra)])}
_wrap_SelectItemList :: T_SelectItemList ->
                       Inh_SelectItemList ->
                       Syn_SelectItemList
_wrap_SelectItemList sem (Inh_SelectItemList _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_SelectItemList _lhsOannotatedTree _lhsOcolExprs _lhsOoriginalTree _lhsOupEnv _lhsOupType))
_sem_SelectItemList_Cons :: T_SelectItem ->
                           T_SelectItemList ->
                           T_SelectItemList
_sem_SelectItemList_Cons hd_ tl_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SelectItemList
              _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _hdOexpectedType :: (Maybe TypeExtra)
              _tlOexpectedType :: (Maybe [TypeExtra])
              _hdOexpectedCast :: Bool
              _tlOexpectedCast :: Bool
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _lhsOupEnv :: Environment
              _lhsOoriginalTree :: SelectItemList
              _hdOassignmentCastContext :: Bool
              _hdOcat :: Catalog
              _hdOdownEnv :: Environment
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOassignmentCastContext :: Bool
              _tlOcat :: Catalog
              _tlOdownEnv :: Environment
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: SelectItem
              _hdIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _hdIoriginalTree :: SelectItem
              _tlIannotatedTree :: SelectItemList
              _tlIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _tlIoriginalTree :: SelectItemList
              _tlIupEnv :: Environment
              _tlIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 132, column 10)
              _lhsOannotatedTree =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   if tcfExpandStars _lhsIflags
                   then flip map _colExprs $ \(n,_t,e) ->
                         if ncStr n == ncStr (columnName e) && not (tcfAddSelectItemAliases _lhsIflags)
                         then SelExp emptyAnnotation e
                         else SelectItem emptyAnnotation e n
                   else _annotatedTree
                   {-# LINE 18010 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 177, column 9)
              _colExprs =
                  ({-# LINE 177 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _hdIcolExprs ++ _tlIcolExprs
                   {-# LINE 18016 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 178, column 9)
              _lhsOcolExprs =
                  ({-# LINE 178 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _colExprs
                   {-# LINE 18022 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 179, column 9)
              _upType =
                  ({-# LINE 179 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   sequence $ flip map _colExprs
                   $ \(n,t,_) -> fmap (ncStrT n,) t
                   {-# LINE 18029 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 181, column 9)
              _hdOexpectedType =
                  ({-# LINE 181 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   liftM fst $ splitTypeExtraList _lhsIexpectedType
                   {-# LINE 18035 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 182, column 9)
              _tlOexpectedType =
                  ({-# LINE 182 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   liftM snd $ splitTypeExtraList _lhsIexpectedType
                   {-# LINE 18041 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 183, column 9)
              _hdOexpectedCast =
                  ({-# LINE 183 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 18047 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 184, column 9)
              _tlOexpectedCast =
                  ({-# LINE 184 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedCast
                   {-# LINE 18053 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 186, column 7)
              _lhsOupType =
                  ({-# LINE 186 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _upType
                   {-# LINE 18059 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 187, column 7)
              _lhsOupEnv =
                  ({-# LINE 187 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   case fmap E.envSelectListEnvironment _upType     of
                     (Just (Right e)) -> e
                     _ -> E.brokeEnvironment
                   {-# LINE 18067 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 18073 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 18079 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 18085 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 18091 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18097 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOdownEnv =
                  ({-# LINE 151 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 18103 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18109 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18115 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 18121 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOdownEnv =
                  ({-# LINE 156 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 18133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18145 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIcolExprs,_hdIoriginalTree) =
                  hd_ _hdOassignmentCastContext _hdOcat _hdOdownEnv _hdOexpectedCast _hdOexpectedType _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIcolExprs,_tlIoriginalTree,_tlIupEnv,_tlIupType) =
                  tl_ _tlOassignmentCastContext _tlOcat _tlOdownEnv _tlOexpectedCast _tlOexpectedType _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType)))
_sem_SelectItemList_Nil :: T_SelectItemList
_sem_SelectItemList_Nil =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SelectItemList
              _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _lhsOupEnv :: Environment
              _lhsOoriginalTree :: SelectItemList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 131, column 9)
              _lhsOannotatedTree =
                  ({-# LINE 131 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   []
                   {-# LINE 18170 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 174, column 9)
              _lhsOcolExprs =
                  ({-# LINE 174 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   []
                   {-# LINE 18176 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 175, column 9)
              _upType =
                  ({-# LINE 175 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   Nothing
                   {-# LINE 18182 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 186, column 7)
              _lhsOupType =
                  ({-# LINE 186 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _upType
                   {-# LINE 18188 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 187, column 7)
              _lhsOupEnv =
                  ({-# LINE 187 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   case fmap E.envSelectListEnvironment _upType     of
                     (Just (Right e)) -> e
                     _ -> E.brokeEnvironment
                   {-# LINE 18196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 18202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 18208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 18214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType)))
-- SelectList --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         assignmentCastContext : Bool
         cat                  : Catalog
         downEnv              : Environment
         expectedCast         : Bool
         expectedType         : Maybe [TypeExtra]
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : SelectList 
         colExprs             : [(NameComponent,Maybe TypeExtra,ScalarExpr)]
         originalTree         : SelectList 
         upEnv                : Environment
         upType               : Maybe [(Text,TypeExtra)]
   alternatives:
      alternative SelectList:
         child ann            : Annotation 
         child items          : SelectItemList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data SelectList = SelectList (Annotation) (SelectItemList)
                deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_SelectList :: SelectList ->
                  T_SelectList
_sem_SelectList (SelectList _ann _items) =
    (_sem_SelectList_SelectList (_sem_Annotation _ann) (_sem_SelectItemList _items))
-- semantic domain
type T_SelectList = Bool ->
                    Catalog ->
                    Environment ->
                    Bool ->
                    (Maybe [TypeExtra]) ->
                    TypeCheckingFlags ->
                    (Maybe TypeExtra) ->
                    ( SelectList,([(NameComponent,Maybe TypeExtra,ScalarExpr)]),SelectList,Environment,(Maybe [(Text,TypeExtra)]))
data Inh_SelectList = Inh_SelectList {_assignmentCastContext_Inh_SelectList :: Bool,_cat_Inh_SelectList :: Catalog,_downEnv_Inh_SelectList :: Environment,_expectedCast_Inh_SelectList :: Bool,_expectedType_Inh_SelectList :: (Maybe [TypeExtra]),_flags_Inh_SelectList :: TypeCheckingFlags,_imCast_Inh_SelectList :: (Maybe TypeExtra)}
data Syn_SelectList = Syn_SelectList {_annotatedTree_Syn_SelectList :: SelectList,_colExprs_Syn_SelectList :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)]),_originalTree_Syn_SelectList :: SelectList,_upEnv_Syn_SelectList :: Environment,_upType_Syn_SelectList :: (Maybe [(Text,TypeExtra)])}
_wrap_SelectList :: T_SelectList ->
                   Inh_SelectList ->
                   Syn_SelectList
_wrap_SelectList sem (Inh_SelectList _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType) = sem _lhsIassignmentCastContext _lhsIcat _lhsIdownEnv _lhsIexpectedCast _lhsIexpectedType _lhsIflags _lhsIimCast
     in  (Syn_SelectList _lhsOannotatedTree _lhsOcolExprs _lhsOoriginalTree _lhsOupEnv _lhsOupType))
_sem_SelectList_SelectList :: T_Annotation ->
                             T_SelectItemList ->
                             T_SelectList
_sem_SelectList_SelectList ann_ items_ =
    (\ _lhsIassignmentCastContext
       _lhsIcat
       _lhsIdownEnv
       _lhsIexpectedCast
       _lhsIexpectedType
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _itemsOexpectedCast :: Bool
              _lhsOannotatedTree :: SelectList
              _lhsOoriginalTree :: SelectList
              _lhsOcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _lhsOupEnv :: Environment
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _itemsOassignmentCastContext :: Bool
              _itemsOcat :: Catalog
              _itemsOdownEnv :: Environment
              _itemsOexpectedType :: (Maybe [TypeExtra])
              _itemsOflags :: TypeCheckingFlags
              _itemsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _itemsIannotatedTree :: SelectItemList
              _itemsIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _itemsIoriginalTree :: SelectItemList
              _itemsIupEnv :: Environment
              _itemsIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 204, column 7)
              _annOtpe =
                  ({-# LINE 204 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   Left []
                   {-# LINE 18304 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag"(line 205, column 7)
              _itemsOexpectedCast =
                  ({-# LINE 205 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   True
                   {-# LINE 18310 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelectList _annIannotatedTree _itemsIannotatedTree
                   {-# LINE 18316 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SelectList _annIoriginalTree _itemsIoriginalTree
                   {-# LINE 18322 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 18328 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 18334 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOcolExprs =
                  ({-# LINE 157 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _itemsIcolExprs
                   {-# LINE 18340 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOupEnv =
                  ({-# LINE 161 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _itemsIupEnv
                   {-# LINE 18346 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOupType =
                  ({-# LINE 158 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _itemsIupType
                   {-# LINE 18352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18370 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _itemsOassignmentCastContext =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   _lhsIassignmentCastContext
                   {-# LINE 18376 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _itemsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18382 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _itemsOdownEnv =
                  ({-# LINE 156 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIdownEnv
                   {-# LINE 18388 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _itemsOexpectedType =
                  ({-# LINE 159 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/SelectLists.ag" #-}
                   _lhsIexpectedType
                   {-# LINE 18394 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _itemsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18400 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _itemsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18406 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _itemsIannotatedTree,_itemsIcolExprs,_itemsIoriginalTree,_itemsIupEnv,_itemsIupType) =
                  items_ _itemsOassignmentCastContext _itemsOcat _itemsOdownEnv _itemsOexpectedCast _itemsOexpectedType _itemsOflags _itemsOimCast
          in  ( _lhsOannotatedTree,_lhsOcolExprs,_lhsOoriginalTree,_lhsOupEnv,_lhsOupType)))
-- SetClause ---------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : SetClause 
         originalTree         : SetClause 
   alternatives:
      alternative SetClause:
         child ann            : Annotation 
         child setTarget      : {NameComponent}
         child ex             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative MultiSetClause:
         child ann            : Annotation 
         child setTargets     : {[NameComponent]}
         child ex             : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data SetClause = SetClause (Annotation) (NameComponent) (ScalarExpr)
               | MultiSetClause (Annotation) (([NameComponent])) (ScalarExpr)
               deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_SetClause :: SetClause ->
                 T_SetClause
_sem_SetClause (SetClause _ann _setTarget _ex) =
    (_sem_SetClause_SetClause (_sem_Annotation _ann) _setTarget (_sem_ScalarExpr _ex))
_sem_SetClause (MultiSetClause _ann _setTargets _ex) =
    (_sem_SetClause_MultiSetClause (_sem_Annotation _ann) _setTargets (_sem_ScalarExpr _ex))
-- semantic domain
type T_SetClause = Catalog ->
                   TypeCheckingFlags ->
                   (Maybe TypeExtra) ->
                   ( SetClause,SetClause)
data Inh_SetClause = Inh_SetClause {_cat_Inh_SetClause :: Catalog,_flags_Inh_SetClause :: TypeCheckingFlags,_imCast_Inh_SetClause :: (Maybe TypeExtra)}
data Syn_SetClause = Syn_SetClause {_annotatedTree_Syn_SetClause :: SetClause,_originalTree_Syn_SetClause :: SetClause}
_wrap_SetClause :: T_SetClause ->
                  Inh_SetClause ->
                  Syn_SetClause
_wrap_SetClause sem (Inh_SetClause _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_SetClause _lhsOannotatedTree _lhsOoriginalTree))
_sem_SetClause_SetClause :: T_Annotation ->
                           NameComponent ->
                           T_ScalarExpr ->
                           T_SetClause
_sem_SetClause_SetClause ann_ setTarget_ ex_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exOdownEnv :: Environment
              _exOexpectedCast :: Bool
              _exOexpectedType :: (Maybe TypeExtra)
              _exOodbcFunction :: Bool
              _exOassignmentCastContext :: Bool
              _lhsOannotatedTree :: SetClause
              _lhsOoriginalTree :: SetClause
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _exOcat :: Catalog
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: ScalarExpr
              _exIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr
              _exIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 106, column 27)
              _annOtpe =
                  ({-# LINE 106 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 18494 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 107, column 27)
              _exOdownEnv =
                  ({-# LINE 107 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 18500 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 108, column 27)
              _exOexpectedCast =
                  ({-# LINE 108 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 18506 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 109, column 27)
              _exOexpectedType =
                  ({-# LINE 109 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 18512 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 174, column 32)
              _exOodbcFunction =
                  ({-# LINE 174 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 18518 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 828, column 27)
              _exOassignmentCastContext =
                  ({-# LINE 828 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 18524 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetClause _annIannotatedTree setTarget_ _exIannotatedTree
                   {-# LINE 18530 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetClause _annIoriginalTree setTarget_ _exIoriginalTree
                   {-# LINE 18536 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 18542 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 18548 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18554 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18560 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18566 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18572 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18578 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18584 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOdownEnv _exOexpectedCast _exOexpectedType _exOflags _exOimCast _exOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_SetClause_MultiSetClause :: T_Annotation ->
                                ([NameComponent]) ->
                                T_ScalarExpr ->
                                T_SetClause
_sem_SetClause_MultiSetClause ann_ setTargets_ ex_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exOdownEnv :: Environment
              _exOexpectedCast :: Bool
              _exOexpectedType :: (Maybe TypeExtra)
              _exOodbcFunction :: Bool
              _exOassignmentCastContext :: Bool
              _lhsOannotatedTree :: SetClause
              _lhsOoriginalTree :: SetClause
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _exOcat :: Catalog
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: ScalarExpr
              _exIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exIoriginalTree :: ScalarExpr
              _exIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 102, column 32)
              _annOtpe =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 18623 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 103, column 32)
              _exOdownEnv =
                  ({-# LINE 103 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 18629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 104, column 32)
              _exOexpectedCast =
                  ({-# LINE 104 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 18635 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 105, column 32)
              _exOexpectedType =
                  ({-# LINE 105 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 18641 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 174, column 32)
              _exOodbcFunction =
                  ({-# LINE 174 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 18647 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 827, column 32)
              _exOassignmentCastContext =
                  ({-# LINE 827 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 18653 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   MultiSetClause _annIannotatedTree setTargets_ _exIannotatedTree
                   {-# LINE 18659 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   MultiSetClause _annIoriginalTree setTargets_ _exIoriginalTree
                   {-# LINE 18665 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 18671 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 18677 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18683 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18689 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18695 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18701 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18707 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18713 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIcolExprs,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOdownEnv _exOexpectedCast _exOexpectedType _exOflags _exOimCast _exOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- SetClauseList -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : SetClauseList 
         originalTree         : SetClauseList 
   alternatives:
      alternative Cons:
         child hd             : SetClause 
         child tl             : SetClauseList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type SetClauseList = [SetClause]
-- cata
_sem_SetClauseList :: SetClauseList ->
                     T_SetClauseList
_sem_SetClauseList list =
    (Prelude.foldr _sem_SetClauseList_Cons _sem_SetClauseList_Nil (Prelude.map _sem_SetClause list))
-- semantic domain
type T_SetClauseList = Catalog ->
                       TypeCheckingFlags ->
                       (Maybe TypeExtra) ->
                       ( SetClauseList,SetClauseList)
data Inh_SetClauseList = Inh_SetClauseList {_cat_Inh_SetClauseList :: Catalog,_flags_Inh_SetClauseList :: TypeCheckingFlags,_imCast_Inh_SetClauseList :: (Maybe TypeExtra)}
data Syn_SetClauseList = Syn_SetClauseList {_annotatedTree_Syn_SetClauseList :: SetClauseList,_originalTree_Syn_SetClauseList :: SetClauseList}
_wrap_SetClauseList :: T_SetClauseList ->
                      Inh_SetClauseList ->
                      Syn_SetClauseList
_wrap_SetClauseList sem (Inh_SetClauseList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_SetClauseList _lhsOannotatedTree _lhsOoriginalTree))
_sem_SetClauseList_Cons :: T_SetClause ->
                          T_SetClauseList ->
                          T_SetClauseList
_sem_SetClauseList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SetClauseList
              _lhsOoriginalTree :: SetClauseList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: SetClause
              _hdIoriginalTree :: SetClause
              _tlIannotatedTree :: SetClauseList
              _tlIoriginalTree :: SetClauseList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 18784 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 18790 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 18796 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 18802 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18808 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18814 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18820 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 18826 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 18832 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 18838 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_SetClauseList_Nil :: T_SetClauseList
_sem_SetClauseList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: SetClauseList
              _lhsOoriginalTree :: SetClauseList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 18856 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 18862 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 18868 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 18874 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- Statement ---------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : Statement 
         originalTree         : Statement 
   alternatives:
      alternative QueryStatement:
         child ann            : Annotation 
         child ex             : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Insert:
         child ann            : Annotation 
         child table          : Name 
         child targetCols     : {[NameComponent]}
         child insData        : QueryExpr 
         child returning      : MaybeSelectList 
         visit 0:
            local tpe         : {Either [TypeError] [TypeExtra]}
            local tooManyCols : {Maybe [TypeError]}
            local annotatedTree : _
            local originalTree : _
      alternative Update:
         child ann            : Annotation 
         child table          : Name 
         child assigns        : SetClauseList 
         child fromList       : TableRefList 
         child whr            : MaybeBoolExpr 
         child returning      : MaybeSelectList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Delete:
         child ann            : Annotation 
         child table          : Name 
         child using          : TableRefList 
         child whr            : MaybeBoolExpr 
         child returning      : MaybeSelectList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CopyFrom:
         child ann            : Annotation 
         child table          : Name 
         child targetCols     : {[NameComponent]}
         child source         : {CopyFromSource}
         child opts           : {[CopyFromOption]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CopyData:
         child ann            : Annotation 
         child insData        : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CopyTo:
         child ann            : Annotation 
         child cp             : {CopyToSource}
         child fn             : {String}
         child opts           : {[CopyToOption]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Truncate:
         child ann            : Annotation 
         child tables         : {[Name]}
         child restartIdentity : {RestartIdentity}
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateTable:
         child ann            : Annotation 
         child name           : Name 
         child atts           : AttributeDefList 
         child cons           : ConstraintList 
         child partition      : MaybeTablePartitionDef 
         child rep            : {Replace}
         child options        : {[TableOption]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterTable:
         child ann            : Annotation 
         child name           : Name 
         child operation      : AlterTableOperation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterDatabase:
         child ann            : Annotation 
         child name           : Name 
         child operation      : AlterDatabaseOperation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateSequence:
         child ann            : Annotation 
         child name           : Name 
         child incr           : {Integer}
         child min            : {Maybe Integer}
         child max            : {Maybe Integer}
         child start          : {Integer}
         child cache          : {Integer}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSequence:
         child ann            : Annotation 
         child name           : Name 
         child operation      : AlterSequenceOperation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateTableAs:
         child ann            : Annotation 
         child name           : Name 
         child rep            : {Replace}
         child expr           : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateView:
         child ann            : Annotation 
         child name           : Name 
         child colNames       : {MaybeNameComponentList}
         child expr           : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterView:
         child ann            : Annotation 
         child name           : Name 
         child colNames       : {MaybeNameComponentList}
         child expr           : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateType:
         child ann            : Annotation 
         child name           : Name 
         child atts           : TypeAttributeDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateUser:
         child ann            : Annotation 
         child name           : Name 
         child password       : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateLogin:
         child ann            : Annotation 
         child name           : Name 
         child password       : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterUser:
         child ann            : Annotation 
         child name           : Name 
         child password       : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterLogin:
         child ann            : Annotation 
         child name           : Name 
         child password       : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateSchema:
         child ann            : Annotation 
         child name           : Name 
         child owner          : {Maybe Name}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AlterSchema:
         child ann            : Annotation 
         child name           : Name 
         child operation      : AlterSchemaOperation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateFunction:
         child ann            : Annotation 
         child name           : Name 
         child params         : ParamDefList 
         child rettype        : TypeName 
         child rep            : {Replace}
         child lang           : {Language}
         child body           : FnBody 
         child vol            : {Volatility}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateDomain:
         child ann            : Annotation 
         child name           : Name 
         child typ            : TypeName 
         child constraintName : {String}
         child check          : MaybeBoolExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateLanguage:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateTrigger:
         child ann            : Annotation 
         child name           : {NameComponent}
         child wh             : {TriggerWhen}
         child events         : {[TriggerEvent]}
         child tbl            : Name 
         child firing         : {TriggerFire}
         child fnName         : Name 
         child fnArgs         : ScalarExprList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropFunction:
         child ann            : Annotation 
         child ifE            : {IfExists}
         child sigs           : NameTypeNameListPairList 
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropSomething:
         child ann            : Annotation 
         child dropType       : {DropType}
         child ifE            : {IfExists}
         child names          : {[Name]}
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DropTrigger:
         child ann            : Annotation 
         child ifE            : {IfExists}
         child name           : {NameComponent}
         child tbl            : Name 
         child cascade        : {Cascade}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateDatabase:
         child ann            : Annotation 
         child nm             : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Set:
         child ann            : Annotation 
         child name           : {String}
         child values         : {[SetValue]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Notify:
         child ann            : Annotation 
         child name           : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Into:
         child ann            : Annotation 
         child strict         : {Bool}
         child into           : {[Name]}
         child stmt           : Statement 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Assignment:
         child ann            : Annotation 
         child target         : Name 
         child value          : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Return:
         child ann            : Annotation 
         child value          : MaybeScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ReturnNext:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ReturnQuery:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Raise:
         child ann            : Annotation 
         child level          : {RaiseType}
         child message        : {String}
         child args           : ScalarExprList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative NullStatement:
         child ann            : Annotation 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Perform:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Execute:
         child ann            : Annotation 
         child expr           : ScalarExpr 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ForQueryStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child var            : {NameComponent}
         child sel            : QueryExpr 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ForIntegerStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child var            : {NameComponent}
         child from           : ScalarExpr 
         child to             : ScalarExpr 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative LoopStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative WhileStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child expr           : ScalarExpr 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ContinueStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ExitStatement:
         child ann            : Annotation 
         child lb             : {Maybe String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CaseStatementSimple:
         child ann            : Annotation 
         child val            : ScalarExpr 
         child cases          : ScalarExprListStatementListTripleList 
         child els            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CaseStatement:
         child ann            : Annotation 
         child cases          : ScalarExprListStatementListTripleList 
         child els            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative If:
         child ann            : Annotation 
         child cases          : ScalarExprStatementListPairList 
         child els            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Block:
         child ann            : Annotation 
         child lb             : {Maybe String}
         child vars           : VarDefList 
         child sts            : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative AntiStatement:
         child string         : {String}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative DeclareStatement:
         child ann            : Annotation 
         child ds             : {[(String,TypeName,Maybe ScalarExpr)]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ExecStatement:
         child ann            : Annotation 
         child spName         : Name 
         child args           : ScalarExprList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative CreateIndexTSQL:
         child ann            : Annotation 
         child nm             : {NameComponent}
         child obj            : Name 
         child cols           : {[NameComponent]}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data Statement = QueryStatement (Annotation) (QueryExpr)
               | Insert (Annotation) (Name) (([NameComponent])) (QueryExpr) (MaybeSelectList)
               | Update (Annotation) (Name) (SetClauseList) (TableRefList) (MaybeBoolExpr) (MaybeSelectList)
               | Delete (Annotation) (Name) (TableRefList) (MaybeBoolExpr) (MaybeSelectList)
               | CopyFrom (Annotation) (Name) (([NameComponent])) (CopyFromSource) (([CopyFromOption]))
               | CopyData (Annotation) (String)
               | CopyTo (Annotation) (CopyToSource) (String) (([CopyToOption]))
               | Truncate (Annotation) (([Name])) (RestartIdentity) (Cascade)
               | CreateTable (Annotation) (Name) (AttributeDefList) (ConstraintList) (MaybeTablePartitionDef) (Replace) (([TableOption]))
               | AlterTable (Annotation) (Name) (AlterTableOperation)
               | AlterDatabase (Annotation) (Name) (AlterDatabaseOperation)
               | CreateSequence (Annotation) (Name) (Integer) ((Maybe Integer)) ((Maybe Integer)) (Integer) (Integer)
               | AlterSequence (Annotation) (Name) (AlterSequenceOperation)
               | CreateTableAs (Annotation) (Name) (Replace) (QueryExpr)
               | CreateView (Annotation) (Name) (MaybeNameComponentList) (QueryExpr)
               | AlterView (Annotation) (Name) (MaybeNameComponentList) (QueryExpr)
               | CreateType (Annotation) (Name) (TypeAttributeDefList)
               | CreateUser (Annotation) (Name) (String)
               | CreateLogin (Annotation) (Name) (String)
               | AlterUser (Annotation) (Name) (String)
               | AlterLogin (Annotation) (Name) (String)
               | CreateSchema (Annotation) (Name) ((Maybe Name))
               | AlterSchema (Annotation) (Name) (AlterSchemaOperation)
               | CreateFunction (Annotation) (Name) (ParamDefList) (TypeName) (Replace) (Language) (FnBody) (Volatility)
               | CreateDomain (Annotation) (Name) (TypeName) (String) (MaybeBoolExpr)
               | CreateLanguage (Annotation) (String)
               | CreateTrigger (Annotation) (NameComponent) (TriggerWhen) (([TriggerEvent])) (Name) (TriggerFire) (Name) (ScalarExprList)
               | DropFunction (Annotation) (IfExists) (NameTypeNameListPairList) (Cascade)
               | DropSomething (Annotation) (DropType) (IfExists) (([Name])) (Cascade)
               | DropTrigger (Annotation) (IfExists) (NameComponent) (Name) (Cascade)
               | CreateDatabase (Annotation) (Name)
               | Set (Annotation) (String) (([SetValue]))
               | Notify (Annotation) (String)
               | Into (Annotation) (Bool) (([Name])) (Statement)
               | Assignment (Annotation) (Name) (ScalarExpr)
               | Return (Annotation) (MaybeScalarExpr)
               | ReturnNext (Annotation) (ScalarExpr)
               | ReturnQuery (Annotation) (QueryExpr)
               | Raise (Annotation) (RaiseType) (String) (ScalarExprList)
               | NullStatement (Annotation)
               | Perform (Annotation) (ScalarExpr)
               | Execute (Annotation) (ScalarExpr)
               | ForQueryStatement (Annotation) ((Maybe String)) (NameComponent) (QueryExpr) (StatementList)
               | ForIntegerStatement (Annotation) ((Maybe String)) (NameComponent) (ScalarExpr) (ScalarExpr) (StatementList)
               | LoopStatement (Annotation) ((Maybe String)) (StatementList)
               | WhileStatement (Annotation) ((Maybe String)) (ScalarExpr) (StatementList)
               | ContinueStatement (Annotation) ((Maybe String))
               | ExitStatement (Annotation) ((Maybe String))
               | CaseStatementSimple (Annotation) (ScalarExpr) (ScalarExprListStatementListTripleList) (StatementList)
               | CaseStatement (Annotation) (ScalarExprListStatementListTripleList) (StatementList)
               | If (Annotation) (ScalarExprStatementListPairList) (StatementList)
               | Block (Annotation) ((Maybe String)) (VarDefList) (StatementList)
               | AntiStatement (String)
               | DeclareStatement (Annotation) (([(String,TypeName,Maybe ScalarExpr)]))
               | ExecStatement (Annotation) (Name) (ScalarExprList)
               | CreateIndexTSQL (Annotation) (NameComponent) (Name) (([NameComponent]))
               deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_Statement :: Statement ->
                 T_Statement
_sem_Statement (QueryStatement _ann _ex) =
    (_sem_Statement_QueryStatement (_sem_Annotation _ann) (_sem_QueryExpr _ex))
_sem_Statement (Insert _ann _table _targetCols _insData _returning) =
    (_sem_Statement_Insert (_sem_Annotation _ann) (_sem_Name _table) _targetCols (_sem_QueryExpr _insData) (_sem_MaybeSelectList _returning))
_sem_Statement (Update _ann _table _assigns _fromList _whr _returning) =
    (_sem_Statement_Update (_sem_Annotation _ann) (_sem_Name _table) (_sem_SetClauseList _assigns) (_sem_TableRefList _fromList) (_sem_MaybeBoolExpr _whr) (_sem_MaybeSelectList _returning))
_sem_Statement (Delete _ann _table _using _whr _returning) =
    (_sem_Statement_Delete (_sem_Annotation _ann) (_sem_Name _table) (_sem_TableRefList _using) (_sem_MaybeBoolExpr _whr) (_sem_MaybeSelectList _returning))
_sem_Statement (CopyFrom _ann _table _targetCols _source _opts) =
    (_sem_Statement_CopyFrom (_sem_Annotation _ann) (_sem_Name _table) _targetCols _source _opts)
_sem_Statement (CopyData _ann _insData) =
    (_sem_Statement_CopyData (_sem_Annotation _ann) _insData)
_sem_Statement (CopyTo _ann _cp _fn _opts) =
    (_sem_Statement_CopyTo (_sem_Annotation _ann) _cp _fn _opts)
_sem_Statement (Truncate _ann _tables _restartIdentity _cascade) =
    (_sem_Statement_Truncate (_sem_Annotation _ann) _tables _restartIdentity _cascade)
_sem_Statement (CreateTable _ann _name _atts _cons _partition _rep _options) =
    (_sem_Statement_CreateTable (_sem_Annotation _ann) (_sem_Name _name) (_sem_AttributeDefList _atts) (_sem_ConstraintList _cons) (_sem_MaybeTablePartitionDef _partition) _rep _options)
_sem_Statement (AlterTable _ann _name _operation) =
    (_sem_Statement_AlterTable (_sem_Annotation _ann) (_sem_Name _name) (_sem_AlterTableOperation _operation))
_sem_Statement (AlterDatabase _ann _name _operation) =
    (_sem_Statement_AlterDatabase (_sem_Annotation _ann) (_sem_Name _name) (_sem_AlterDatabaseOperation _operation))
_sem_Statement (CreateSequence _ann _name _incr _min _max _start _cache) =
    (_sem_Statement_CreateSequence (_sem_Annotation _ann) (_sem_Name _name) _incr _min _max _start _cache)
_sem_Statement (AlterSequence _ann _name _operation) =
    (_sem_Statement_AlterSequence (_sem_Annotation _ann) (_sem_Name _name) (_sem_AlterSequenceOperation _operation))
_sem_Statement (CreateTableAs _ann _name _rep _expr) =
    (_sem_Statement_CreateTableAs (_sem_Annotation _ann) (_sem_Name _name) _rep (_sem_QueryExpr _expr))
_sem_Statement (CreateView _ann _name _colNames _expr) =
    (_sem_Statement_CreateView (_sem_Annotation _ann) (_sem_Name _name) _colNames (_sem_QueryExpr _expr))
_sem_Statement (AlterView _ann _name _colNames _expr) =
    (_sem_Statement_AlterView (_sem_Annotation _ann) (_sem_Name _name) _colNames (_sem_QueryExpr _expr))
_sem_Statement (CreateType _ann _name _atts) =
    (_sem_Statement_CreateType (_sem_Annotation _ann) (_sem_Name _name) (_sem_TypeAttributeDefList _atts))
_sem_Statement (CreateUser _ann _name _password) =
    (_sem_Statement_CreateUser (_sem_Annotation _ann) (_sem_Name _name) _password)
_sem_Statement (CreateLogin _ann _name _password) =
    (_sem_Statement_CreateLogin (_sem_Annotation _ann) (_sem_Name _name) _password)
_sem_Statement (AlterUser _ann _name _password) =
    (_sem_Statement_AlterUser (_sem_Annotation _ann) (_sem_Name _name) _password)
_sem_Statement (AlterLogin _ann _name _password) =
    (_sem_Statement_AlterLogin (_sem_Annotation _ann) (_sem_Name _name) _password)
_sem_Statement (CreateSchema _ann _name _owner) =
    (_sem_Statement_CreateSchema (_sem_Annotation _ann) (_sem_Name _name) _owner)
_sem_Statement (AlterSchema _ann _name _operation) =
    (_sem_Statement_AlterSchema (_sem_Annotation _ann) (_sem_Name _name) (_sem_AlterSchemaOperation _operation))
_sem_Statement (CreateFunction _ann _name _params _rettype _rep _lang _body _vol) =
    (_sem_Statement_CreateFunction (_sem_Annotation _ann) (_sem_Name _name) (_sem_ParamDefList _params) (_sem_TypeName _rettype) _rep _lang (_sem_FnBody _body) _vol)
_sem_Statement (CreateDomain _ann _name _typ _constraintName _check) =
    (_sem_Statement_CreateDomain (_sem_Annotation _ann) (_sem_Name _name) (_sem_TypeName _typ) _constraintName (_sem_MaybeBoolExpr _check))
_sem_Statement (CreateLanguage _ann _name) =
    (_sem_Statement_CreateLanguage (_sem_Annotation _ann) _name)
_sem_Statement (CreateTrigger _ann _name _wh _events _tbl _firing _fnName _fnArgs) =
    (_sem_Statement_CreateTrigger (_sem_Annotation _ann) _name _wh _events (_sem_Name _tbl) _firing (_sem_Name _fnName) (_sem_ScalarExprList _fnArgs))
_sem_Statement (DropFunction _ann _ifE _sigs _cascade) =
    (_sem_Statement_DropFunction (_sem_Annotation _ann) _ifE (_sem_NameTypeNameListPairList _sigs) _cascade)
_sem_Statement (DropSomething _ann _dropType _ifE _names _cascade) =
    (_sem_Statement_DropSomething (_sem_Annotation _ann) _dropType _ifE _names _cascade)
_sem_Statement (DropTrigger _ann _ifE _name _tbl _cascade) =
    (_sem_Statement_DropTrigger (_sem_Annotation _ann) _ifE _name (_sem_Name _tbl) _cascade)
_sem_Statement (CreateDatabase _ann _nm) =
    (_sem_Statement_CreateDatabase (_sem_Annotation _ann) (_sem_Name _nm))
_sem_Statement (Set _ann _name _values) =
    (_sem_Statement_Set (_sem_Annotation _ann) _name _values)
_sem_Statement (Notify _ann _name) =
    (_sem_Statement_Notify (_sem_Annotation _ann) _name)
_sem_Statement (Into _ann _strict _into _stmt) =
    (_sem_Statement_Into (_sem_Annotation _ann) _strict _into (_sem_Statement _stmt))
_sem_Statement (Assignment _ann _target _value) =
    (_sem_Statement_Assignment (_sem_Annotation _ann) (_sem_Name _target) (_sem_ScalarExpr _value))
_sem_Statement (Return _ann _value) =
    (_sem_Statement_Return (_sem_Annotation _ann) (_sem_MaybeScalarExpr _value))
_sem_Statement (ReturnNext _ann _expr) =
    (_sem_Statement_ReturnNext (_sem_Annotation _ann) (_sem_ScalarExpr _expr))
_sem_Statement (ReturnQuery _ann _sel) =
    (_sem_Statement_ReturnQuery (_sem_Annotation _ann) (_sem_QueryExpr _sel))
_sem_Statement (Raise _ann _level _message _args) =
    (_sem_Statement_Raise (_sem_Annotation _ann) _level _message (_sem_ScalarExprList _args))
_sem_Statement (NullStatement _ann) =
    (_sem_Statement_NullStatement (_sem_Annotation _ann))
_sem_Statement (Perform _ann _expr) =
    (_sem_Statement_Perform (_sem_Annotation _ann) (_sem_ScalarExpr _expr))
_sem_Statement (Execute _ann _expr) =
    (_sem_Statement_Execute (_sem_Annotation _ann) (_sem_ScalarExpr _expr))
_sem_Statement (ForQueryStatement _ann _lb _var _sel _sts) =
    (_sem_Statement_ForQueryStatement (_sem_Annotation _ann) _lb _var (_sem_QueryExpr _sel) (_sem_StatementList _sts))
_sem_Statement (ForIntegerStatement _ann _lb _var _from _to _sts) =
    (_sem_Statement_ForIntegerStatement (_sem_Annotation _ann) _lb _var (_sem_ScalarExpr _from) (_sem_ScalarExpr _to) (_sem_StatementList _sts))
_sem_Statement (LoopStatement _ann _lb _sts) =
    (_sem_Statement_LoopStatement (_sem_Annotation _ann) _lb (_sem_StatementList _sts))
_sem_Statement (WhileStatement _ann _lb _expr _sts) =
    (_sem_Statement_WhileStatement (_sem_Annotation _ann) _lb (_sem_ScalarExpr _expr) (_sem_StatementList _sts))
_sem_Statement (ContinueStatement _ann _lb) =
    (_sem_Statement_ContinueStatement (_sem_Annotation _ann) _lb)
_sem_Statement (ExitStatement _ann _lb) =
    (_sem_Statement_ExitStatement (_sem_Annotation _ann) _lb)
_sem_Statement (CaseStatementSimple _ann _val _cases _els) =
    (_sem_Statement_CaseStatementSimple (_sem_Annotation _ann) (_sem_ScalarExpr _val) (_sem_ScalarExprListStatementListTripleList _cases) (_sem_StatementList _els))
_sem_Statement (CaseStatement _ann _cases _els) =
    (_sem_Statement_CaseStatement (_sem_Annotation _ann) (_sem_ScalarExprListStatementListTripleList _cases) (_sem_StatementList _els))
_sem_Statement (If _ann _cases _els) =
    (_sem_Statement_If (_sem_Annotation _ann) (_sem_ScalarExprStatementListPairList _cases) (_sem_StatementList _els))
_sem_Statement (Block _ann _lb _vars _sts) =
    (_sem_Statement_Block (_sem_Annotation _ann) _lb (_sem_VarDefList _vars) (_sem_StatementList _sts))
_sem_Statement (AntiStatement _string) =
    (_sem_Statement_AntiStatement _string)
_sem_Statement (DeclareStatement _ann _ds) =
    (_sem_Statement_DeclareStatement (_sem_Annotation _ann) _ds)
_sem_Statement (ExecStatement _ann _spName _args) =
    (_sem_Statement_ExecStatement (_sem_Annotation _ann) (_sem_Name _spName) (_sem_ScalarExprList _args))
_sem_Statement (CreateIndexTSQL _ann _nm _obj _cols) =
    (_sem_Statement_CreateIndexTSQL (_sem_Annotation _ann) _nm (_sem_Name _obj) _cols)
-- semantic domain
type T_Statement = Catalog ->
                   TypeCheckingFlags ->
                   (Maybe TypeExtra) ->
                   ( Statement,Statement)
data Inh_Statement = Inh_Statement {_cat_Inh_Statement :: Catalog,_flags_Inh_Statement :: TypeCheckingFlags,_imCast_Inh_Statement :: (Maybe TypeExtra)}
data Syn_Statement = Syn_Statement {_annotatedTree_Syn_Statement :: Statement,_originalTree_Syn_Statement :: Statement}
_wrap_Statement :: T_Statement ->
                  Inh_Statement ->
                  Syn_Statement
_wrap_Statement sem (Inh_Statement _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_Statement _lhsOannotatedTree _lhsOoriginalTree))
_sem_Statement_QueryStatement :: T_Annotation ->
                                T_QueryExpr ->
                                T_Statement
_sem_Statement_QueryStatement ann_ ex_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exOexpectedType :: (Maybe [TypeExtra])
              _exOouterDownEnv :: (Maybe Environment)
              _exOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _exOcat :: Catalog
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: QueryExpr
              _exIoriginalTree :: QueryExpr
              _exIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 19529 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 16, column 5)
              _exOexpectedType =
                  ({-# LINE 16 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   liftM (map snd) _exIupType
                   {-# LINE 19535 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 91, column 20)
              _exOouterDownEnv =
                  ({-# LINE 91 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Nothing
                   {-# LINE 19541 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 842, column 32)
              _exOassignmentCastContext =
                  ({-# LINE 842 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 19547 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   QueryStatement _annIannotatedTree _exIannotatedTree
                   {-# LINE 19553 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   QueryStatement _annIoriginalTree _exIoriginalTree
                   {-# LINE 19559 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 19565 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 19571 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19577 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19583 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19589 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19595 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19601 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19607 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOexpectedType _exOflags _exOimCast _exOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Insert :: T_Annotation ->
                        T_Name ->
                        ([NameComponent]) ->
                        T_QueryExpr ->
                        T_MaybeSelectList ->
                        T_Statement
_sem_Statement_Insert ann_ table_ targetCols_ insData_ returning_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] [TypeExtra])
              _tableOtpe :: (Either [TypeError] TypeExtra)
              _insDataOexpectedType :: (Maybe [TypeExtra])
              _insDataOouterDownEnv :: (Maybe Environment)
              _tooManyCols :: (Maybe [TypeError])
              _insDataOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckingFlags
              _tableOimCast :: (Maybe TypeExtra)
              _insDataOcat :: Catalog
              _insDataOflags :: TypeCheckingFlags
              _insDataOimCast :: (Maybe TypeExtra)
              _returningOcat :: Catalog
              _returningOflags :: TypeCheckingFlags
              _returningOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tableIannotatedTree :: Name
              _tableIoriginalTree :: Name
              _insDataIannotatedTree :: QueryExpr
              _insDataIoriginalTree :: QueryExpr
              _insDataIupType :: (Maybe [(Text,TypeExtra)])
              _returningIannotatedTree :: MaybeSelectList
              _returningIoriginalTree :: MaybeSelectList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 19, column 5)
              _annOtpe =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left []
                   {-# LINE 19658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 25, column 5)
              _tpe =
                  ({-# LINE 25 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   do
                   let tnm = nameComponents _tableIoriginalTree
                   (_,pub,_) <- catLookupTableAndAttrs _lhsIcat tnm
                   case targetCols_ of
                        []  -> return $ map snd pub
                        tcs -> do
                               tcs' <- mapM xnmcString tcs
                               let utcs' = nub tcs'
                               when (length utcs' /= length tcs') $
                                   Left $ map DuplicateColumnName
                                        $ nub (tcs' \\ utcs')
                               forM tcs' $ \x ->
                                   maybe (Left [UnrecognisedIdentifier x])
                                         Right $ lookup x pub
                   {-# LINE 19677 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 44, column 5)
              _tableOtpe =
                  ({-# LINE 44 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left (either id (const []) _tpe
                         ++ maybe [] id _tooManyCols    )
                   {-# LINE 19684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 47, column 5)
              _insDataOexpectedType =
                  ({-# LINE 47 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 19690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 49, column 5)
              _insDataOouterDownEnv =
                  ({-# LINE 49 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Nothing
                   {-# LINE 19696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 54, column 5)
              _tooManyCols =
                  ({-# LINE 54 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   do
                   x <- _insDataIupType
                   y <- either (const Nothing) Just _tpe
                   if (length x > length y)
                       then Just [TooManyColumnsInInsert]
                       else Nothing
                   {-# LINE 19707 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 840, column 24)
              _insDataOassignmentCastContext =
                  ({-# LINE 840 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 19713 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Insert _annIannotatedTree _tableIannotatedTree targetCols_ _insDataIannotatedTree _returningIannotatedTree
                   {-# LINE 19719 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Insert _annIoriginalTree _tableIoriginalTree targetCols_ _insDataIoriginalTree _returningIoriginalTree
                   {-# LINE 19725 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 19731 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 19737 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19743 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19749 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19755 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19761 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19767 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19773 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _insDataOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19779 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _insDataOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19785 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _insDataOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19791 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19797 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19803 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19809 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe
              ( _insDataIannotatedTree,_insDataIoriginalTree,_insDataIupType) =
                  insData_ _insDataOassignmentCastContext _insDataOcat _insDataOexpectedType _insDataOflags _insDataOimCast _insDataOouterDownEnv
              ( _returningIannotatedTree,_returningIoriginalTree) =
                  returning_ _returningOcat _returningOflags _returningOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Update :: T_Annotation ->
                        T_Name ->
                        T_SetClauseList ->
                        T_TableRefList ->
                        T_MaybeBoolExpr ->
                        T_MaybeSelectList ->
                        T_Statement
_sem_Statement_Update ann_ table_ assigns_ fromList_ whr_ returning_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _tableOtpe :: (Either [TypeError] TypeExtra)
              _whrOdownEnv :: Environment
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckingFlags
              _tableOimCast :: (Maybe TypeExtra)
              _assignsOcat :: Catalog
              _assignsOflags :: TypeCheckingFlags
              _assignsOimCast :: (Maybe TypeExtra)
              _fromListOcat :: Catalog
              _fromListOflags :: TypeCheckingFlags
              _fromListOimCast :: (Maybe TypeExtra)
              _whrOcat :: Catalog
              _whrOflags :: TypeCheckingFlags
              _whrOimCast :: (Maybe TypeExtra)
              _returningOcat :: Catalog
              _returningOflags :: TypeCheckingFlags
              _returningOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tableIannotatedTree :: Name
              _tableIoriginalTree :: Name
              _assignsIannotatedTree :: SetClauseList
              _assignsIoriginalTree :: SetClauseList
              _fromListIannotatedTree :: TableRefList
              _fromListIoriginalTree :: TableRefList
              _fromListIupEnv :: Environment
              _whrIannotatedTree :: MaybeBoolExpr
              _whrIoriginalTree :: MaybeBoolExpr
              _returningIannotatedTree :: MaybeSelectList
              _returningIoriginalTree :: MaybeSelectList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 219, column 24)
              _tableOtpe =
                  ({-# LINE 219 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 19871 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 220, column 24)
              _whrOdownEnv =
                  ({-# LINE 220 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 19877 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 19, column 5)
              _annOtpe =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left []
                   {-# LINE 19883 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Update _annIannotatedTree _tableIannotatedTree _assignsIannotatedTree _fromListIannotatedTree _whrIannotatedTree _returningIannotatedTree
                   {-# LINE 19889 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Update _annIoriginalTree _tableIoriginalTree _assignsIoriginalTree _fromListIoriginalTree _whrIoriginalTree _returningIoriginalTree
                   {-# LINE 19895 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 19901 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 19907 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19913 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19919 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19925 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19931 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19937 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19943 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _assignsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19949 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _assignsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19955 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _assignsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19961 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fromListOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19967 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fromListOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19973 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fromListOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19979 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _whrOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 19985 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _whrOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 19991 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _whrOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 19997 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20003 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20009 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20015 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe
              ( _assignsIannotatedTree,_assignsIoriginalTree) =
                  assigns_ _assignsOcat _assignsOflags _assignsOimCast
              ( _fromListIannotatedTree,_fromListIoriginalTree,_fromListIupEnv) =
                  fromList_ _fromListOcat _fromListOflags _fromListOimCast
              ( _whrIannotatedTree,_whrIoriginalTree) =
                  whr_ _whrOcat _whrOdownEnv _whrOflags _whrOimCast
              ( _returningIannotatedTree,_returningIoriginalTree) =
                  returning_ _returningOcat _returningOflags _returningOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Delete :: T_Annotation ->
                        T_Name ->
                        T_TableRefList ->
                        T_MaybeBoolExpr ->
                        T_MaybeSelectList ->
                        T_Statement
_sem_Statement_Delete ann_ table_ using_ whr_ returning_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _tableOtpe :: (Either [TypeError] TypeExtra)
              _whrOdownEnv :: Environment
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckingFlags
              _tableOimCast :: (Maybe TypeExtra)
              _usingOcat :: Catalog
              _usingOflags :: TypeCheckingFlags
              _usingOimCast :: (Maybe TypeExtra)
              _whrOcat :: Catalog
              _whrOflags :: TypeCheckingFlags
              _whrOimCast :: (Maybe TypeExtra)
              _returningOcat :: Catalog
              _returningOflags :: TypeCheckingFlags
              _returningOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tableIannotatedTree :: Name
              _tableIoriginalTree :: Name
              _usingIannotatedTree :: TableRefList
              _usingIoriginalTree :: TableRefList
              _usingIupEnv :: Environment
              _whrIannotatedTree :: MaybeBoolExpr
              _whrIoriginalTree :: MaybeBoolExpr
              _returningIannotatedTree :: MaybeSelectList
              _returningIoriginalTree :: MaybeSelectList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 170, column 24)
              _tableOtpe =
                  ({-# LINE 170 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20075 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 171, column 24)
              _whrOdownEnv =
                  ({-# LINE 171 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 20081 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 19, column 5)
              _annOtpe =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left []
                   {-# LINE 20087 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Delete _annIannotatedTree _tableIannotatedTree _usingIannotatedTree _whrIannotatedTree _returningIannotatedTree
                   {-# LINE 20093 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Delete _annIoriginalTree _tableIoriginalTree _usingIoriginalTree _whrIoriginalTree _returningIoriginalTree
                   {-# LINE 20099 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20105 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20111 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20123 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20129 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20135 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20141 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20147 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _usingOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20153 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _usingOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20159 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _usingOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20165 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _whrOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20171 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _whrOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20177 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _whrOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20183 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20189 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20195 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _returningOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20201 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe
              ( _usingIannotatedTree,_usingIoriginalTree,_usingIupEnv) =
                  using_ _usingOcat _usingOflags _usingOimCast
              ( _whrIannotatedTree,_whrIoriginalTree) =
                  whr_ _whrOcat _whrOdownEnv _whrOflags _whrOimCast
              ( _returningIannotatedTree,_returningIoriginalTree) =
                  returning_ _returningOcat _returningOflags _returningOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CopyFrom :: T_Annotation ->
                          T_Name ->
                          ([NameComponent]) ->
                          CopyFromSource ->
                          ([CopyFromOption]) ->
                          T_Statement
_sem_Statement_CopyFrom ann_ table_ targetCols_ source_ opts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _tableOtpe :: (Either [TypeError] TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tableOcat :: Catalog
              _tableOflags :: TypeCheckingFlags
              _tableOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tableIannotatedTree :: Name
              _tableIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 137, column 26)
              _tableOtpe =
                  ({-# LINE 137 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20242 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 19, column 5)
              _annOtpe =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left []
                   {-# LINE 20248 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyFrom _annIannotatedTree _tableIannotatedTree targetCols_ source_ opts_
                   {-# LINE 20254 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyFrom _annIoriginalTree _tableIoriginalTree targetCols_ source_ opts_
                   {-# LINE 20260 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20266 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20272 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20278 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20284 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20290 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20296 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20302 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tableOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20308 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tableIannotatedTree,_tableIoriginalTree) =
                  table_ _tableOcat _tableOflags _tableOimCast _tableOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CopyData :: T_Annotation ->
                          String ->
                          T_Statement
_sem_Statement_CopyData ann_ insData_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 136, column 26)
              _annOtpe =
                  ({-# LINE 136 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20334 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyData _annIannotatedTree insData_
                   {-# LINE 20340 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyData _annIoriginalTree insData_
                   {-# LINE 20346 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20352 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20358 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20364 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20370 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20376 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CopyTo :: T_Annotation ->
                        CopyToSource ->
                        String ->
                        ([CopyToOption]) ->
                        T_Statement
_sem_Statement_CopyTo ann_ cp_ fn_ opts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 19, column 5)
              _annOtpe =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left []
                   {-# LINE 20402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyTo _annIannotatedTree cp_ fn_ opts_
                   {-# LINE 20408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CopyTo _annIoriginalTree cp_ fn_ opts_
                   {-# LINE 20414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20426 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20432 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20438 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20444 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Truncate :: T_Annotation ->
                          ([Name]) ->
                          RestartIdentity ->
                          Cascade ->
                          T_Statement
_sem_Statement_Truncate ann_ tables_ restartIdentity_ cascade_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag"(line 19, column 5)
              _annOtpe =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Updates.ag" #-}
                   Left []
                   {-# LINE 20470 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Truncate _annIannotatedTree tables_ restartIdentity_ cascade_
                   {-# LINE 20476 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Truncate _annIoriginalTree tables_ restartIdentity_ cascade_
                   {-# LINE 20482 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20488 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20494 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20500 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20506 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20512 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateTable :: T_Annotation ->
                             T_Name ->
                             T_AttributeDefList ->
                             T_ConstraintList ->
                             T_MaybeTablePartitionDef ->
                             Replace ->
                             ([TableOption]) ->
                             T_Statement
_sem_Statement_CreateTable ann_ name_ atts_ cons_ partition_ rep_ options_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _attsOcat :: Catalog
              _attsOflags :: TypeCheckingFlags
              _attsOimCast :: (Maybe TypeExtra)
              _consOcat :: Catalog
              _consOflags :: TypeCheckingFlags
              _consOimCast :: (Maybe TypeExtra)
              _partitionOcat :: Catalog
              _partitionOflags :: TypeCheckingFlags
              _partitionOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _attsIannotatedTree :: AttributeDefList
              _attsIoriginalTree :: AttributeDefList
              _consIannotatedTree :: ConstraintList
              _consIoriginalTree :: ConstraintList
              _partitionIannotatedTree :: MaybeTablePartitionDef
              _partitionIoriginalTree :: MaybeTablePartitionDef
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 152, column 29)
              _annOtpe =
                  ({-# LINE 152 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20562 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 153, column 29)
              _nameOtpe =
                  ({-# LINE 153 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20568 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTable _annIannotatedTree _nameIannotatedTree _attsIannotatedTree _consIannotatedTree _partitionIannotatedTree rep_ options_
                   {-# LINE 20574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTable _annIoriginalTree _nameIoriginalTree _attsIoriginalTree _consIoriginalTree _partitionIoriginalTree rep_ options_
                   {-# LINE 20580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _consOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _consOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _consOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _partitionOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _attsIannotatedTree,_attsIoriginalTree) =
                  atts_ _attsOcat _attsOflags _attsOimCast
              ( _consIannotatedTree,_consIoriginalTree) =
                  cons_ _consOcat _consOflags _consOimCast
              ( _partitionIannotatedTree,_partitionIoriginalTree) =
                  partition_ _partitionOcat _partitionOflags _partitionOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterTable :: T_Annotation ->
                            T_Name ->
                            T_AlterTableOperation ->
                            T_Statement
_sem_Statement_AlterTable ann_ name_ operation_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _operationOcat :: Catalog
              _operationOflags :: TypeCheckingFlags
              _operationOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _operationIannotatedTree :: AlterTableOperation
              _operationIoriginalTree :: AlterTableOperation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 117, column 28)
              _annOtpe =
                  ({-# LINE 117 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 118, column 28)
              _nameOtpe =
                  ({-# LINE 118 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20732 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterTable _annIannotatedTree _nameIannotatedTree _operationIannotatedTree
                   {-# LINE 20738 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterTable _annIoriginalTree _nameIoriginalTree _operationIoriginalTree
                   {-# LINE 20744 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20750 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20756 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20762 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20768 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20774 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20780 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20786 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20792 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20798 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20804 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20810 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _operationIannotatedTree,_operationIoriginalTree) =
                  operation_ _operationOcat _operationOflags _operationOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterDatabase :: T_Annotation ->
                               T_Name ->
                               T_AlterDatabaseOperation ->
                               T_Statement
_sem_Statement_AlterDatabase ann_ name_ operation_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _operationOcat :: Catalog
              _operationOflags :: TypeCheckingFlags
              _operationOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _operationIannotatedTree :: AlterDatabaseOperation
              _operationIoriginalTree :: AlterDatabaseOperation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 110, column 31)
              _annOtpe =
                  ({-# LINE 110 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20850 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 111, column 31)
              _nameOtpe =
                  ({-# LINE 111 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20856 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterDatabase _annIannotatedTree _nameIannotatedTree _operationIannotatedTree
                   {-# LINE 20862 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterDatabase _annIoriginalTree _nameIoriginalTree _operationIoriginalTree
                   {-# LINE 20868 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20874 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 20880 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 20922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 20928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 20934 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _operationIannotatedTree,_operationIoriginalTree) =
                  operation_ _operationOcat _operationOflags _operationOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateSequence :: T_Annotation ->
                                T_Name ->
                                Integer ->
                                (Maybe Integer) ->
                                (Maybe Integer) ->
                                Integer ->
                                Integer ->
                                T_Statement
_sem_Statement_CreateSequence ann_ name_ incr_ min_ max_ start_ cache_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 150, column 32)
              _annOtpe =
                  ({-# LINE 150 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20973 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 151, column 32)
              _nameOtpe =
                  ({-# LINE 151 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 20979 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateSequence _annIannotatedTree _nameIannotatedTree incr_ min_ max_ start_ cache_
                   {-# LINE 20985 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateSequence _annIoriginalTree _nameIoriginalTree incr_ min_ max_ start_ cache_
                   {-# LINE 20991 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 20997 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21003 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21009 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21015 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21021 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21027 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21033 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21039 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterSequence :: T_Annotation ->
                               T_Name ->
                               T_AlterSequenceOperation ->
                               T_Statement
_sem_Statement_AlterSequence ann_ name_ operation_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _operationOcat :: Catalog
              _operationOflags :: TypeCheckingFlags
              _operationOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _operationIannotatedTree :: AlterSequenceOperation
              _operationIoriginalTree :: AlterSequenceOperation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 115, column 31)
              _annOtpe =
                  ({-# LINE 115 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21077 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 116, column 31)
              _nameOtpe =
                  ({-# LINE 116 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21083 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequence _annIannotatedTree _nameIannotatedTree _operationIannotatedTree
                   {-# LINE 21089 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSequence _annIoriginalTree _nameIoriginalTree _operationIoriginalTree
                   {-# LINE 21095 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21101 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21107 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21113 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21119 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21125 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21131 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21137 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21143 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21149 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21155 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21161 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _operationIannotatedTree,_operationIoriginalTree) =
                  operation_ _operationOcat _operationOflags _operationOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateTableAs :: T_Annotation ->
                               T_Name ->
                               Replace ->
                               T_QueryExpr ->
                               T_Statement
_sem_Statement_CreateTableAs ann_ name_ rep_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOouterDownEnv :: (Maybe Environment)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _exprOexpectedType :: (Maybe [TypeExtra])
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _exprIannotatedTree :: QueryExpr
              _exprIoriginalTree :: QueryExpr
              _exprIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 154, column 31)
              _annOtpe =
                  ({-# LINE 154 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21206 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 155, column 31)
              _exprOouterDownEnv =
                  ({-# LINE 155 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 21212 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 156, column 31)
              _nameOtpe =
                  ({-# LINE 156 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21218 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 19, column 5)
              _exprOexpectedType =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   liftM (map snd) _exprIupType
                   {-# LINE 21224 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 832, column 31)
              _exprOassignmentCastContext =
                  ({-# LINE 832 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 21230 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTableAs _annIannotatedTree _nameIannotatedTree rep_ _exprIannotatedTree
                   {-# LINE 21236 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTableAs _annIoriginalTree _nameIoriginalTree rep_ _exprIoriginalTree
                   {-# LINE 21242 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21248 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21254 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21260 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21266 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21272 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21278 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21284 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21290 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21296 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21302 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21308 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _exprIannotatedTree,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOexpectedType _exprOflags _exprOimCast _exprOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateView :: T_Annotation ->
                            T_Name ->
                            MaybeNameComponentList ->
                            T_QueryExpr ->
                            T_Statement
_sem_Statement_CreateView ann_ name_ colNames_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOouterDownEnv :: (Maybe Environment)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _exprOexpectedType :: (Maybe [TypeExtra])
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _exprIannotatedTree :: QueryExpr
              _exprIoriginalTree :: QueryExpr
              _exprIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 167, column 28)
              _annOtpe =
                  ({-# LINE 167 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21353 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 168, column 28)
              _exprOouterDownEnv =
                  ({-# LINE 168 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 21359 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 169, column 28)
              _nameOtpe =
                  ({-# LINE 169 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 19, column 5)
              _exprOexpectedType =
                  ({-# LINE 19 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   liftM (map snd) _exprIupType
                   {-# LINE 21371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 834, column 28)
              _exprOassignmentCastContext =
                  ({-# LINE 834 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 21377 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateView _annIannotatedTree _nameIannotatedTree colNames_ _exprIannotatedTree
                   {-# LINE 21383 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateView _annIoriginalTree _nameIoriginalTree colNames_ _exprIoriginalTree
                   {-# LINE 21389 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21395 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21401 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21407 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21413 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21419 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21425 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21431 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21443 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _exprIannotatedTree,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOexpectedType _exprOflags _exprOimCast _exprOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterView :: T_Annotation ->
                           T_Name ->
                           MaybeNameComponentList ->
                           T_QueryExpr ->
                           T_Statement
_sem_Statement_AlterView ann_ name_ colNames_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOexpectedType :: (Maybe [TypeExtra])
              _exprOouterDownEnv :: (Maybe Environment)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _exprIannotatedTree :: QueryExpr
              _exprIoriginalTree :: QueryExpr
              _exprIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 121, column 27)
              _annOtpe =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21500 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 122, column 27)
              _exprOexpectedType =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 21506 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 123, column 27)
              _exprOouterDownEnv =
                  ({-# LINE 123 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 21512 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 124, column 27)
              _nameOtpe =
                  ({-# LINE 124 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21518 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 829, column 27)
              _exprOassignmentCastContext =
                  ({-# LINE 829 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 21524 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterView _annIannotatedTree _nameIannotatedTree colNames_ _exprIannotatedTree
                   {-# LINE 21530 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterView _annIoriginalTree _nameIoriginalTree colNames_ _exprIoriginalTree
                   {-# LINE 21536 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21542 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21548 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21554 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21560 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21566 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21572 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21578 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21584 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21590 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21596 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21602 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _exprIannotatedTree,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOexpectedType _exprOflags _exprOimCast _exprOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateType :: T_Annotation ->
                            T_Name ->
                            T_TypeAttributeDefList ->
                            T_Statement
_sem_Statement_CreateType ann_ name_ atts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _attsOcat :: Catalog
              _attsOflags :: TypeCheckingFlags
              _attsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _attsIannotatedTree :: TypeAttributeDefList
              _attsIoriginalTree :: TypeAttributeDefList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 163, column 28)
              _annOtpe =
                  ({-# LINE 163 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21642 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 164, column 28)
              _nameOtpe =
                  ({-# LINE 164 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21648 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateType _annIannotatedTree _nameIannotatedTree _attsIannotatedTree
                   {-# LINE 21654 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateType _annIoriginalTree _nameIoriginalTree _attsIoriginalTree
                   {-# LINE 21660 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21666 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21672 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21678 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21702 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21708 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _attsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _attsIannotatedTree,_attsIoriginalTree) =
                  atts_ _attsOcat _attsOflags _attsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateUser :: T_Annotation ->
                            T_Name ->
                            String ->
                            T_Statement
_sem_Statement_CreateUser ann_ name_ password_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 165, column 28)
              _annOtpe =
                  ({-# LINE 165 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21761 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 166, column 28)
              _nameOtpe =
                  ({-# LINE 166 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21767 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateUser _annIannotatedTree _nameIannotatedTree password_
                   {-# LINE 21773 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateUser _annIoriginalTree _nameIoriginalTree password_
                   {-# LINE 21779 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21785 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21791 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21797 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21803 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21809 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21815 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21821 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21827 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateLogin :: T_Annotation ->
                             T_Name ->
                             String ->
                             T_Statement
_sem_Statement_CreateLogin ann_ name_ password_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 147, column 29)
              _annOtpe =
                  ({-# LINE 147 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 148, column 29)
              _nameOtpe =
                  ({-# LINE 148 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateLogin _annIannotatedTree _nameIannotatedTree password_
                   {-# LINE 21872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateLogin _annIoriginalTree _nameIoriginalTree password_
                   {-# LINE 21878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21890 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21896 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21902 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21908 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21914 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 21920 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 21926 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterUser :: T_Annotation ->
                           T_Name ->
                           String ->
                           T_Statement
_sem_Statement_AlterUser ann_ name_ password_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 119, column 27)
              _annOtpe =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21959 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 120, column 27)
              _nameOtpe =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 21965 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterUser _annIannotatedTree _nameIannotatedTree password_
                   {-# LINE 21971 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterUser _annIoriginalTree _nameIoriginalTree password_
                   {-# LINE 21977 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 21983 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 21989 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 21995 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22001 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22007 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22013 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22019 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22025 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterLogin :: T_Annotation ->
                            T_Name ->
                            String ->
                            T_Statement
_sem_Statement_AlterLogin ann_ name_ password_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 112, column 28)
              _annOtpe =
                  ({-# LINE 112 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22058 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 113, column 28)
              _nameOtpe =
                  ({-# LINE 113 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22064 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterLogin _annIannotatedTree _nameIannotatedTree password_
                   {-# LINE 22070 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterLogin _annIoriginalTree _nameIoriginalTree password_
                   {-# LINE 22076 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22082 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22088 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22094 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22112 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22118 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22124 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateSchema :: T_Annotation ->
                              T_Name ->
                              (Maybe Name) ->
                              T_Statement
_sem_Statement_CreateSchema ann_ name_ owner_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 149, column 30)
              _annOtpe =
                  ({-# LINE 149 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateSchema _annIannotatedTree _nameIannotatedTree owner_
                   {-# LINE 22163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateSchema _annIoriginalTree _nameIoriginalTree owner_
                   {-# LINE 22169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22175 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22187 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22199 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22205 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22211 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22217 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (chain)
              _nameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.CreateSchema.name.tpe"
                   {-# LINE 22223 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AlterSchema :: T_Annotation ->
                             T_Name ->
                             T_AlterSchemaOperation ->
                             T_Statement
_sem_Statement_AlterSchema ann_ name_ operation_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _operationOcat :: Catalog
              _operationOflags :: TypeCheckingFlags
              _operationOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _operationIannotatedTree :: AlterSchemaOperation
              _operationIoriginalTree :: AlterSchemaOperation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 114, column 29)
              _annOtpe =
                  ({-# LINE 114 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSchema _annIannotatedTree _nameIannotatedTree _operationIannotatedTree
                   {-# LINE 22267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AlterSchema _annIoriginalTree _nameIoriginalTree _operationIoriginalTree
                   {-# LINE 22273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22303 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22309 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22315 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22321 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (chain)
              _nameOtpe =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   error "missing rule: Statement.AlterSchema.name.tpe"
                   {-# LINE 22327 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22333 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22339 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _operationOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22345 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _operationIannotatedTree,_operationIoriginalTree) =
                  operation_ _operationOcat _operationOflags _operationOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateFunction :: T_Annotation ->
                                T_Name ->
                                T_ParamDefList ->
                                T_TypeName ->
                                Replace ->
                                Language ->
                                T_FnBody ->
                                Volatility ->
                                T_Statement
_sem_Statement_CreateFunction ann_ name_ params_ rettype_ rep_ lang_ body_ vol_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _paramsOcat :: Catalog
              _paramsOflags :: TypeCheckingFlags
              _paramsOimCast :: (Maybe TypeExtra)
              _rettypeOcat :: Catalog
              _rettypeOflags :: TypeCheckingFlags
              _rettypeOimCast :: (Maybe TypeExtra)
              _bodyOcat :: Catalog
              _bodyOflags :: TypeCheckingFlags
              _bodyOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _paramsIannotatedTree :: ParamDefList
              _paramsIoriginalTree :: ParamDefList
              _rettypeIannotatedTree :: TypeName
              _rettypeInamedType :: (Maybe TypeExtra)
              _rettypeIoriginalTree :: TypeName
              _bodyIannotatedTree :: FnBody
              _bodyIoriginalTree :: FnBody
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 143, column 32)
              _annOtpe =
                  ({-# LINE 143 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22401 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 144, column 32)
              _nameOtpe =
                  ({-# LINE 144 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22407 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateFunction _annIannotatedTree _nameIannotatedTree _paramsIannotatedTree _rettypeIannotatedTree rep_ lang_ _bodyIannotatedTree vol_
                   {-# LINE 22413 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateFunction _annIoriginalTree _nameIoriginalTree _paramsIoriginalTree _rettypeIoriginalTree rep_ lang_ _bodyIoriginalTree vol_
                   {-# LINE 22419 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22425 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22431 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22443 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22449 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22455 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22461 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _paramsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _paramsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _paramsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _rettypeOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22491 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _rettypeOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22497 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _rettypeOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22503 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _bodyOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22509 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _bodyOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22515 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _bodyOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22521 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _paramsIannotatedTree,_paramsIoriginalTree) =
                  params_ _paramsOcat _paramsOflags _paramsOimCast
              ( _rettypeIannotatedTree,_rettypeInamedType,_rettypeIoriginalTree) =
                  rettype_ _rettypeOcat _rettypeOflags _rettypeOimCast
              ( _bodyIannotatedTree,_bodyIoriginalTree) =
                  body_ _bodyOcat _bodyOflags _bodyOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateDomain :: T_Annotation ->
                              T_Name ->
                              T_TypeName ->
                              String ->
                              T_MaybeBoolExpr ->
                              T_Statement
_sem_Statement_CreateDomain ann_ name_ typ_ constraintName_ check_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _checkOdownEnv :: Environment
              _nameOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nameOcat :: Catalog
              _nameOflags :: TypeCheckingFlags
              _nameOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe TypeExtra)
              _checkOcat :: Catalog
              _checkOflags :: TypeCheckingFlags
              _checkOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nameIannotatedTree :: Name
              _nameIoriginalTree :: Name
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              _checkIannotatedTree :: MaybeBoolExpr
              _checkIoriginalTree :: MaybeBoolExpr
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 140, column 30)
              _annOtpe =
                  ({-# LINE 140 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 141, column 30)
              _checkOdownEnv =
                  ({-# LINE 141 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 22580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 142, column 30)
              _nameOtpe =
                  ({-# LINE 142 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateDomain _annIannotatedTree _nameIannotatedTree _typIannotatedTree constraintName_ _checkIannotatedTree
                   {-# LINE 22592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateDomain _annIoriginalTree _nameIoriginalTree _typIoriginalTree constraintName_ _checkIoriginalTree
                   {-# LINE 22598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _checkOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _checkOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _checkOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nameIannotatedTree,_nameIoriginalTree) =
                  name_ _nameOcat _nameOflags _nameOimCast _nameOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
              ( _checkIannotatedTree,_checkIoriginalTree) =
                  check_ _checkOcat _checkOdownEnv _checkOflags _checkOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateLanguage :: T_Annotation ->
                                String ->
                                T_Statement
_sem_Statement_CreateLanguage ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 146, column 32)
              _annOtpe =
                  ({-# LINE 146 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateLanguage _annIannotatedTree name_
                   {-# LINE 22718 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateLanguage _annIoriginalTree name_
                   {-# LINE 22724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22730 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22736 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22742 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22748 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22754 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateTrigger :: T_Annotation ->
                               NameComponent ->
                               TriggerWhen ->
                               ([TriggerEvent]) ->
                               T_Name ->
                               TriggerFire ->
                               T_Name ->
                               T_ScalarExprList ->
                               T_Statement
_sem_Statement_CreateTrigger ann_ name_ wh_ events_ tbl_ firing_ fnName_ fnArgs_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _fnArgsOdownEnv :: Environment
              _fnArgsOexpectedCast :: Bool
              _fnArgsOexpectedTypes :: ([TypeExtra])
              _fnNameOtpe :: (Either [TypeError] TypeExtra)
              _tblOtpe :: (Either [TypeError] TypeExtra)
              _fnArgsOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tblOcat :: Catalog
              _tblOflags :: TypeCheckingFlags
              _tblOimCast :: (Maybe TypeExtra)
              _fnNameOcat :: Catalog
              _fnNameOflags :: TypeCheckingFlags
              _fnNameOimCast :: (Maybe TypeExtra)
              _fnArgsOcat :: Catalog
              _fnArgsOflags :: TypeCheckingFlags
              _fnArgsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tblIannotatedTree :: Name
              _tblIoriginalTree :: Name
              _fnNameIannotatedTree :: Name
              _fnNameIoriginalTree :: Name
              _fnArgsIannotatedTree :: ScalarExprList
              _fnArgsIoriginalTree :: ScalarExprList
              _fnArgsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 157, column 31)
              _annOtpe =
                  ({-# LINE 157 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22806 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 158, column 31)
              _fnArgsOdownEnv =
                  ({-# LINE 158 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 22812 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 159, column 31)
              _fnArgsOexpectedCast =
                  ({-# LINE 159 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 22818 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 160, column 31)
              _fnArgsOexpectedTypes =
                  ({-# LINE 160 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   []
                   {-# LINE 22824 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 161, column 31)
              _fnNameOtpe =
                  ({-# LINE 161 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22830 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 162, column 31)
              _tblOtpe =
                  ({-# LINE 162 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22836 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 833, column 31)
              _fnArgsOassignmentCastContext =
                  ({-# LINE 833 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 22842 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTrigger _annIannotatedTree name_ wh_ events_ _tblIannotatedTree firing_ _fnNameIannotatedTree _fnArgsIannotatedTree
                   {-# LINE 22848 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateTrigger _annIoriginalTree name_ wh_ events_ _tblIoriginalTree firing_ _fnNameIoriginalTree _fnArgsIoriginalTree
                   {-# LINE 22854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22890 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22896 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22902 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnNameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22908 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnNameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22914 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnNameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22920 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnArgsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 22926 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnArgsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 22932 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnArgsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 22938 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tblIannotatedTree,_tblIoriginalTree) =
                  tbl_ _tblOcat _tblOflags _tblOimCast _tblOtpe
              ( _fnNameIannotatedTree,_fnNameIoriginalTree) =
                  fnName_ _fnNameOcat _fnNameOflags _fnNameOimCast _fnNameOtpe
              ( _fnArgsIannotatedTree,_fnArgsIoriginalTree,_fnArgsIupTypes) =
                  fnArgs_ _fnArgsOassignmentCastContext _fnArgsOcat _fnArgsOdownEnv _fnArgsOexpectedCast _fnArgsOexpectedTypes _fnArgsOflags _fnArgsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_DropFunction :: T_Annotation ->
                              IfExists ->
                              T_NameTypeNameListPairList ->
                              Cascade ->
                              T_Statement
_sem_Statement_DropFunction ann_ ifE_ sigs_ cascade_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _sigsOcat :: Catalog
              _sigsOflags :: TypeCheckingFlags
              _sigsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _sigsIannotatedTree :: NameTypeNameListPairList
              _sigsIoriginalTree :: NameTypeNameListPairList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 172, column 30)
              _annOtpe =
                  ({-# LINE 172 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 22975 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropFunction _annIannotatedTree ifE_ _sigsIannotatedTree cascade_
                   {-# LINE 22981 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropFunction _annIoriginalTree ifE_ _sigsIoriginalTree cascade_
                   {-# LINE 22987 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 22993 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 22999 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23005 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23011 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23017 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _sigsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23023 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _sigsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23029 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _sigsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23035 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _sigsIannotatedTree,_sigsIoriginalTree) =
                  sigs_ _sigsOcat _sigsOflags _sigsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_DropSomething :: T_Annotation ->
                               DropType ->
                               IfExists ->
                               ([Name]) ->
                               Cascade ->
                               T_Statement
_sem_Statement_DropSomething ann_ dropType_ ifE_ names_ cascade_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 23064 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropSomething _annIannotatedTree dropType_ ifE_ names_ cascade_
                   {-# LINE 23070 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropSomething _annIoriginalTree dropType_ ifE_ names_ cascade_
                   {-# LINE 23076 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23082 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23088 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23094 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_DropTrigger :: T_Annotation ->
                             IfExists ->
                             NameComponent ->
                             T_Name ->
                             Cascade ->
                             T_Statement
_sem_Statement_DropTrigger ann_ ifE_ name_ tbl_ cascade_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _tblOtpe :: (Either [TypeError] TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tblOcat :: Catalog
              _tblOflags :: TypeCheckingFlags
              _tblOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tblIannotatedTree :: Name
              _tblIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 173, column 29)
              _tblOtpe =
                  ({-# LINE 173 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 23145 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropTrigger _annIannotatedTree ifE_ name_ _tblIannotatedTree cascade_
                   {-# LINE 23151 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DropTrigger _annIoriginalTree ifE_ name_ _tblIoriginalTree cascade_
                   {-# LINE 23157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23175 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23181 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23187 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23199 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23205 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tblIannotatedTree,_tblIoriginalTree) =
                  tbl_ _tblOcat _tblOflags _tblOimCast _tblOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateDatabase :: T_Annotation ->
                                T_Name ->
                                T_Statement
_sem_Statement_CreateDatabase ann_ nm_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _nmOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _nmOcat :: Catalog
              _nmOflags :: TypeCheckingFlags
              _nmOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _nmIannotatedTree :: Name
              _nmIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 138, column 32)
              _annOtpe =
                  ({-# LINE 138 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 139, column 32)
              _nmOtpe =
                  ({-# LINE 139 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateDatabase _annIannotatedTree _nmIannotatedTree
                   {-# LINE 23249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateDatabase _annIoriginalTree _nmIoriginalTree
                   {-# LINE 23255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nmOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nmOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _nmOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23303 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _nmIannotatedTree,_nmIoriginalTree) =
                  nm_ _nmOcat _nmOflags _nmOimCast _nmOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Set :: T_Annotation ->
                     String ->
                     ([SetValue]) ->
                     T_Statement
_sem_Statement_Set ann_ name_ values_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 218, column 21)
              _annOtpe =
                  ({-# LINE 218 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Set _annIannotatedTree name_ values_
                   {-# LINE 23336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Set _annIoriginalTree name_ values_
                   {-# LINE 23342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23354 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23360 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23366 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Notify :: T_Annotation ->
                        String ->
                        T_Statement
_sem_Statement_Notify ann_ name_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 196, column 24)
              _annOtpe =
                  ({-# LINE 196 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23396 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Notify _annIannotatedTree name_
                   {-# LINE 23402 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Notify _annIoriginalTree name_
                   {-# LINE 23408 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23414 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23420 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23426 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23432 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23438 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Into :: T_Annotation ->
                      Bool ->
                      ([Name]) ->
                      T_Statement ->
                      T_Statement
_sem_Statement_Into ann_ strict_ into_ stmt_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _stmtOcat :: Catalog
              _stmtOflags :: TypeCheckingFlags
              _stmtOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _stmtIannotatedTree :: Statement
              _stmtIoriginalTree :: Statement
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 23469 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Into _annIannotatedTree strict_ into_ _stmtIannotatedTree
                   {-# LINE 23475 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Into _annIoriginalTree strict_ into_ _stmtIoriginalTree
                   {-# LINE 23481 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23487 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23493 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23499 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23505 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23511 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stmtOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23517 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stmtOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23523 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stmtOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23529 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _stmtIannotatedTree,_stmtIoriginalTree) =
                  stmt_ _stmtOcat _stmtOflags _stmtOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Assignment :: T_Annotation ->
                            T_Name ->
                            T_ScalarExpr ->
                            T_Statement
_sem_Statement_Assignment ann_ target_ value_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _valueOexpectedCast :: Bool
              _valueOexpectedType :: (Maybe TypeExtra)
              _valueOodbcFunction :: Bool
              _annOtpe :: (Either [TypeError] TypeExtra)
              _targetOtpe :: (Either [TypeError] TypeExtra)
              _valueOdownEnv :: Environment
              _valueOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _targetOcat :: Catalog
              _targetOflags :: TypeCheckingFlags
              _targetOimCast :: (Maybe TypeExtra)
              _valueOcat :: Catalog
              _valueOflags :: TypeCheckingFlags
              _valueOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _targetIannotatedTree :: Name
              _targetIoriginalTree :: Name
              _valueIannotatedTree :: ScalarExpr
              _valueIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _valueIoriginalTree :: ScalarExpr
              _valueIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 125, column 28)
              _valueOexpectedCast =
                  ({-# LINE 125 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23574 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 126, column 28)
              _valueOexpectedType =
                  ({-# LINE 126 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 23580 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 127, column 28)
              _valueOodbcFunction =
                  ({-# LINE 127 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23586 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 23592 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 26, column 5)
              _targetOtpe =
                  ({-# LINE 26 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 23598 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 27, column 5)
              _valueOdownEnv =
                  ({-# LINE 27 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 23604 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 830, column 28)
              _valueOassignmentCastContext =
                  ({-# LINE 830 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 23610 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Assignment _annIannotatedTree _targetIannotatedTree _valueIannotatedTree
                   {-# LINE 23616 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Assignment _annIoriginalTree _targetIoriginalTree _valueIoriginalTree
                   {-# LINE 23622 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23628 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23634 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23640 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23646 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23652 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _targetOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23658 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _targetOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23664 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _targetOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23670 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _targetIannotatedTree,_targetIoriginalTree) =
                  target_ _targetOcat _targetOflags _targetOimCast _targetOtpe
              ( _valueIannotatedTree,_valueIcolExprs,_valueIoriginalTree,_valueIupType) =
                  value_ _valueOassignmentCastContext _valueOcat _valueOdownEnv _valueOexpectedCast _valueOexpectedType _valueOflags _valueOimCast _valueOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Return :: T_Annotation ->
                        T_MaybeScalarExpr ->
                        T_Statement
_sem_Statement_Return ann_ value_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _valueOdownEnv :: Environment
              _valueOexpectedCast :: Bool
              _valueOexpectedType :: (Maybe TypeExtra)
              _valueOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _valueOcat :: Catalog
              _valueOflags :: TypeCheckingFlags
              _valueOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _valueIannotatedTree :: MaybeScalarExpr
              _valueIoriginalTree :: MaybeScalarExpr
              _valueIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 207, column 24)
              _annOtpe =
                  ({-# LINE 207 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 208, column 24)
              _valueOdownEnv =
                  ({-# LINE 208 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 23732 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 209, column 24)
              _valueOexpectedCast =
                  ({-# LINE 209 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23738 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 210, column 24)
              _valueOexpectedType =
                  ({-# LINE 210 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 23744 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 844, column 24)
              _valueOassignmentCastContext =
                  ({-# LINE 844 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 23750 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Return _annIannotatedTree _valueIannotatedTree
                   {-# LINE 23756 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Return _annIoriginalTree _valueIoriginalTree
                   {-# LINE 23762 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23768 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23774 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23780 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23786 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23792 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23798 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23804 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valueOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23810 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _valueIannotatedTree,_valueIoriginalTree,_valueIupType) =
                  value_ _valueOassignmentCastContext _valueOcat _valueOdownEnv _valueOexpectedCast _valueOexpectedType _valueOflags _valueOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ReturnNext :: T_Annotation ->
                            T_ScalarExpr ->
                            T_Statement
_sem_Statement_ReturnNext ann_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 211, column 28)
              _annOtpe =
                  ({-# LINE 211 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23848 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 212, column 28)
              _exprOdownEnv =
                  ({-# LINE 212 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 23854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 213, column 28)
              _exprOexpectedCast =
                  ({-# LINE 213 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 214, column 28)
              _exprOexpectedType =
                  ({-# LINE 214 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 23866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 215, column 28)
              _exprOodbcFunction =
                  ({-# LINE 215 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 23872 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 845, column 28)
              _exprOassignmentCastContext =
                  ({-# LINE 845 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 23878 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReturnNext _annIannotatedTree _exprIannotatedTree
                   {-# LINE 23884 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReturnNext _annIoriginalTree _exprIoriginalTree
                   {-# LINE 23890 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 23896 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 23902 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23908 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23914 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23920 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 23926 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 23932 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 23938 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ReturnQuery :: T_Annotation ->
                             T_QueryExpr ->
                             T_Statement
_sem_Statement_ReturnQuery ann_ sel_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _selOouterDownEnv :: (Maybe Environment)
              _selOexpectedType :: (Maybe [TypeExtra])
              _selOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _selOcat :: Catalog
              _selOflags :: TypeCheckingFlags
              _selOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selIannotatedTree :: QueryExpr
              _selIoriginalTree :: QueryExpr
              _selIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 216, column 29)
              _annOtpe =
                  ({-# LINE 216 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 23973 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 217, column 29)
              _selOouterDownEnv =
                  ({-# LINE 217 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 23979 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 22, column 5)
              _selOexpectedType =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   liftM (map snd) _selIupType
                   {-# LINE 23985 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 846, column 29)
              _selOassignmentCastContext =
                  ({-# LINE 846 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 23991 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReturnQuery _annIannotatedTree _selIannotatedTree
                   {-# LINE 23997 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ReturnQuery _annIoriginalTree _selIoriginalTree
                   {-# LINE 24003 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24009 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24015 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24021 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24027 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24033 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24039 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24045 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24051 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOassignmentCastContext _selOcat _selOexpectedType _selOflags _selOimCast _selOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Raise :: T_Annotation ->
                       RaiseType ->
                       String ->
                       T_ScalarExprList ->
                       T_Statement
_sem_Statement_Raise ann_ level_ message_ args_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _argsOdownEnv :: Environment
              _argsOexpectedCast :: Bool
              _argsOexpectedTypes :: ([TypeExtra])
              _argsOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _argsOcat :: Catalog
              _argsOflags :: TypeCheckingFlags
              _argsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _argsIannotatedTree :: ScalarExprList
              _argsIoriginalTree :: ScalarExprList
              _argsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 203, column 23)
              _annOtpe =
                  ({-# LINE 203 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24089 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 204, column 23)
              _argsOdownEnv =
                  ({-# LINE 204 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 24095 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 205, column 23)
              _argsOexpectedCast =
                  ({-# LINE 205 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24101 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 206, column 23)
              _argsOexpectedTypes =
                  ({-# LINE 206 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   []
                   {-# LINE 24107 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 843, column 23)
              _argsOassignmentCastContext =
                  ({-# LINE 843 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 24113 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Raise _annIannotatedTree level_ message_ _argsIannotatedTree
                   {-# LINE 24119 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Raise _annIoriginalTree level_ message_ _argsIoriginalTree
                   {-# LINE 24125 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24131 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24137 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24143 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24149 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24155 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24161 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24167 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24173 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOassignmentCastContext _argsOcat _argsOdownEnv _argsOexpectedCast _argsOexpectedTypes _argsOflags _argsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_NullStatement :: T_Annotation ->
                               T_Statement
_sem_Statement_NullStatement ann_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 197, column 31)
              _annOtpe =
                  ({-# LINE 197 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24198 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullStatement _annIannotatedTree
                   {-# LINE 24204 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   NullStatement _annIoriginalTree
                   {-# LINE 24210 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24216 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24222 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24228 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24234 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24240 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Perform :: T_Annotation ->
                         T_ScalarExpr ->
                         T_Statement
_sem_Statement_Perform ann_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 198, column 25)
              _annOtpe =
                  ({-# LINE 198 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24276 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 199, column 25)
              _exprOdownEnv =
                  ({-# LINE 199 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 24282 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 200, column 25)
              _exprOexpectedCast =
                  ({-# LINE 200 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24288 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 201, column 25)
              _exprOexpectedType =
                  ({-# LINE 201 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 24294 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 202, column 25)
              _exprOodbcFunction =
                  ({-# LINE 202 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 841, column 25)
              _exprOassignmentCastContext =
                  ({-# LINE 841 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 24306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Perform _annIannotatedTree _exprIannotatedTree
                   {-# LINE 24312 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Perform _annIoriginalTree _exprIoriginalTree
                   {-# LINE 24318 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24324 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24330 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24336 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24354 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24360 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24366 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Execute :: T_Annotation ->
                         T_ScalarExpr ->
                         T_Statement
_sem_Statement_Execute ann_ expr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 178, column 25)
              _annOtpe =
                  ({-# LINE 178 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24404 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 179, column 25)
              _exprOdownEnv =
                  ({-# LINE 179 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 24410 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 180, column 25)
              _exprOexpectedCast =
                  ({-# LINE 180 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24416 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 181, column 25)
              _exprOexpectedType =
                  ({-# LINE 181 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 24422 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 182, column 25)
              _exprOodbcFunction =
                  ({-# LINE 182 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24428 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 836, column 25)
              _exprOassignmentCastContext =
                  ({-# LINE 836 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 24434 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Execute _annIannotatedTree _exprIannotatedTree
                   {-# LINE 24440 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Execute _annIoriginalTree _exprIoriginalTree
                   {-# LINE 24446 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24452 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24458 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24464 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24470 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24476 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24482 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24488 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24494 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ForQueryStatement :: T_Annotation ->
                                   (Maybe String) ->
                                   NameComponent ->
                                   T_QueryExpr ->
                                   T_StatementList ->
                                   T_Statement
_sem_Statement_ForQueryStatement ann_ lb_ var_ sel_ sts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _selOouterDownEnv :: (Maybe Environment)
              _selOexpectedType :: (Maybe [TypeExtra])
              _selOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _selOcat :: Catalog
              _selOflags :: TypeCheckingFlags
              _selOimCast :: (Maybe TypeExtra)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckingFlags
              _stsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selIannotatedTree :: QueryExpr
              _selIoriginalTree :: QueryExpr
              _selIupType :: (Maybe [(Text,TypeExtra)])
              _stsIannotatedTree :: StatementList
              _stsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 193, column 35)
              _annOtpe =
                  ({-# LINE 193 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24537 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 194, column 35)
              _selOouterDownEnv =
                  ({-# LINE 194 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 24543 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 22, column 5)
              _selOexpectedType =
                  ({-# LINE 22 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   liftM (map snd) _selIupType
                   {-# LINE 24549 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 839, column 35)
              _selOassignmentCastContext =
                  ({-# LINE 839 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 24555 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ForQueryStatement _annIannotatedTree lb_ var_ _selIannotatedTree _stsIannotatedTree
                   {-# LINE 24561 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ForQueryStatement _annIoriginalTree lb_ var_ _selIoriginalTree _stsIoriginalTree
                   {-# LINE 24567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24591 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24615 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24621 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24627 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24633 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOassignmentCastContext _selOcat _selOexpectedType _selOflags _selOimCast _selOouterDownEnv
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ForIntegerStatement :: T_Annotation ->
                                     (Maybe String) ->
                                     NameComponent ->
                                     T_ScalarExpr ->
                                     T_ScalarExpr ->
                                     T_StatementList ->
                                     T_Statement
_sem_Statement_ForIntegerStatement ann_ lb_ var_ from_ to_ sts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _fromOdownEnv :: Environment
              _fromOexpectedCast :: Bool
              _fromOexpectedType :: (Maybe TypeExtra)
              _fromOodbcFunction :: Bool
              _toOdownEnv :: Environment
              _toOexpectedCast :: Bool
              _toOexpectedType :: (Maybe TypeExtra)
              _toOodbcFunction :: Bool
              _fromOassignmentCastContext :: Bool
              _toOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _fromOcat :: Catalog
              _fromOflags :: TypeCheckingFlags
              _fromOimCast :: (Maybe TypeExtra)
              _toOcat :: Catalog
              _toOflags :: TypeCheckingFlags
              _toOimCast :: (Maybe TypeExtra)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckingFlags
              _stsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _fromIannotatedTree :: ScalarExpr
              _fromIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _fromIoriginalTree :: ScalarExpr
              _fromIupType :: (Maybe TypeExtra)
              _toIannotatedTree :: ScalarExpr
              _toIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _toIoriginalTree :: ScalarExpr
              _toIupType :: (Maybe TypeExtra)
              _stsIannotatedTree :: StatementList
              _stsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 184, column 37)
              _annOtpe =
                  ({-# LINE 184 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 185, column 37)
              _fromOdownEnv =
                  ({-# LINE 185 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 24700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 186, column 37)
              _fromOexpectedCast =
                  ({-# LINE 186 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 187, column 37)
              _fromOexpectedType =
                  ({-# LINE 187 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 24712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 188, column 37)
              _fromOodbcFunction =
                  ({-# LINE 188 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24718 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 189, column 37)
              _toOdownEnv =
                  ({-# LINE 189 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 24724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 190, column 37)
              _toOexpectedCast =
                  ({-# LINE 190 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24730 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 191, column 37)
              _toOexpectedType =
                  ({-# LINE 191 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 24736 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 192, column 37)
              _toOodbcFunction =
                  ({-# LINE 192 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 24742 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 837, column 37)
              _fromOassignmentCastContext =
                  ({-# LINE 837 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 24748 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 838, column 37)
              _toOassignmentCastContext =
                  ({-# LINE 838 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 24754 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ForIntegerStatement _annIannotatedTree lb_ var_ _fromIannotatedTree _toIannotatedTree _stsIannotatedTree
                   {-# LINE 24760 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ForIntegerStatement _annIoriginalTree lb_ var_ _fromIoriginalTree _toIoriginalTree _stsIoriginalTree
                   {-# LINE 24766 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24772 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24778 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24784 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24790 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24796 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fromOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24802 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fromOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24808 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fromOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24814 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _toOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24820 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _toOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24826 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _toOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24832 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24838 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24844 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24850 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _fromIannotatedTree,_fromIcolExprs,_fromIoriginalTree,_fromIupType) =
                  from_ _fromOassignmentCastContext _fromOcat _fromOdownEnv _fromOexpectedCast _fromOexpectedType _fromOflags _fromOimCast _fromOodbcFunction
              ( _toIannotatedTree,_toIcolExprs,_toIoriginalTree,_toIupType) =
                  to_ _toOassignmentCastContext _toOcat _toOdownEnv _toOexpectedCast _toOexpectedType _toOflags _toOimCast _toOodbcFunction
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_LoopStatement :: T_Annotation ->
                               (Maybe String) ->
                               T_StatementList ->
                               T_Statement
_sem_Statement_LoopStatement ann_ lb_ sts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckingFlags
              _stsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _stsIannotatedTree :: StatementList
              _stsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 195, column 31)
              _annOtpe =
                  ({-# LINE 195 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   LoopStatement _annIannotatedTree lb_ _stsIannotatedTree
                   {-# LINE 24892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   LoopStatement _annIoriginalTree lb_ _stsIoriginalTree
                   {-# LINE 24898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 24904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 24910 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24916 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24922 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24928 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 24934 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 24940 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 24946 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_WhileStatement :: T_Annotation ->
                                (Maybe String) ->
                                T_ScalarExpr ->
                                T_StatementList ->
                                T_Statement
_sem_Statement_WhileStatement ann_ lb_ expr_ sts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _exprOdownEnv :: Environment
              _exprOexpectedCast :: Bool
              _exprOexpectedType :: (Maybe TypeExtra)
              _exprOodbcFunction :: Bool
              _exprOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _exprOcat :: Catalog
              _exprOflags :: TypeCheckingFlags
              _exprOimCast :: (Maybe TypeExtra)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckingFlags
              _stsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exprIannotatedTree :: ScalarExpr
              _exprIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _exprIoriginalTree :: ScalarExpr
              _exprIupType :: (Maybe TypeExtra)
              _stsIannotatedTree :: StatementList
              _stsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 221, column 32)
              _annOtpe =
                  ({-# LINE 221 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 24991 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 222, column 32)
              _exprOdownEnv =
                  ({-# LINE 222 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 24997 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 223, column 32)
              _exprOexpectedCast =
                  ({-# LINE 223 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 25003 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 224, column 32)
              _exprOexpectedType =
                  ({-# LINE 224 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 25009 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 225, column 32)
              _exprOodbcFunction =
                  ({-# LINE 225 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 25015 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 847, column 32)
              _exprOassignmentCastContext =
                  ({-# LINE 847 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 25021 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WhileStatement _annIannotatedTree lb_ _exprIannotatedTree _stsIannotatedTree
                   {-# LINE 25027 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WhileStatement _annIoriginalTree lb_ _exprIoriginalTree _stsIoriginalTree
                   {-# LINE 25033 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25039 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25045 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25051 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25057 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25063 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25069 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25075 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25081 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25087 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25093 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25099 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exprIannotatedTree,_exprIcolExprs,_exprIoriginalTree,_exprIupType) =
                  expr_ _exprOassignmentCastContext _exprOcat _exprOdownEnv _exprOexpectedCast _exprOexpectedType _exprOflags _exprOimCast _exprOodbcFunction
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ContinueStatement :: T_Annotation ->
                                   (Maybe String) ->
                                   T_Statement
_sem_Statement_ContinueStatement ann_ lb_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 135, column 35)
              _annOtpe =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 25127 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ContinueStatement _annIannotatedTree lb_
                   {-# LINE 25133 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ContinueStatement _annIoriginalTree lb_
                   {-# LINE 25139 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25145 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25151 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25157 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25163 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25169 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ExitStatement :: T_Annotation ->
                               (Maybe String) ->
                               T_Statement
_sem_Statement_ExitStatement ann_ lb_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 183, column 31)
              _annOtpe =
                  ({-# LINE 183 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 25193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ExitStatement _annIannotatedTree lb_
                   {-# LINE 25199 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ExitStatement _annIoriginalTree lb_
                   {-# LINE 25205 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25211 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25217 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25223 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25229 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25235 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CaseStatementSimple :: T_Annotation ->
                                     T_ScalarExpr ->
                                     T_ScalarExprListStatementListTripleList ->
                                     T_StatementList ->
                                     T_Statement
_sem_Statement_CaseStatementSimple ann_ val_ cases_ els_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _valOdownEnv :: Environment
              _valOexpectedCast :: Bool
              _valOexpectedType :: (Maybe TypeExtra)
              _valOodbcFunction :: Bool
              _valOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _valOcat :: Catalog
              _valOflags :: TypeCheckingFlags
              _valOimCast :: (Maybe TypeExtra)
              _casesOcat :: Catalog
              _casesOflags :: TypeCheckingFlags
              _casesOimCast :: (Maybe TypeExtra)
              _elsOcat :: Catalog
              _elsOflags :: TypeCheckingFlags
              _elsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _valIannotatedTree :: ScalarExpr
              _valIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _valIoriginalTree :: ScalarExpr
              _valIupType :: (Maybe TypeExtra)
              _casesIannotatedTree :: ScalarExprListStatementListTripleList
              _casesIoriginalTree :: ScalarExprListStatementListTripleList
              _elsIannotatedTree :: StatementList
              _elsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 130, column 37)
              _annOtpe =
                  ({-# LINE 130 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 25283 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 131, column 37)
              _valOdownEnv =
                  ({-# LINE 131 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 25289 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 132, column 37)
              _valOexpectedCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 25295 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 133, column 37)
              _valOexpectedType =
                  ({-# LINE 133 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 25301 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 134, column 37)
              _valOodbcFunction =
                  ({-# LINE 134 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 25307 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 831, column 37)
              _valOassignmentCastContext =
                  ({-# LINE 831 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 25313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseStatementSimple _annIannotatedTree _valIannotatedTree _casesIannotatedTree _elsIannotatedTree
                   {-# LINE 25319 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseStatementSimple _annIoriginalTree _valIoriginalTree _casesIoriginalTree _elsIoriginalTree
                   {-# LINE 25325 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25331 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25337 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25343 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25349 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25355 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25361 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25367 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _valOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25373 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25379 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25385 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25391 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25397 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25403 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25409 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _valIannotatedTree,_valIcolExprs,_valIoriginalTree,_valIupType) =
                  val_ _valOassignmentCastContext _valOcat _valOdownEnv _valOexpectedCast _valOexpectedType _valOflags _valOimCast _valOodbcFunction
              ( _casesIannotatedTree,_casesIoriginalTree) =
                  cases_ _casesOcat _casesOflags _casesOimCast
              ( _elsIannotatedTree,_elsIoriginalTree) =
                  els_ _elsOcat _elsOflags _elsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CaseStatement :: T_Annotation ->
                               T_ScalarExprListStatementListTripleList ->
                               T_StatementList ->
                               T_Statement
_sem_Statement_CaseStatement ann_ cases_ els_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _casesOcat :: Catalog
              _casesOflags :: TypeCheckingFlags
              _casesOimCast :: (Maybe TypeExtra)
              _elsOcat :: Catalog
              _elsOflags :: TypeCheckingFlags
              _elsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _casesIannotatedTree :: ScalarExprListStatementListTripleList
              _casesIoriginalTree :: ScalarExprListStatementListTripleList
              _elsIannotatedTree :: StatementList
              _elsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 129, column 31)
              _annOtpe =
                  ({-# LINE 129 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 25450 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseStatement _annIannotatedTree _casesIannotatedTree _elsIannotatedTree
                   {-# LINE 25456 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CaseStatement _annIoriginalTree _casesIoriginalTree _elsIoriginalTree
                   {-# LINE 25462 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25468 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25480 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25486 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25498 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25504 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25510 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _casesIannotatedTree,_casesIoriginalTree) =
                  cases_ _casesOcat _casesOflags _casesOimCast
              ( _elsIannotatedTree,_elsIoriginalTree) =
                  els_ _elsOcat _elsOflags _elsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_If :: T_Annotation ->
                    T_ScalarExprStatementListPairList ->
                    T_StatementList ->
                    T_Statement
_sem_Statement_If ann_ cases_ els_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _casesOcat :: Catalog
              _casesOflags :: TypeCheckingFlags
              _casesOimCast :: (Maybe TypeExtra)
              _elsOcat :: Catalog
              _elsOflags :: TypeCheckingFlags
              _elsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _casesIannotatedTree :: ScalarExprStatementListPairList
              _casesIoriginalTree :: ScalarExprStatementListPairList
              _elsIannotatedTree :: StatementList
              _elsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 25567 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   If _annIannotatedTree _casesIannotatedTree _elsIannotatedTree
                   {-# LINE 25573 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   If _annIoriginalTree _casesIoriginalTree _elsIoriginalTree
                   {-# LINE 25579 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25585 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25591 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25597 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25603 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25609 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25615 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25621 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _casesOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25627 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25633 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25639 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _elsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25645 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _casesIannotatedTree,_casesIoriginalTree) =
                  cases_ _casesOcat _casesOflags _casesOimCast
              ( _elsIannotatedTree,_elsIoriginalTree) =
                  els_ _elsOcat _elsOflags _elsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_Block :: T_Annotation ->
                       (Maybe String) ->
                       T_VarDefList ->
                       T_StatementList ->
                       T_Statement
_sem_Statement_Block ann_ lb_ vars_ sts_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _varsOcat :: Catalog
              _varsOflags :: TypeCheckingFlags
              _varsOimCast :: (Maybe TypeExtra)
              _stsOcat :: Catalog
              _stsOflags :: TypeCheckingFlags
              _stsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _varsIannotatedTree :: VarDefList
              _varsIoriginalTree :: VarDefList
              _stsIannotatedTree :: StatementList
              _stsIoriginalTree :: StatementList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 128, column 23)
              _annOtpe =
                  ({-# LINE 128 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 25685 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Block _annIannotatedTree lb_ _varsIannotatedTree _stsIannotatedTree
                   {-# LINE 25691 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Block _annIoriginalTree lb_ _varsIoriginalTree _stsIoriginalTree
                   {-# LINE 25697 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25721 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25727 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _varsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25733 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _varsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25739 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _varsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25745 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25751 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25757 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _stsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25763 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _varsIannotatedTree,_varsIoriginalTree) =
                  vars_ _varsOcat _varsOflags _varsOimCast
              ( _stsIannotatedTree,_stsIoriginalTree) =
                  sts_ _stsOcat _stsOflags _stsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_AntiStatement :: String ->
                               T_Statement
_sem_Statement_AntiStatement string_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiStatement string_
                   {-# LINE 25784 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   AntiStatement string_
                   {-# LINE 25790 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25796 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25802 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_DeclareStatement :: T_Annotation ->
                                  ([(String,TypeName,Maybe ScalarExpr)]) ->
                                  T_Statement
_sem_Statement_DeclareStatement ann_ ds_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 25824 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DeclareStatement _annIannotatedTree ds_
                   {-# LINE 25830 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   DeclareStatement _annIoriginalTree ds_
                   {-# LINE 25836 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25842 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25848 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25866 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_ExecStatement :: T_Annotation ->
                               T_Name ->
                               T_ScalarExprList ->
                               T_Statement
_sem_Statement_ExecStatement ann_ spName_ args_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _argsOdownEnv :: Environment
              _argsOexpectedCast :: Bool
              _argsOexpectedTypes :: ([TypeExtra])
              _spNameOtpe :: (Either [TypeError] TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _argsOassignmentCastContext :: Bool
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _spNameOcat :: Catalog
              _spNameOflags :: TypeCheckingFlags
              _spNameOimCast :: (Maybe TypeExtra)
              _argsOcat :: Catalog
              _argsOflags :: TypeCheckingFlags
              _argsOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _spNameIannotatedTree :: Name
              _spNameIoriginalTree :: Name
              _argsIannotatedTree :: ScalarExprList
              _argsIoriginalTree :: ScalarExprList
              _argsIupTypes :: ([Maybe TypeExtra])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 174, column 31)
              _argsOdownEnv =
                  ({-# LINE 174 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 25907 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 175, column 31)
              _argsOexpectedCast =
                  ({-# LINE 175 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 25913 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 176, column 31)
              _argsOexpectedTypes =
                  ({-# LINE 176 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   []
                   {-# LINE 25919 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 177, column 31)
              _spNameOtpe =
                  ({-# LINE 177 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 25925 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 25931 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 835, column 31)
              _argsOassignmentCastContext =
                  ({-# LINE 835 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 25937 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ExecStatement _annIannotatedTree _spNameIannotatedTree _argsIannotatedTree
                   {-# LINE 25943 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ExecStatement _annIoriginalTree _spNameIoriginalTree _argsIoriginalTree
                   {-# LINE 25949 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 25955 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 25961 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25967 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25973 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25979 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _spNameOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 25985 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _spNameOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 25991 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _spNameOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 25997 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26003 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26009 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _argsOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26015 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _spNameIannotatedTree,_spNameIoriginalTree) =
                  spName_ _spNameOcat _spNameOflags _spNameOimCast _spNameOtpe
              ( _argsIannotatedTree,_argsIoriginalTree,_argsIupTypes) =
                  args_ _argsOassignmentCastContext _argsOcat _argsOdownEnv _argsOexpectedCast _argsOexpectedTypes _argsOflags _argsOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_Statement_CreateIndexTSQL :: T_Annotation ->
                                 NameComponent ->
                                 T_Name ->
                                 ([NameComponent]) ->
                                 T_Statement
_sem_Statement_CreateIndexTSQL ann_ nm_ obj_ cols_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _objOtpe :: (Either [TypeError] TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: Statement
              _lhsOoriginalTree :: Statement
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _objOcat :: Catalog
              _objOflags :: TypeCheckingFlags
              _objOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _objIannotatedTree :: Name
              _objIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 145, column 33)
              _objOtpe =
                  ({-# LINE 145 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 26051 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag"(line 13, column 5)
              _annOtpe =
                  ({-# LINE 13 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Statements.ag" #-}
                   Left []
                   {-# LINE 26057 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateIndexTSQL _annIannotatedTree nm_ _objIannotatedTree cols_
                   {-# LINE 26063 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   CreateIndexTSQL _annIoriginalTree nm_ _objIoriginalTree cols_
                   {-# LINE 26069 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 26075 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26081 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26087 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26093 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26099 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _objOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26105 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _objOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26111 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _objOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _objIannotatedTree,_objIoriginalTree) =
                  obj_ _objOcat _objOflags _objOimCast _objOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- StatementList -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : StatementList 
         originalTree         : StatementList 
   alternatives:
      alternative Cons:
         child hd             : Statement 
         child tl             : StatementList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type StatementList = [Statement]
-- cata
_sem_StatementList :: StatementList ->
                     T_StatementList
_sem_StatementList list =
    (Prelude.foldr _sem_StatementList_Cons _sem_StatementList_Nil (Prelude.map _sem_Statement list))
-- semantic domain
type T_StatementList = Catalog ->
                       TypeCheckingFlags ->
                       (Maybe TypeExtra) ->
                       ( StatementList,StatementList)
data Inh_StatementList = Inh_StatementList {_cat_Inh_StatementList :: Catalog,_flags_Inh_StatementList :: TypeCheckingFlags,_imCast_Inh_StatementList :: (Maybe TypeExtra)}
data Syn_StatementList = Syn_StatementList {_annotatedTree_Syn_StatementList :: StatementList,_originalTree_Syn_StatementList :: StatementList}
_wrap_StatementList :: T_StatementList ->
                      Inh_StatementList ->
                      Syn_StatementList
_wrap_StatementList sem (Inh_StatementList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_StatementList _lhsOannotatedTree _lhsOoriginalTree))
_sem_StatementList_Cons :: T_Statement ->
                          T_StatementList ->
                          T_StatementList
_sem_StatementList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: StatementList
              _lhsOoriginalTree :: StatementList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: Statement
              _hdIoriginalTree :: Statement
              _tlIannotatedTree :: StatementList
              _tlIoriginalTree :: StatementList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 26188 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 26194 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 26200 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26206 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26212 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26218 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26224 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26230 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26236 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26242 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_StatementList_Nil :: T_StatementList
_sem_StatementList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: StatementList
              _lhsOoriginalTree :: StatementList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 26260 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 26266 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 26272 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26278 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- TablePartitionDef -------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TablePartitionDef 
         originalTree         : TablePartitionDef 
   alternatives:
      alternative TablePartitionDef:
         child ann            : Annotation 
         child colname        : {NameComponent}
         child interval       : {Integer}
         child timeframe      : {TablePartitionDateTimeInterval}
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data TablePartitionDef = TablePartitionDef (Annotation) (NameComponent) (Integer) (TablePartitionDateTimeInterval)
                       deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_TablePartitionDef :: TablePartitionDef ->
                         T_TablePartitionDef
_sem_TablePartitionDef (TablePartitionDef _ann _colname _interval _timeframe) =
    (_sem_TablePartitionDef_TablePartitionDef (_sem_Annotation _ann) _colname _interval _timeframe)
-- semantic domain
type T_TablePartitionDef = Catalog ->
                           TypeCheckingFlags ->
                           (Maybe TypeExtra) ->
                           ( TablePartitionDef,TablePartitionDef)
data Inh_TablePartitionDef = Inh_TablePartitionDef {_cat_Inh_TablePartitionDef :: Catalog,_flags_Inh_TablePartitionDef :: TypeCheckingFlags,_imCast_Inh_TablePartitionDef :: (Maybe TypeExtra)}
data Syn_TablePartitionDef = Syn_TablePartitionDef {_annotatedTree_Syn_TablePartitionDef :: TablePartitionDef,_originalTree_Syn_TablePartitionDef :: TablePartitionDef}
_wrap_TablePartitionDef :: T_TablePartitionDef ->
                          Inh_TablePartitionDef ->
                          Syn_TablePartitionDef
_wrap_TablePartitionDef sem (Inh_TablePartitionDef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TablePartitionDef _lhsOannotatedTree _lhsOoriginalTree))
_sem_TablePartitionDef_TablePartitionDef :: T_Annotation ->
                                           NameComponent ->
                                           Integer ->
                                           TablePartitionDateTimeInterval ->
                                           T_TablePartitionDef
_sem_TablePartitionDef_TablePartitionDef ann_ colname_ interval_ timeframe_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TablePartitionDef
              _lhsOoriginalTree :: TablePartitionDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 226, column 43)
              _annOtpe =
                  ({-# LINE 226 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 26342 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TablePartitionDef _annIannotatedTree colname_ interval_ timeframe_
                   {-# LINE 26348 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TablePartitionDef _annIoriginalTree colname_ interval_ timeframe_
                   {-# LINE 26354 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 26360 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26366 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26372 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26378 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26384 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- TableRef ----------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TableRef 
         originalTree         : TableRef 
         upEnv                : Environment
   alternatives:
      alternative Tref:
         child ann            : Annotation 
         child tbl            : Name 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative FunTref:
         child ann            : Annotation 
         child fn             : ScalarExpr 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative SubTref:
         child ann            : Annotation 
         child sel            : QueryExpr 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative JoinTref:
         child ann            : Annotation 
         child tref0          : TableRef 
         child nat            : {Natural}
         child joinType       : {JoinType}
         child joinHint       : {Maybe JoinHint}
         child tref1          : TableRef 
         child onExpr         : OnExpr 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative TableAlias:
         child ann            : Annotation 
         child tb             : {NameComponent}
         child tref           : TableRef 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local annotatedTree : _
            local originalTree : _
      alternative FullAlias:
         child ann            : Annotation 
         child tb             : {NameComponent}
         child cols           : {[NameComponent]}
         child tref           : TableRef 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local annotatedTree : _
            local originalTree : _
      alternative TableRefParens:
         child ann            : Annotation 
         child tref           : TableRef 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
      alternative OdbcTableRef:
         child ann            : Annotation 
         child tref           : TableRef 
         visit 0:
            local eEnv        : {Either [TypeError] Environment}
            local newAlias    : _
            local annotatedTree : _
            local originalTree : _
-}
data TableRef = Tref (Annotation) (Name)
              | FunTref (Annotation) (ScalarExpr)
              | SubTref (Annotation) (QueryExpr)
              | JoinTref (Annotation) (TableRef) (Natural) (JoinType) ((Maybe JoinHint)) (TableRef) (OnExpr)
              | TableAlias (Annotation) (NameComponent) (TableRef)
              | FullAlias (Annotation) (NameComponent) (([NameComponent])) (TableRef)
              | TableRefParens (Annotation) (TableRef)
              | OdbcTableRef (Annotation) (TableRef)
              deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_TableRef :: TableRef ->
                T_TableRef
_sem_TableRef (Tref _ann _tbl) =
    (_sem_TableRef_Tref (_sem_Annotation _ann) (_sem_Name _tbl))
_sem_TableRef (FunTref _ann _fn) =
    (_sem_TableRef_FunTref (_sem_Annotation _ann) (_sem_ScalarExpr _fn))
_sem_TableRef (SubTref _ann _sel) =
    (_sem_TableRef_SubTref (_sem_Annotation _ann) (_sem_QueryExpr _sel))
_sem_TableRef (JoinTref _ann _tref0 _nat _joinType _joinHint _tref1 _onExpr) =
    (_sem_TableRef_JoinTref (_sem_Annotation _ann) (_sem_TableRef _tref0) _nat _joinType _joinHint (_sem_TableRef _tref1) (_sem_OnExpr _onExpr))
_sem_TableRef (TableAlias _ann _tb _tref) =
    (_sem_TableRef_TableAlias (_sem_Annotation _ann) _tb (_sem_TableRef _tref))
_sem_TableRef (FullAlias _ann _tb _cols _tref) =
    (_sem_TableRef_FullAlias (_sem_Annotation _ann) _tb _cols (_sem_TableRef _tref))
_sem_TableRef (TableRefParens _ann _tref) =
    (_sem_TableRef_TableRefParens (_sem_Annotation _ann) (_sem_TableRef _tref))
_sem_TableRef (OdbcTableRef _ann _tref) =
    (_sem_TableRef_OdbcTableRef (_sem_Annotation _ann) (_sem_TableRef _tref))
-- semantic domain
type T_TableRef = Catalog ->
                  TypeCheckingFlags ->
                  (Maybe TypeExtra) ->
                  ( TableRef,TableRef,Environment)
data Inh_TableRef = Inh_TableRef {_cat_Inh_TableRef :: Catalog,_flags_Inh_TableRef :: TypeCheckingFlags,_imCast_Inh_TableRef :: (Maybe TypeExtra)}
data Syn_TableRef = Syn_TableRef {_annotatedTree_Syn_TableRef :: TableRef,_originalTree_Syn_TableRef :: TableRef,_upEnv_Syn_TableRef :: Environment}
_wrap_TableRef :: T_TableRef ->
                 Inh_TableRef ->
                 Syn_TableRef
_wrap_TableRef sem (Inh_TableRef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TableRef _lhsOannotatedTree _lhsOoriginalTree _lhsOupEnv))
_sem_TableRef_Tref :: T_Annotation ->
                     T_Name ->
                     T_TableRef
_sem_TableRef_Tref ann_ tbl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _tblOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TableRef
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tblOcat :: Catalog
              _tblOflags :: TypeCheckingFlags
              _tblOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tblIannotatedTree :: Name
              _tblIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 26541 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 26547 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 42, column 7)
              _eEnv =
                  ({-# LINE 42 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   E.envCreateTrefEnvironment _lhsIcat (nameComponents _tblIoriginalTree)
                   {-# LINE 26553 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 43, column 7)
              _tblOtpe =
                  ({-# LINE 43 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Left []
                   {-# LINE 26559 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 75, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
                   {-# LINE 26572 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 150, column 7)
              _newAlias =
                  ({-# LINE 150 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     ((_,n),cs,_) <- either (const Nothing) Just
                                   $ catLookupTableAndAttrs _lhsIcat
                                   (nameComponents _tblIoriginalTree)
                     return (T.unpack n, (map (T.unpack . fst) cs))
                   else Nothing
                   {-# LINE 26584 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Tref _annIannotatedTree _tblIannotatedTree
                   {-# LINE 26590 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Tref _annIoriginalTree _tblIoriginalTree
                   {-# LINE 26596 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26602 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26608 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26614 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26620 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26626 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26632 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tblOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26638 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tblIannotatedTree,_tblIoriginalTree) =
                  tbl_ _tblOcat _tblOflags _tblOimCast _tblOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_FunTref :: T_Annotation ->
                        T_ScalarExpr ->
                        T_TableRef
_sem_TableRef_FunTref ann_ fn_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _fnOdownEnv :: Environment
              _fnOexpectedCast :: Bool
              _fnOexpectedType :: (Maybe TypeExtra)
              _fnOodbcFunction :: Bool
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef
              _fnOassignmentCastContext :: Bool
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _fnOcat :: Catalog
              _fnOflags :: TypeCheckingFlags
              _fnOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _fnIannotatedTree :: ScalarExpr
              _fnIcolExprs :: ([(NameComponent,Maybe TypeExtra,ScalarExpr)])
              _fnIoriginalTree :: ScalarExpr
              _fnIupType :: (Maybe TypeExtra)
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 227, column 24)
              _fnOdownEnv =
                  ({-# LINE 227 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 26678 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 228, column 24)
              _fnOexpectedCast =
                  ({-# LINE 228 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 26684 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 229, column 24)
              _fnOexpectedType =
                  ({-# LINE 229 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Nothing
                   {-# LINE 26690 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 230, column 24)
              _fnOodbcFunction =
                  ({-# LINE 230 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   False
                   {-# LINE 26696 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 26703 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 26709 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 71, column 7)
              _eEnv =
                  ({-# LINE 71 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Left []
                   {-# LINE 26715 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 75, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
                   {-# LINE 26728 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 135, column 7)
              _newAlias =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ E.envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                            Nothing
                   else Nothing
                   {-# LINE 26743 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 848, column 24)
              _fnOassignmentCastContext =
                  ({-# LINE 848 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 26749 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   FunTref _annIannotatedTree _fnIannotatedTree
                   {-# LINE 26755 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   FunTref _annIoriginalTree _fnIoriginalTree
                   {-# LINE 26761 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26767 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26773 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26779 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26785 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26791 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26797 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _fnOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26803 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _fnIannotatedTree,_fnIcolExprs,_fnIoriginalTree,_fnIupType) =
                  fn_ _fnOassignmentCastContext _fnOcat _fnOdownEnv _fnOexpectedCast _fnOexpectedType _fnOflags _fnOimCast _fnOodbcFunction
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_SubTref :: T_Annotation ->
                        T_QueryExpr ->
                        T_TableRef
_sem_TableRef_SubTref ann_ sel_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _selOexpectedType :: (Maybe [TypeExtra])
              _lhsOannotatedTree :: TableRef
              _selOouterDownEnv :: (Maybe Environment)
              _selOassignmentCastContext :: Bool
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _selOcat :: Catalog
              _selOflags :: TypeCheckingFlags
              _selOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _selIannotatedTree :: QueryExpr
              _selIoriginalTree :: QueryExpr
              _selIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 26841 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 26847 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 58, column 7)
              _eEnv =
                  ({-# LINE 58 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   maybe (Left []) id
                   $ fmap E.envSelectListEnvironment _selIupType
                   {-# LINE 26854 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 60, column 7)
              _selOexpectedType =
                  ({-# LINE 60 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   liftM (map snd) _selIupType
                   {-# LINE 26860 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 75, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
                   {-# LINE 26873 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 135, column 7)
              _newAlias =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ E.envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                            Nothing
                   else Nothing
                   {-# LINE 26888 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 93, column 13)
              _selOouterDownEnv =
                  ({-# LINE 93 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Nothing
                   {-# LINE 26894 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 849, column 24)
              _selOassignmentCastContext =
                  ({-# LINE 849 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 26900 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SubTref _annIannotatedTree _selIannotatedTree
                   {-# LINE 26906 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SubTref _annIoriginalTree _selIoriginalTree
                   {-# LINE 26912 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 26918 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26924 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26930 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26936 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 26942 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 26948 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _selOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 26954 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _selIannotatedTree,_selIoriginalTree,_selIupType) =
                  sel_ _selOassignmentCastContext _selOcat _selOexpectedType _selOflags _selOimCast _selOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_JoinTref :: T_Annotation ->
                         T_TableRef ->
                         Natural ->
                         JoinType ->
                         (Maybe JoinHint) ->
                         T_TableRef ->
                         T_OnExpr ->
                         T_TableRef
_sem_TableRef_JoinTref ann_ tref0_ nat_ joinType_ joinHint_ tref1_ onExpr_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _onExprOdownEnv :: Environment
              _lhsOannotatedTree :: TableRef
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tref0Ocat :: Catalog
              _tref0Oflags :: TypeCheckingFlags
              _tref0OimCast :: (Maybe TypeExtra)
              _tref1Ocat :: Catalog
              _tref1Oflags :: TypeCheckingFlags
              _tref1OimCast :: (Maybe TypeExtra)
              _onExprOcat :: Catalog
              _onExprOflags :: TypeCheckingFlags
              _onExprOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tref0IannotatedTree :: TableRef
              _tref0IoriginalTree :: TableRef
              _tref0IupEnv :: Environment
              _tref1IannotatedTree :: TableRef
              _tref1IoriginalTree :: TableRef
              _tref1IupEnv :: Environment
              _onExprIannotatedTree :: OnExpr
              _onExprIoriginalTree :: OnExpr
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 27006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 27012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 46, column 7)
              _eEnv =
                  ({-# LINE 46 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   E.createJoinTrefEnvironment _lhsIcat
                     _tref0IupEnv _tref1IupEnv (convertJoinType joinType_)
                     $ case (joinType_,_onExprIoriginalTree) of
                        (x,Nothing) | x /= Cross -> Nothing
                        (_,Just (JoinUsing _ nms)) -> Just nms
                        _ -> Just []
                   {-# LINE 27023 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 56, column 7)
              _onExprOdownEnv =
                  ({-# LINE 56 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 27029 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 75, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
                   {-# LINE 27042 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 135, column 7)
              _newAlias =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ E.envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                            Nothing
                   else Nothing
                   {-# LINE 27057 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinTref _annIannotatedTree _tref0IannotatedTree nat_ joinType_ joinHint_ _tref1IannotatedTree _onExprIannotatedTree
                   {-# LINE 27063 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   JoinTref _annIoriginalTree _tref0IoriginalTree nat_ joinType_ joinHint_ _tref1IoriginalTree _onExprIoriginalTree
                   {-# LINE 27069 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27075 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27081 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27087 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27093 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tref0Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27099 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tref0Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27105 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tref0OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27111 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tref1Ocat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tref1Oflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27123 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tref1OimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27129 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _onExprOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27135 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _onExprOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27141 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _onExprOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27147 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tref0IannotatedTree,_tref0IoriginalTree,_tref0IupEnv) =
                  tref0_ _tref0Ocat _tref0Oflags _tref0OimCast
              ( _tref1IannotatedTree,_tref1IoriginalTree,_tref1IupEnv) =
                  tref1_ _tref1Ocat _tref1Oflags _tref1OimCast
              ( _onExprIannotatedTree,_onExprIoriginalTree) =
                  onExpr_ _onExprOcat _onExprOdownEnv _onExprOflags _onExprOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_TableAlias :: T_Annotation ->
                           NameComponent ->
                           T_TableRef ->
                           T_TableRef
_sem_TableRef_TableAlias ann_ tb_ tref_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _trefOcat :: Catalog
              _trefOflags :: TypeCheckingFlags
              _trefOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _trefIannotatedTree :: TableRef
              _trefIoriginalTree :: TableRef
              _trefIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 27187 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 27193 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 68, column 7)
              _eEnv =
                  ({-# LINE 68 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Right $ E.createTrefAliasedEnvironment
                           (ncStrT tb_) Nothing _trefIupEnv
                   {-# LINE 27200 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 124, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 124 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   case _trefIannotatedTree of
                     FullAlias _ _ c tr -> FullAlias emptyAnnotation tb_ c tr
                     TableAlias _ _ tr -> TableAlias emptyAnnotation tb_ tr
                     _ -> _annotatedTree
                   {-# LINE 27209 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TableAlias _annIannotatedTree tb_ _trefIannotatedTree
                   {-# LINE 27215 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TableAlias _annIoriginalTree tb_ _trefIoriginalTree
                   {-# LINE 27221 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27227 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27233 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27239 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27245 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27251 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27257 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27263 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _trefIannotatedTree,_trefIoriginalTree,_trefIupEnv) =
                  tref_ _trefOcat _trefOflags _trefOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_FullAlias :: T_Annotation ->
                          NameComponent ->
                          ([NameComponent]) ->
                          T_TableRef ->
                          T_TableRef
_sem_TableRef_FullAlias ann_ tb_ cols_ tref_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _trefOcat :: Catalog
              _trefOflags :: TypeCheckingFlags
              _trefOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _trefIannotatedTree :: TableRef
              _trefIoriginalTree :: TableRef
              _trefIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 27300 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 27306 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 65, column 7)
              _eEnv =
                  ({-# LINE 65 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Right $ E.createTrefAliasedEnvironment
                           (ncStrT tb_) (Just $ map ncStrT cols_) _trefIupEnv
                   {-# LINE 27313 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 103, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 103 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   case _trefIannotatedTree of
                     FullAlias _ t _ tr -> FullAlias emptyAnnotation
                                             (if tb_ == Nmc "" then t else tb_) cols_                       tr
                     TableAlias _ _ tr -> FullAlias emptyAnnotation tb_ cols_                        tr
                     _ -> _annotatedTree
                   {-# LINE 27323 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   FullAlias _annIannotatedTree tb_ cols_ _trefIannotatedTree
                   {-# LINE 27329 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   FullAlias _annIoriginalTree tb_ cols_ _trefIoriginalTree
                   {-# LINE 27335 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27341 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27347 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27353 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27359 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27365 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27371 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27377 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _trefIannotatedTree,_trefIoriginalTree,_trefIupEnv) =
                  tref_ _trefOcat _trefOflags _trefOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_TableRefParens :: T_Annotation ->
                               T_TableRef ->
                               T_TableRef
_sem_TableRef_TableRefParens ann_ tref_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _trefOcat :: Catalog
              _trefOflags :: TypeCheckingFlags
              _trefOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _trefIannotatedTree :: TableRef
              _trefIoriginalTree :: TableRef
              _trefIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 27412 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 27418 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 63, column 7)
              _eEnv =
                  ({-# LINE 63 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Right $ _trefIupEnv
                   {-# LINE 27424 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 75, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
                   {-# LINE 27437 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 135, column 7)
              _newAlias =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ E.envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                            Nothing
                   else Nothing
                   {-# LINE 27452 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TableRefParens _annIannotatedTree _trefIannotatedTree
                   {-# LINE 27458 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TableRefParens _annIoriginalTree _trefIoriginalTree
                   {-# LINE 27464 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27470 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27476 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27482 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27488 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27494 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27500 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27506 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _trefIannotatedTree,_trefIoriginalTree,_trefIupEnv) =
                  tref_ _trefOcat _trefOflags _trefOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRef_OdbcTableRef :: T_Annotation ->
                             T_TableRef ->
                             T_TableRef
_sem_TableRef_OdbcTableRef ann_ tref_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOupEnv :: Environment
              _eEnv :: (Either [TypeError] Environment)
              _lhsOannotatedTree :: TableRef
              _lhsOoriginalTree :: TableRef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _trefOcat :: Catalog
              _trefOflags :: TypeCheckingFlags
              _trefOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _trefIannotatedTree :: TableRef
              _trefIoriginalTree :: TableRef
              _trefIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 33, column 7)
              _annOtpe =
                  ({-# LINE 33 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either Left (Right . mkTypeExtraNN . TrefType)
                   (_eEnv     >>= E.envExpandStar Nothing)
                   {-# LINE 27541 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 36, column 7)
              _lhsOupEnv =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   either (const E.brokeEnvironment) id _eEnv
                   {-# LINE 27547 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 63, column 7)
              _eEnv =
                  ({-# LINE 63 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   Right $ _trefIupEnv
                   {-# LINE 27553 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 75, column 7)
              _lhsOannotatedTree =
                  ({-# LINE 75 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   let mk (q,is) = FullAlias emptyAnnotation
                                            (Nmc q)
                                            (map Nmc is)
                                            $ wrapIfJoin _annotatedTree
                       wrapIfJoin tr = case tr of
                                          JoinTref {} -> TableRefParens emptyAnnotation tr
                                          _ -> tr
                   in maybe _annotatedTree     mk _newAlias
                   {-# LINE 27566 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 135, column 7)
              _newAlias =
                  ({-# LINE 135 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if tcfAddFullTablerefAliases _lhsIflags
                   then do
                     env <- either (const Nothing) Just _eEnv
                     cs <- either (const Nothing) Just $ E.envExpandStar Nothing env
                     let qs = map (fst . fst) cs
                     if all (== head qs) qs
                       then return (T.unpack $ head qs, map (T.unpack . snd . fst) cs)
                       else
                                                            Nothing
                   else Nothing
                   {-# LINE 27581 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   OdbcTableRef _annIannotatedTree _trefIannotatedTree
                   {-# LINE 27587 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   OdbcTableRef _annIoriginalTree _trefIoriginalTree
                   {-# LINE 27593 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27599 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27605 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27611 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27617 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27623 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _trefOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27635 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _trefIannotatedTree,_trefIoriginalTree,_trefIupEnv) =
                  tref_ _trefOcat _trefOflags _trefOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
-- TableRefList ------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TableRefList 
         originalTree         : TableRefList 
         upEnv                : Environment
   alternatives:
      alternative Cons:
         child hd             : TableRef 
         child tl             : TableRefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type TableRefList = [TableRef]
-- cata
_sem_TableRefList :: TableRefList ->
                    T_TableRefList
_sem_TableRefList list =
    (Prelude.foldr _sem_TableRefList_Cons _sem_TableRefList_Nil (Prelude.map _sem_TableRef list))
-- semantic domain
type T_TableRefList = Catalog ->
                      TypeCheckingFlags ->
                      (Maybe TypeExtra) ->
                      ( TableRefList,TableRefList,Environment)
data Inh_TableRefList = Inh_TableRefList {_cat_Inh_TableRefList :: Catalog,_flags_Inh_TableRefList :: TypeCheckingFlags,_imCast_Inh_TableRefList :: (Maybe TypeExtra)}
data Syn_TableRefList = Syn_TableRefList {_annotatedTree_Syn_TableRefList :: TableRefList,_originalTree_Syn_TableRefList :: TableRefList,_upEnv_Syn_TableRefList :: Environment}
_wrap_TableRefList :: T_TableRefList ->
                     Inh_TableRefList ->
                     Syn_TableRefList
_wrap_TableRefList sem (Inh_TableRefList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TableRefList _lhsOannotatedTree _lhsOoriginalTree _lhsOupEnv))
_sem_TableRefList_Cons :: T_TableRef ->
                         T_TableRefList ->
                         T_TableRefList
_sem_TableRefList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupEnv :: Environment
              _lhsOannotatedTree :: TableRefList
              _lhsOoriginalTree :: TableRefList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: TableRef
              _hdIoriginalTree :: TableRef
              _hdIupEnv :: Environment
              _tlIannotatedTree :: TableRefList
              _tlIoriginalTree :: TableRefList
              _tlIupEnv :: Environment
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 20, column 7)
              _lhsOupEnv =
                  ({-# LINE 20 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   if E.isEmptyEnv _tlIupEnv
                   then _hdIupEnv
                   else
                          either (error . show) id $
                          E.createJoinTrefEnvironment _lhsIcat _hdIupEnv _tlIupEnv E.Inner $ Just []
                   {-# LINE 27714 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 27720 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 27726 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 27732 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27738 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27744 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27750 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27756 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27762 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27768 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27774 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree,_hdIupEnv) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree,_tlIupEnv) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
_sem_TableRefList_Nil :: T_TableRefList
_sem_TableRefList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOupEnv :: Environment
              _lhsOannotatedTree :: TableRefList
              _lhsOoriginalTree :: TableRefList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag"(line 18, column 9)
              _lhsOupEnv =
                  ({-# LINE 18 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/TableRefs.ag" #-}
                   E.emptyEnvironment
                   {-# LINE 27793 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 27799 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 27805 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 27811 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27817 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree,_lhsOupEnv)))
-- TypeAttributeDef --------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TypeAttributeDef 
         originalTree         : TypeAttributeDef 
   alternatives:
      alternative TypeAttDef:
         child ann            : Annotation 
         child name           : {NameComponent}
         child typ            : TypeName 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data TypeAttributeDef = TypeAttDef (Annotation) (NameComponent) (TypeName)
                      deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_TypeAttributeDef :: TypeAttributeDef ->
                        T_TypeAttributeDef
_sem_TypeAttributeDef (TypeAttDef _ann _name _typ) =
    (_sem_TypeAttributeDef_TypeAttDef (_sem_Annotation _ann) _name (_sem_TypeName _typ))
-- semantic domain
type T_TypeAttributeDef = Catalog ->
                          TypeCheckingFlags ->
                          (Maybe TypeExtra) ->
                          ( TypeAttributeDef,TypeAttributeDef)
data Inh_TypeAttributeDef = Inh_TypeAttributeDef {_cat_Inh_TypeAttributeDef :: Catalog,_flags_Inh_TypeAttributeDef :: TypeCheckingFlags,_imCast_Inh_TypeAttributeDef :: (Maybe TypeExtra)}
data Syn_TypeAttributeDef = Syn_TypeAttributeDef {_annotatedTree_Syn_TypeAttributeDef :: TypeAttributeDef,_originalTree_Syn_TypeAttributeDef :: TypeAttributeDef}
_wrap_TypeAttributeDef :: T_TypeAttributeDef ->
                         Inh_TypeAttributeDef ->
                         Syn_TypeAttributeDef
_wrap_TypeAttributeDef sem (Inh_TypeAttributeDef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TypeAttributeDef _lhsOannotatedTree _lhsOoriginalTree))
_sem_TypeAttributeDef_TypeAttDef :: T_Annotation ->
                                   NameComponent ->
                                   T_TypeName ->
                                   T_TypeAttributeDef
_sem_TypeAttributeDef_TypeAttDef ann_ name_ typ_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TypeAttributeDef
              _lhsOoriginalTree :: TypeAttributeDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 231, column 35)
              _annOtpe =
                  ({-# LINE 231 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 27885 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TypeAttDef _annIannotatedTree name_ _typIannotatedTree
                   {-# LINE 27891 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   TypeAttDef _annIoriginalTree name_ _typIoriginalTree
                   {-# LINE 27897 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 27903 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 27909 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27915 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27921 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27927 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 27933 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 27939 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 27945 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- TypeAttributeDefList ----------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TypeAttributeDefList 
         originalTree         : TypeAttributeDefList 
   alternatives:
      alternative Cons:
         child hd             : TypeAttributeDef 
         child tl             : TypeAttributeDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type TypeAttributeDefList = [TypeAttributeDef]
-- cata
_sem_TypeAttributeDefList :: TypeAttributeDefList ->
                            T_TypeAttributeDefList
_sem_TypeAttributeDefList list =
    (Prelude.foldr _sem_TypeAttributeDefList_Cons _sem_TypeAttributeDefList_Nil (Prelude.map _sem_TypeAttributeDef list))
-- semantic domain
type T_TypeAttributeDefList = Catalog ->
                              TypeCheckingFlags ->
                              (Maybe TypeExtra) ->
                              ( TypeAttributeDefList,TypeAttributeDefList)
data Inh_TypeAttributeDefList = Inh_TypeAttributeDefList {_cat_Inh_TypeAttributeDefList :: Catalog,_flags_Inh_TypeAttributeDefList :: TypeCheckingFlags,_imCast_Inh_TypeAttributeDefList :: (Maybe TypeExtra)}
data Syn_TypeAttributeDefList = Syn_TypeAttributeDefList {_annotatedTree_Syn_TypeAttributeDefList :: TypeAttributeDefList,_originalTree_Syn_TypeAttributeDefList :: TypeAttributeDefList}
_wrap_TypeAttributeDefList :: T_TypeAttributeDefList ->
                             Inh_TypeAttributeDefList ->
                             Syn_TypeAttributeDefList
_wrap_TypeAttributeDefList sem (Inh_TypeAttributeDefList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TypeAttributeDefList _lhsOannotatedTree _lhsOoriginalTree))
_sem_TypeAttributeDefList_Cons :: T_TypeAttributeDef ->
                                 T_TypeAttributeDefList ->
                                 T_TypeAttributeDefList
_sem_TypeAttributeDefList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeAttributeDefList
              _lhsOoriginalTree :: TypeAttributeDefList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: TypeAttributeDef
              _hdIoriginalTree :: TypeAttributeDef
              _tlIannotatedTree :: TypeAttributeDefList
              _tlIoriginalTree :: TypeAttributeDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 28016 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 28022 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28028 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28034 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28040 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28046 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28052 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28058 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28064 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28070 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_TypeAttributeDefList_Nil :: T_TypeAttributeDefList
_sem_TypeAttributeDefList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeAttributeDefList
              _lhsOoriginalTree :: TypeAttributeDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 28088 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 28094 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28100 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28106 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- TypeName ----------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TypeName 
         namedType            : Maybe TypeExtra
         originalTree         : TypeName 
   alternatives:
      alternative SimpleTypeName:
         child ann            : Annotation 
         child tn             : Name 
         visit 0:
            local tpe         : {Either [TypeError] TypeExtra}
            local annotatedTree : _
            local originalTree : _
      alternative PrecTypeName:
         child ann            : Annotation 
         child tn             : Name 
         child prec           : {Integer}
         visit 0:
            local tpe         : {Either [TypeError] TypeExtra}
            local annotatedTree : _
            local originalTree : _
      alternative Prec2TypeName:
         child ann            : Annotation 
         child tn             : Name 
         child prec           : {Integer}
         child prec1          : {Integer}
         visit 0:
            local tpe         : {Either [TypeError] TypeExtra}
            local annotatedTree : _
            local originalTree : _
      alternative ArrayTypeName:
         child ann            : Annotation 
         child typ            : TypeName 
         visit 0:
            local tpe         : {Either [TypeError] TypeExtra}
            local annotatedTree : _
            local originalTree : _
      alternative SetOfTypeName:
         child ann            : Annotation 
         child typ            : TypeName 
         visit 0:
            local tpe         : {Either [TypeError] TypeExtra}
            local annotatedTree : _
            local originalTree : _
-}
data TypeName = SimpleTypeName (Annotation) (Name)
              | PrecTypeName (Annotation) (Name) (Integer)
              | Prec2TypeName (Annotation) (Name) (Integer) (Integer)
              | ArrayTypeName (Annotation) (TypeName)
              | SetOfTypeName (Annotation) (TypeName)
              deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_TypeName :: TypeName ->
                T_TypeName
_sem_TypeName (SimpleTypeName _ann _tn) =
    (_sem_TypeName_SimpleTypeName (_sem_Annotation _ann) (_sem_Name _tn))
_sem_TypeName (PrecTypeName _ann _tn _prec) =
    (_sem_TypeName_PrecTypeName (_sem_Annotation _ann) (_sem_Name _tn) _prec)
_sem_TypeName (Prec2TypeName _ann _tn _prec _prec1) =
    (_sem_TypeName_Prec2TypeName (_sem_Annotation _ann) (_sem_Name _tn) _prec _prec1)
_sem_TypeName (ArrayTypeName _ann _typ) =
    (_sem_TypeName_ArrayTypeName (_sem_Annotation _ann) (_sem_TypeName _typ))
_sem_TypeName (SetOfTypeName _ann _typ) =
    (_sem_TypeName_SetOfTypeName (_sem_Annotation _ann) (_sem_TypeName _typ))
-- semantic domain
type T_TypeName = Catalog ->
                  TypeCheckingFlags ->
                  (Maybe TypeExtra) ->
                  ( TypeName,(Maybe TypeExtra),TypeName)
data Inh_TypeName = Inh_TypeName {_cat_Inh_TypeName :: Catalog,_flags_Inh_TypeName :: TypeCheckingFlags,_imCast_Inh_TypeName :: (Maybe TypeExtra)}
data Syn_TypeName = Syn_TypeName {_annotatedTree_Syn_TypeName :: TypeName,_namedType_Syn_TypeName :: (Maybe TypeExtra),_originalTree_Syn_TypeName :: TypeName}
_wrap_TypeName :: T_TypeName ->
                 Inh_TypeName ->
                 Syn_TypeName
_wrap_TypeName sem (Inh_TypeName _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TypeName _lhsOannotatedTree _lhsOnamedType _lhsOoriginalTree))
_sem_TypeName_SimpleTypeName :: T_Annotation ->
                               T_Name ->
                               T_TypeName
_sem_TypeName_SimpleTypeName ann_ tn_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _tnOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TypeName
              _lhsOoriginalTree :: TypeName
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckingFlags
              _tnOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tnIannotatedTree :: Name
              _tnIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 28219 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
                   {-# LINE 28225 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 39, column 10)
              _tnOtpe =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   Left []
                   {-# LINE 28231 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 50, column 10)
              _tpe =
                  ({-# LINE 50 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   mkTypeExtraNN `liftM` catLookupType _lhsIcat (nameComponents _tnIoriginalTree)
                   {-# LINE 28237 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SimpleTypeName _annIannotatedTree _tnIannotatedTree
                   {-# LINE 28243 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SimpleTypeName _annIoriginalTree _tnIoriginalTree
                   {-# LINE 28249 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28255 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28261 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28267 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28273 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28279 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28285 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tnIannotatedTree,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast _tnOtpe
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
_sem_TypeName_PrecTypeName :: T_Annotation ->
                             T_Name ->
                             Integer ->
                             T_TypeName
_sem_TypeName_PrecTypeName ann_ tn_ prec_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _tnOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TypeName
              _lhsOoriginalTree :: TypeName
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckingFlags
              _tnOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tnIannotatedTree :: Name
              _tnIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 28332 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
                   {-# LINE 28338 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 39, column 10)
              _tnOtpe =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   Left []
                   {-# LINE 28344 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 64, column 9)
              _tpe =
                  ({-# LINE 64 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   ((\t -> t{tePrecision = Just $ fromIntegral prec_}) . mkTypeExtraNN)
                   `liftM` catLookupType _lhsIcat (nameComponents _tnIoriginalTree)
                   {-# LINE 28351 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrecTypeName _annIannotatedTree _tnIannotatedTree prec_
                   {-# LINE 28357 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   PrecTypeName _annIoriginalTree _tnIoriginalTree prec_
                   {-# LINE 28363 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28387 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28393 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28399 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28405 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28411 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tnIannotatedTree,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast _tnOtpe
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
_sem_TypeName_Prec2TypeName :: T_Annotation ->
                              T_Name ->
                              Integer ->
                              Integer ->
                              T_TypeName
_sem_TypeName_Prec2TypeName ann_ tn_ prec_ prec1_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _tnOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TypeName
              _lhsOoriginalTree :: TypeName
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _tnOcat :: Catalog
              _tnOflags :: TypeCheckingFlags
              _tnOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _tnIannotatedTree :: Name
              _tnIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 28447 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
                   {-# LINE 28453 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 39, column 10)
              _tnOtpe =
                  ({-# LINE 39 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   Left []
                   {-# LINE 28459 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 67, column 9)
              _tpe =
                  ({-# LINE 67 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   ((\t -> t{tePrecision = Just $ fromIntegral prec_,
                             teScale = Just $ fromIntegral prec1_})
                         . mkTypeExtraNN)
                   `liftM` catLookupType _lhsIcat (nameComponents _tnIoriginalTree)
                   {-# LINE 28468 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Prec2TypeName _annIannotatedTree _tnIannotatedTree prec_ prec1_
                   {-# LINE 28474 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   Prec2TypeName _annIoriginalTree _tnIoriginalTree prec_ prec1_
                   {-# LINE 28480 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28486 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28492 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28498 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28504 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28510 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28516 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28522 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tnOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28528 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _tnIannotatedTree,_tnIoriginalTree) =
                  tn_ _tnOcat _tnOflags _tnOimCast _tnOtpe
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
_sem_TypeName_ArrayTypeName :: T_Annotation ->
                              T_TypeName ->
                              T_TypeName
_sem_TypeName_ArrayTypeName ann_ typ_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TypeName
              _lhsOoriginalTree :: TypeName
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 28562 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
                   {-# LINE 28568 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 58, column 9)
              _tpe =
                  ({-# LINE 58 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   maybe (Left []) Right _typInamedType
                   >>=  Right . (\t -> t{teType = ArrayType $ teType t})
                   {-# LINE 28575 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ArrayTypeName _annIannotatedTree _typIannotatedTree
                   {-# LINE 28581 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ArrayTypeName _annIoriginalTree _typIoriginalTree
                   {-# LINE 28587 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28593 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28599 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28605 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28611 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28617 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28623 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28629 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28635 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
_sem_TypeName_SetOfTypeName :: T_Annotation ->
                              T_TypeName ->
                              T_TypeName
_sem_TypeName_SetOfTypeName ann_ typ_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOnamedType :: (Maybe TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: TypeName
              _lhsOoriginalTree :: TypeName
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 36, column 10)
              _lhsOnamedType =
                  ({-# LINE 36 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either (const Nothing) Just _tpe
                   {-# LINE 28669 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 37, column 10)
              _annOtpe =
                  ({-# LINE 37 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   either Left (const $ Left []) _tpe
                   {-# LINE 28675 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag"(line 61, column 9)
              _tpe =
                  ({-# LINE 61 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Misc.ag" #-}
                   maybe (Left []) Right _typInamedType
                   >>=  Right . (\t -> t{teType = Pseudo $ SetOfType $ teType t})
                   {-# LINE 28682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetOfTypeName _annIannotatedTree _typIannotatedTree
                   {-# LINE 28688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   SetOfTypeName _annIoriginalTree _typIoriginalTree
                   {-# LINE 28694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28718 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28730 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28736 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28742 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOnamedType,_lhsOoriginalTree)))
-- TypeNameList ------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : TypeNameList 
         originalTree         : TypeNameList 
   alternatives:
      alternative Cons:
         child hd             : TypeName 
         child tl             : TypeNameList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type TypeNameList = [TypeName]
-- cata
_sem_TypeNameList :: TypeNameList ->
                    T_TypeNameList
_sem_TypeNameList list =
    (Prelude.foldr _sem_TypeNameList_Cons _sem_TypeNameList_Nil (Prelude.map _sem_TypeName list))
-- semantic domain
type T_TypeNameList = Catalog ->
                      TypeCheckingFlags ->
                      (Maybe TypeExtra) ->
                      ( TypeNameList,TypeNameList)
data Inh_TypeNameList = Inh_TypeNameList {_cat_Inh_TypeNameList :: Catalog,_flags_Inh_TypeNameList :: TypeCheckingFlags,_imCast_Inh_TypeNameList :: (Maybe TypeExtra)}
data Syn_TypeNameList = Syn_TypeNameList {_annotatedTree_Syn_TypeNameList :: TypeNameList,_originalTree_Syn_TypeNameList :: TypeNameList}
_wrap_TypeNameList :: T_TypeNameList ->
                     Inh_TypeNameList ->
                     Syn_TypeNameList
_wrap_TypeNameList sem (Inh_TypeNameList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_TypeNameList _lhsOannotatedTree _lhsOoriginalTree))
_sem_TypeNameList_Cons :: T_TypeName ->
                         T_TypeNameList ->
                         T_TypeNameList
_sem_TypeNameList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeNameList
              _lhsOoriginalTree :: TypeNameList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: TypeName
              _hdInamedType :: (Maybe TypeExtra)
              _hdIoriginalTree :: TypeName
              _tlIannotatedTree :: TypeNameList
              _tlIoriginalTree :: TypeNameList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 28814 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 28820 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28826 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28832 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28838 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28844 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28850 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 28856 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 28862 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 28868 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdInamedType,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_TypeNameList_Nil :: T_TypeNameList
_sem_TypeNameList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: TypeNameList
              _lhsOoriginalTree :: TypeNameList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 28886 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 28892 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 28898 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 28904 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- VarDef ------------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : VarDef 
         originalTree         : VarDef 
   alternatives:
      alternative VarDef:
         child ann            : Annotation 
         child name           : {NameComponent}
         child typ            : TypeName 
         child value          : {Maybe ScalarExpr}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative ParamAlias:
         child ann            : Annotation 
         child name           : {NameComponent}
         child i              : {Integer}
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative VarAlias:
         child ann            : Annotation 
         child name           : {NameComponent}
         child aliased        : Name 
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
data VarDef = VarDef (Annotation) (NameComponent) (TypeName) ((Maybe ScalarExpr))
            | ParamAlias (Annotation) (NameComponent) (Integer)
            | VarAlias (Annotation) (NameComponent) (Name)
            deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_VarDef :: VarDef ->
              T_VarDef
_sem_VarDef (VarDef _ann _name _typ _value) =
    (_sem_VarDef_VarDef (_sem_Annotation _ann) _name (_sem_TypeName _typ) _value)
_sem_VarDef (ParamAlias _ann _name _i) =
    (_sem_VarDef_ParamAlias (_sem_Annotation _ann) _name _i)
_sem_VarDef (VarAlias _ann _name _aliased) =
    (_sem_VarDef_VarAlias (_sem_Annotation _ann) _name (_sem_Name _aliased))
-- semantic domain
type T_VarDef = Catalog ->
                TypeCheckingFlags ->
                (Maybe TypeExtra) ->
                ( VarDef,VarDef)
data Inh_VarDef = Inh_VarDef {_cat_Inh_VarDef :: Catalog,_flags_Inh_VarDef :: TypeCheckingFlags,_imCast_Inh_VarDef :: (Maybe TypeExtra)}
data Syn_VarDef = Syn_VarDef {_annotatedTree_Syn_VarDef :: VarDef,_originalTree_Syn_VarDef :: VarDef}
_wrap_VarDef :: T_VarDef ->
               Inh_VarDef ->
               Syn_VarDef
_wrap_VarDef sem (Inh_VarDef _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_VarDef _lhsOannotatedTree _lhsOoriginalTree))
_sem_VarDef_VarDef :: T_Annotation ->
                     NameComponent ->
                     T_TypeName ->
                     (Maybe ScalarExpr) ->
                     T_VarDef
_sem_VarDef_VarDef ann_ name_ typ_ value_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: VarDef
              _lhsOoriginalTree :: VarDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _typOcat :: Catalog
              _typOflags :: TypeCheckingFlags
              _typOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _typIannotatedTree :: TypeName
              _typInamedType :: (Maybe TypeExtra)
              _typIoriginalTree :: TypeName
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 235, column 21)
              _annOtpe =
                  ({-# LINE 235 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 28994 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   VarDef _annIannotatedTree name_ _typIannotatedTree value_
                   {-# LINE 29000 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   VarDef _annIoriginalTree name_ _typIoriginalTree value_
                   {-# LINE 29006 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 29012 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 29018 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 29024 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 29030 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 29036 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 29042 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 29048 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _typOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 29054 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _typIannotatedTree,_typInamedType,_typIoriginalTree) =
                  typ_ _typOcat _typOflags _typOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_VarDef_ParamAlias :: T_Annotation ->
                         NameComponent ->
                         Integer ->
                         T_VarDef
_sem_VarDef_ParamAlias ann_ name_ i_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: VarDef
              _lhsOoriginalTree :: VarDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 232, column 25)
              _annOtpe =
                  ({-# LINE 232 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 29081 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamAlias _annIannotatedTree name_ i_
                   {-# LINE 29087 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   ParamAlias _annIoriginalTree name_ i_
                   {-# LINE 29093 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 29099 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 29105 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 29111 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 29117 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 29123 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_VarDef_VarAlias :: T_Annotation ->
                       NameComponent ->
                       T_Name ->
                       T_VarDef
_sem_VarDef_VarAlias ann_ name_ aliased_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _aliasedOtpe :: (Either [TypeError] TypeExtra)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _lhsOannotatedTree :: VarDef
              _lhsOoriginalTree :: VarDef
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _aliasedOcat :: Catalog
              _aliasedOflags :: TypeCheckingFlags
              _aliasedOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _aliasedIannotatedTree :: Name
              _aliasedIoriginalTree :: Name
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 233, column 23)
              _aliasedOtpe =
                  ({-# LINE 233 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 29154 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag"(line 234, column 23)
              _annOtpe =
                  ({-# LINE 234 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/Boilerplate.ag" #-}
                   Left []
                   {-# LINE 29160 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   VarAlias _annIannotatedTree name_ _aliasedIannotatedTree
                   {-# LINE 29166 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   VarAlias _annIoriginalTree name_ _aliasedIoriginalTree
                   {-# LINE 29172 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 29178 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 29184 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 29190 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 29196 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 29202 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _aliasedOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 29208 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _aliasedOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 29214 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _aliasedOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 29220 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _aliasedIannotatedTree,_aliasedIoriginalTree) =
                  aliased_ _aliasedOcat _aliasedOflags _aliasedOimCast _aliasedOtpe
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- VarDefList --------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : VarDefList 
         originalTree         : VarDefList 
   alternatives:
      alternative Cons:
         child hd             : VarDef 
         child tl             : VarDefList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type VarDefList = [VarDef]
-- cata
_sem_VarDefList :: VarDefList ->
                  T_VarDefList
_sem_VarDefList list =
    (Prelude.foldr _sem_VarDefList_Cons _sem_VarDefList_Nil (Prelude.map _sem_VarDef list))
-- semantic domain
type T_VarDefList = Catalog ->
                    TypeCheckingFlags ->
                    (Maybe TypeExtra) ->
                    ( VarDefList,VarDefList)
data Inh_VarDefList = Inh_VarDefList {_cat_Inh_VarDefList :: Catalog,_flags_Inh_VarDefList :: TypeCheckingFlags,_imCast_Inh_VarDefList :: (Maybe TypeExtra)}
data Syn_VarDefList = Syn_VarDefList {_annotatedTree_Syn_VarDefList :: VarDefList,_originalTree_Syn_VarDefList :: VarDefList}
_wrap_VarDefList :: T_VarDefList ->
                   Inh_VarDefList ->
                   Syn_VarDefList
_wrap_VarDefList sem (Inh_VarDefList _lhsIcat _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOoriginalTree) = sem _lhsIcat _lhsIflags _lhsIimCast
     in  (Syn_VarDefList _lhsOannotatedTree _lhsOoriginalTree))
_sem_VarDefList_Cons :: T_VarDef ->
                       T_VarDefList ->
                       T_VarDefList
_sem_VarDefList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: VarDefList
              _lhsOoriginalTree :: VarDefList
              _hdOcat :: Catalog
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: VarDef
              _hdIoriginalTree :: VarDef
              _tlIannotatedTree :: VarDefList
              _tlIoriginalTree :: VarDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 29291 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 29297 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 29303 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 29309 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 29315 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 29321 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 29327 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 29333 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 29339 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 29345 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIoriginalTree) =
                  hd_ _hdOcat _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
_sem_VarDefList_Nil :: T_VarDefList
_sem_VarDefList_Nil =
    (\ _lhsIcat
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOannotatedTree :: VarDefList
              _lhsOoriginalTree :: VarDefList
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 29363 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 29369 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 29375 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 29381 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOoriginalTree)))
-- WithQuery ---------------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         catExtIncomp         : Either [TypeError] Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : WithQuery 
         colAliases           : Maybe [NameComponent]
         name                 : Text
         originalTree         : WithQuery 
         upType               : Maybe [(Text,TypeExtra)]
   alternatives:
      alternative WithQuery:
         child ann            : Annotation 
         child name           : {NameComponent}
         child colAliases     : {Maybe [NameComponent]}
         child ex             : QueryExpr 
         visit 0:
            local tpee        : {Either [TypeError] [(Text,TypeExtra)]}
            local tpe         : {Either [TypeError] TypeExtra}
            local annotatedTree : _
            local originalTree : _
-}
data WithQuery = WithQuery (Annotation) (NameComponent) ((Maybe [NameComponent])) (QueryExpr)
               deriving ( Data,Eq,Show,Typeable)
-- cata
_sem_WithQuery :: WithQuery ->
                 T_WithQuery
_sem_WithQuery (WithQuery _ann _name _colAliases _ex) =
    (_sem_WithQuery_WithQuery (_sem_Annotation _ann) _name _colAliases (_sem_QueryExpr _ex))
-- semantic domain
type T_WithQuery = Catalog ->
                   (Either [TypeError] Catalog) ->
                   TypeCheckingFlags ->
                   (Maybe TypeExtra) ->
                   ( WithQuery,(Maybe [NameComponent]),Text,WithQuery,(Maybe [(Text,TypeExtra)]))
data Inh_WithQuery = Inh_WithQuery {_cat_Inh_WithQuery :: Catalog,_catExtIncomp_Inh_WithQuery :: (Either [TypeError] Catalog),_flags_Inh_WithQuery :: TypeCheckingFlags,_imCast_Inh_WithQuery :: (Maybe TypeExtra)}
data Syn_WithQuery = Syn_WithQuery {_annotatedTree_Syn_WithQuery :: WithQuery,_colAliases_Syn_WithQuery :: (Maybe [NameComponent]),_name_Syn_WithQuery :: Text,_originalTree_Syn_WithQuery :: WithQuery,_upType_Syn_WithQuery :: (Maybe [(Text,TypeExtra)])}
_wrap_WithQuery :: T_WithQuery ->
                  Inh_WithQuery ->
                  Syn_WithQuery
_wrap_WithQuery sem (Inh_WithQuery _lhsIcat _lhsIcatExtIncomp _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOcolAliases,_lhsOname,_lhsOoriginalTree,_lhsOupType) = sem _lhsIcat _lhsIcatExtIncomp _lhsIflags _lhsIimCast
     in  (Syn_WithQuery _lhsOannotatedTree _lhsOcolAliases _lhsOname _lhsOoriginalTree _lhsOupType))
_sem_WithQuery_WithQuery :: T_Annotation ->
                           NameComponent ->
                           (Maybe [NameComponent]) ->
                           T_QueryExpr ->
                           T_WithQuery
_sem_WithQuery_WithQuery ann_ name_ colAliases_ ex_ =
    (\ _lhsIcat
       _lhsIcatExtIncomp
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOname :: Text
              _lhsOannotatedTree :: WithQuery
              _lhsOcolAliases :: (Maybe [NameComponent])
              _tpee :: (Either [TypeError] [(Text,TypeExtra)])
              _tpe :: (Either [TypeError] TypeExtra)
              _lhsOupType :: (Maybe [(Text,TypeExtra)])
              _exOouterDownEnv :: (Maybe Environment)
              _annOtpe :: (Either [TypeError] TypeExtra)
              _exOexpectedType :: (Maybe [TypeExtra])
              _exOassignmentCastContext :: Bool
              _lhsOoriginalTree :: WithQuery
              _annOcat :: Catalog
              _annOflags :: TypeCheckingFlags
              _annOimCast :: (Maybe TypeExtra)
              _exOcat :: Catalog
              _exOflags :: TypeCheckingFlags
              _exOimCast :: (Maybe TypeExtra)
              _annIannotatedTree :: Annotation
              _annIoriginalTree :: Annotation
              _exIannotatedTree :: QueryExpr
              _exIoriginalTree :: QueryExpr
              _exIupType :: (Maybe [(Text,TypeExtra)])
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 56, column 9)
              _lhsOname =
                  ({-# LINE 56 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   ncStrT name_
                   {-# LINE 29467 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 57, column 9)
              _lhsOannotatedTree =
                  ({-# LINE 57 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   WithQuery _annIannotatedTree name_ colAliases_ _exIannotatedTree
                   {-# LINE 29473 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 58, column 9)
              _lhsOcolAliases =
                  ({-# LINE 58 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   colAliases_
                   {-# LINE 29479 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 62, column 9)
              _tpee =
                  ({-# LINE 62 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   maybe (Left []) Right _exIupType
                   {-# LINE 29485 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 64, column 9)
              _tpe =
                  ({-# LINE 64 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM (mkTypeExtra . CompositeType) _tpee
                   {-# LINE 29491 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 66, column 9)
              _lhsOupType =
                  ({-# LINE 66 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   either (const Nothing) Just _tpee
                   {-# LINE 29497 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 95, column 15)
              _exOouterDownEnv =
                  ({-# LINE 95 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Nothing
                   {-# LINE 29503 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 101, column 9)
              _annOtpe =
                  ({-# LINE 101 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   Left []
                   {-# LINE 29509 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 102, column 9)
              _exOexpectedType =
                  ({-# LINE 102 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   liftM (map snd) _exIupType
                   {-# LINE 29515 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag"(line 850, column 27)
              _exOassignmentCastContext =
                  ({-# LINE 850 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/ScalarExprs.ag" #-}
                   False
                   {-# LINE 29521 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WithQuery _annIannotatedTree name_ colAliases_ _exIannotatedTree
                   {-# LINE 29527 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   WithQuery _annIoriginalTree name_ colAliases_ _exIoriginalTree
                   {-# LINE 29533 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 29539 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 29545 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 29551 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _annOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 29557 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 29563 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 29569 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _exOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 29575 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _annIannotatedTree,_annIoriginalTree) =
                  ann_ _annOcat _annOflags _annOimCast _annOtpe
              ( _exIannotatedTree,_exIoriginalTree,_exIupType) =
                  ex_ _exOassignmentCastContext _exOcat _exOexpectedType _exOflags _exOimCast _exOouterDownEnv
          in  ( _lhsOannotatedTree,_lhsOcolAliases,_lhsOname,_lhsOoriginalTree,_lhsOupType)))
-- WithQueryList -----------------------------------------------
{-
   visit 0:
      inherited attributes:
         cat                  : Catalog
         catExtIncomp         : Either [TypeError] Catalog
         flags                : TypeCheckingFlags
         imCast               : Maybe TypeExtra
      synthesized attributes:
         annotatedTree        : WithQueryList 
         catExtComp           : Either [TypeError] Catalog
         originalTree         : WithQueryList 
   alternatives:
      alternative Cons:
         child hd             : WithQuery 
         child tl             : WithQueryList 
         visit 0:
            local annotatedTree : _
            local originalTree : _
      alternative Nil:
         visit 0:
            local annotatedTree : _
            local originalTree : _
-}
type WithQueryList = [WithQuery]
-- cata
_sem_WithQueryList :: WithQueryList ->
                     T_WithQueryList
_sem_WithQueryList list =
    (Prelude.foldr _sem_WithQueryList_Cons _sem_WithQueryList_Nil (Prelude.map _sem_WithQuery list))
-- semantic domain
type T_WithQueryList = Catalog ->
                       (Either [TypeError] Catalog) ->
                       TypeCheckingFlags ->
                       (Maybe TypeExtra) ->
                       ( WithQueryList,(Either [TypeError] Catalog),WithQueryList)
data Inh_WithQueryList = Inh_WithQueryList {_cat_Inh_WithQueryList :: Catalog,_catExtIncomp_Inh_WithQueryList :: (Either [TypeError] Catalog),_flags_Inh_WithQueryList :: TypeCheckingFlags,_imCast_Inh_WithQueryList :: (Maybe TypeExtra)}
data Syn_WithQueryList = Syn_WithQueryList {_annotatedTree_Syn_WithQueryList :: WithQueryList,_catExtComp_Syn_WithQueryList :: (Either [TypeError] Catalog),_originalTree_Syn_WithQueryList :: WithQueryList}
_wrap_WithQueryList :: T_WithQueryList ->
                      Inh_WithQueryList ->
                      Syn_WithQueryList
_wrap_WithQueryList sem (Inh_WithQueryList _lhsIcat _lhsIcatExtIncomp _lhsIflags _lhsIimCast) =
    (let ( _lhsOannotatedTree,_lhsOcatExtComp,_lhsOoriginalTree) = sem _lhsIcat _lhsIcatExtIncomp _lhsIflags _lhsIimCast
     in  (Syn_WithQueryList _lhsOannotatedTree _lhsOcatExtComp _lhsOoriginalTree))
_sem_WithQueryList_Cons :: T_WithQuery ->
                          T_WithQueryList ->
                          T_WithQueryList
_sem_WithQueryList_Cons hd_ tl_ =
    (\ _lhsIcat
       _lhsIcatExtIncomp
       _lhsIflags
       _lhsIimCast ->
         (let _tlOcatExtIncomp :: (Either [TypeError] Catalog)
              _hdOcat :: Catalog
              _lhsOannotatedTree :: WithQueryList
              _lhsOoriginalTree :: WithQueryList
              _lhsOcatExtComp :: (Either [TypeError] Catalog)
              _hdOcatExtIncomp :: (Either [TypeError] Catalog)
              _hdOflags :: TypeCheckingFlags
              _hdOimCast :: (Maybe TypeExtra)
              _tlOcat :: Catalog
              _tlOflags :: TypeCheckingFlags
              _tlOimCast :: (Maybe TypeExtra)
              _hdIannotatedTree :: WithQuery
              _hdIcolAliases :: (Maybe [NameComponent])
              _hdIname :: Text
              _hdIoriginalTree :: WithQuery
              _hdIupType :: (Maybe [(Text,TypeExtra)])
              _tlIannotatedTree :: WithQueryList
              _tlIcatExtComp :: (Either [TypeError] Catalog)
              _tlIoriginalTree :: WithQueryList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 34, column 9)
              _tlOcatExtIncomp =
                  ({-# LINE 34 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   do
                   let getWithEx (WithQuery _ _ _ ex) = ex
                   upType' <- maybe (Left . anErrs . ann . getWithEx $ _hdIannotatedTree) Right
                     _hdIupType
                   colTyPairs <- mapM (secondM typeToCatName) upType'
                   colTyPairs' <- case _hdIcolAliases of
                     Just alsNms -> do
                       unless (length alsNms == length colTyPairs) $
                         Left [BadCatalogUpdate "number of aliases differs from number of expressions in the select"]
                       return $ zip (map ncStrT alsNms) $ map snd colTyPairs
                     Nothing -> return colTyPairs
                   updateCatalog [CatCreateTable ("public", _hdIname ) colTyPairs'] =<< _lhsIcatExtIncomp
                   {-# LINE 29668 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 47, column 9)
              _hdOcat =
                  ({-# LINE 47 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   case _lhsIcatExtIncomp of
                     Right catExtIncomp -> catExtIncomp
                     Left _ -> _lhsIcat
                   {-# LINE 29676 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIannotatedTree _tlIannotatedTree
                   {-# LINE 29682 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   (:) _hdIoriginalTree _tlIoriginalTree
                   {-# LINE 29688 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 29694 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 29700 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (up)
              _lhsOcatExtComp =
                  ({-# LINE 29 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _tlIcatExtComp
                   {-# LINE 29706 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOcatExtIncomp =
                  ({-# LINE 24 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIcatExtIncomp
                   {-# LINE 29712 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 29718 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _hdOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 29724 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOcat =
                  ({-# LINE 119 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIcat
                   {-# LINE 29730 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOflags =
                  ({-# LINE 120 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIflags
                   {-# LINE 29736 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- copy rule (down)
              _tlOimCast =
                  ({-# LINE 132 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _lhsIimCast
                   {-# LINE 29742 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              ( _hdIannotatedTree,_hdIcolAliases,_hdIname,_hdIoriginalTree,_hdIupType) =
                  hd_ _hdOcat _hdOcatExtIncomp _hdOflags _hdOimCast
              ( _tlIannotatedTree,_tlIcatExtComp,_tlIoriginalTree) =
                  tl_ _tlOcat _tlOcatExtIncomp _tlOflags _tlOimCast
          in  ( _lhsOannotatedTree,_lhsOcatExtComp,_lhsOoriginalTree)))
_sem_WithQueryList_Nil :: T_WithQueryList
_sem_WithQueryList_Nil =
    (\ _lhsIcat
       _lhsIcatExtIncomp
       _lhsIflags
       _lhsIimCast ->
         (let _lhsOcatExtComp :: (Either [TypeError] Catalog)
              _lhsOannotatedTree :: WithQueryList
              _lhsOoriginalTree :: WithQueryList
              -- "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag"(line 52, column 9)
              _lhsOcatExtComp =
                  ({-# LINE 52 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/QueryExprs/QueryExprs.ag" #-}
                   _lhsIcatExtIncomp
                   {-# LINE 29762 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _annotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 29768 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _originalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   []
                   {-# LINE 29774 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOannotatedTree =
                  ({-# LINE 121 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _annotatedTree
                   {-# LINE 29780 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
              -- self rule
              _lhsOoriginalTree =
                  ({-# LINE 122 "hssqlppp/src/Database/HsSqlPpp/Internals/TypeChecking/TypeChecking.ag" #-}
                   _originalTree
                   {-# LINE 29786 "hssqlppp/src/Database/HsSqlPpp/Internals/AstInternal.hs" #-}
                   )
          in  ( _lhsOannotatedTree,_lhsOcatExtComp,_lhsOoriginalTree)))
